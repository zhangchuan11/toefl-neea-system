(function(b, a) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = a() : typeof define === "function" && define.amd ? define(a) : b.moment = a()
}(this, (function() {
    var cJ;

    function ga() {
        return cJ.apply(null, arguments)
    }

    function bb(gQ) {
        cJ = gQ
    }

    function ac(gQ) {
        return gQ instanceof Array || Object.prototype.toString.call(gQ) === "[object Array]"
    }

    function A(gQ) {
        return gQ != null && Object.prototype.toString.call(gQ) === "[object Object]"
    }

    function cW(gR) {
        var gQ;
        for (gQ in gR) {
            return false
        }
        return true
    }

    function v(gQ) {
        return typeof gQ === "number" || Object.prototype.toString.call(gQ) === "[object Number]"
    }

    function f0(gQ) {
        return gQ instanceof Date || Object.prototype.toString.call(gQ) === "[object Date]"
    }

    function bL(gQ, gT) {
        var gS = [],
            gR;
        for (gR = 0; gR < gQ.length; ++gR) {
            gS.push(gT(gQ[gR], gR))
        }
        return gS
    }

    function ex(gR, gQ) {
        return Object.prototype.hasOwnProperty.call(gR, gQ)
    }

    function gA(gR, gQ) {
        for (var gS in gQ) {
            if (ex(gQ, gS)) {
                gR[gS] = gQ[gS]
            }
        }
        if (ex(gQ, "toString")) {
            gR.toString = gQ.toString
        }
        if (ex(gQ, "valueOf")) {
            gR.valueOf = gQ.valueOf
        }
        return gR
    }

    function dj(gS, gT, gQ, gR) {
        return an(gS, gT, gQ, gR, true).utc()
    }

    function dd() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null
        }
    }

    function bw(gQ) {
        if (gQ._pf == null) {
            gQ._pf = dd()
        }
        return gQ._pf
    }
    var eB;
    if (Array.prototype.some) {
        eB = Array.prototype.some
    } else {
        eB = function(gR) {
            var gT = Object(this);
            var gQ = gT.length >>> 0;
            for (var gS = 0; gS < gQ; gS++) {
                if (gS in gT && gR.call(this, gT[gS], gS, gT)) {
                    return true
                }
            }
            return false
        }
    }
    var dD = eB;

    function aG(gR) {
        if (gR._isValid == null) {
            var gS = bw(gR);
            var gT = dD.call(gS.parsedDateParts, function(gU) {
                return gU != null
            });
            var gQ = !isNaN(gR._d.getTime()) && gS.overflow < 0 && !gS.empty && !gS.invalidMonth && !gS.invalidWeekday && !gS.nullInput && !gS.invalidFormat && !gS.userInvalidated && (!gS.meridiem || (gS.meridiem && gT));
            if (gR._strict) {
                gQ = gQ && gS.charsLeftOver === 0 && gS.unusedTokens.length === 0 && gS.bigHour === undefined
            }
            if (Object.isFrozen == null || !Object.isFrozen(gR)) {
                gR._isValid = gQ
            } else {
                return gQ
            }
        }
        return gR._isValid
    }

    function T(gR) {
        var gQ = dj(NaN);
        if (gR != null) {
            gA(bw(gQ), gR)
        } else {
            bw(gQ).userInvalidated = true
        }
        return gQ
    }

    function L(gQ) {
        return gQ === void 0
    }
    var dS = ga.momentProperties = [];

    function u(gU, gT) {
        var gQ, gS, gR;
        if (!L(gT._isAMomentObject)) {
            gU._isAMomentObject = gT._isAMomentObject
        }
        if (!L(gT._i)) {
            gU._i = gT._i
        }
        if (!L(gT._f)) {
            gU._f = gT._f
        }
        if (!L(gT._l)) {
            gU._l = gT._l
        }
        if (!L(gT._strict)) {
            gU._strict = gT._strict
        }
        if (!L(gT._tzm)) {
            gU._tzm = gT._tzm
        }
        if (!L(gT._isUTC)) {
            gU._isUTC = gT._isUTC
        }
        if (!L(gT._offset)) {
            gU._offset = gT._offset
        }
        if (!L(gT._pf)) {
            gU._pf = bw(gT)
        }
        if (!L(gT._locale)) {
            gU._locale = gT._locale
        }
        if (dS.length > 0) {
            for (gQ in dS) {
                gS = dS[gQ];
                gR = gT[gS];
                if (!L(gR)) {
                    gU[gS] = gR
                }
            }
        }
        return gU
    }
    var eq = false;

    function fV(gQ) {
        u(this, gQ);
        this._d = new Date(gQ._d != null ? gQ._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN)
        }
        if (eq === false) {
            eq = true;
            ga.updateOffset(this);
            eq = false
        }
    }

    function cK(gQ) {
        return gQ instanceof fV || (gQ != null && gQ._isAMomentObject != null)
    }

    function eu(gQ) {
        if (gQ < 0) {
            return Math.ceil(gQ) || 0
        } else {
            return Math.floor(gQ)
        }
    }

    function dP(gQ) {
        var gS = +gQ,
            gR = 0;
        if (gS !== 0 && isFinite(gS)) {
            gR = eu(gS)
        }
        return gR
    }

    function co(gV, gU, gR) {
        var gQ = Math.min(gV.length, gU.length),
            gS = Math.abs(gV.length - gU.length),
            gW = 0,
            gT;
        for (gT = 0; gT < gQ; gT++) {
            if ((gR && gV[gT] !== gU[gT]) || (!gR && dP(gV[gT]) !== dP(gU[gT]))) {
                gW++
            }
        }
        return gW + gS
    }

    function ei(gQ) {
        if (ga.suppressDeprecationWarnings === false && (typeof console !== "undefined") && console.warn) {
            console.warn("Deprecation warning: " + gQ)
        }
    }

    function fy(gR, gQ) {
        var gS = true;
        return gA(function() {
            if (ga.deprecationHandler != null) {
                ga.deprecationHandler(null, gR)
            }
            if (gS) {
                var gU = [];
                var gT;
                for (var gW = 0; gW < arguments.length; gW++) {
                    gT = "";
                    if (typeof arguments[gW] === "object") {
                        gT += "\n[" + gW + "] ";
                        for (var gV in arguments[0]) {
                            gT += gV + ": " + arguments[0][gV] + ", "
                        }
                        gT = gT.slice(0, -2)
                    } else {
                        gT = arguments[gW]
                    }
                    gU.push(gT)
                }
                ei(gR + "\nArguments: " + Array.prototype.slice.call(gU).join("") + "\n" + (new Error()).stack);
                gS = false
            }
            return gQ.apply(this, arguments)
        }, gQ)
    }
    var ai = {};

    function gr(gQ, gR) {
        if (ga.deprecationHandler != null) {
            ga.deprecationHandler(gQ, gR)
        }
        if (!ai[gQ]) {
            ei(gR);
            ai[gQ] = true
        }
    }
    ga.suppressDeprecationWarnings = false;
    ga.deprecationHandler = null;

    function br(gQ) {
        return gQ instanceof Function || Object.prototype.toString.call(gQ) === "[object Function]"
    }

    function ez(gQ) {
        var gS, gR;
        for (gR in gQ) {
            gS = gQ[gR];
            if (br(gS)) {
                this[gR] = gS
            } else {
                this["_" + gR] = gS
            }
        }
        this._config = gQ;
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + (/\d{1,2}/).source)
    }

    function fo(gS, gQ) {
        var gR = gA({}, gS),
            gT;
        for (gT in gQ) {
            if (ex(gQ, gT)) {
                if (A(gS[gT]) && A(gQ[gT])) {
                    gR[gT] = {};
                    gA(gR[gT], gS[gT]);
                    gA(gR[gT], gQ[gT])
                } else {
                    if (gQ[gT] != null) {
                        gR[gT] = gQ[gT]
                    } else {
                        delete gR[gT]
                    }
                }
            }
        }
        for (gT in gS) {
            if (ex(gS, gT) && !ex(gQ, gT) && A(gS[gT])) {
                gR[gT] = gA({}, gR[gT])
            }
        }
        return gR
    }

    function du(gQ) {
        if (gQ != null) {
            this.set(gQ)
        }
    }
    var ck;
    if (Object.keys) {
        ck = Object.keys
    } else {
        ck = function(gS) {
            var gR, gQ = [];
            for (gR in gS) {
                if (ex(gS, gR)) {
                    gQ.push(gR)
                }
            }
            return gQ
        }
    }
    var e2 = ck;
    var c4 = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
    };

    function d(gS, gT, gR) {
        var gQ = this._calendar[gS] || this._calendar.sameElse;
        return br(gQ) ? gQ.call(gT, gR) : gQ
    }
    var fd = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    };

    function dH(gQ) {
        var gR = this._longDateFormat[gQ],
            gS = this._longDateFormat[gQ.toUpperCase()];
        if (gR || !gS) {
            return gR
        }
        this._longDateFormat[gQ] = gS.replace(/MMMM|MM|DD|dddd/g, function(gT) {
            return gT.slice(1)
        });
        return this._longDateFormat[gQ]
    }
    var aE = "Invalid date";

    function fT() {
        return this._invalidDate
    }
    var cE = "%d";
    var bS = /\d{1,2}/;

    function f7(gQ) {
        return this._ordinal.replace("%d", gQ)
    }
    var f6 = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
    };

    function aa(gT, gS, gR, gU) {
        var gQ = this._relativeTime[gR];
        return (br(gQ)) ? gQ(gT, gS, gR, gU) : gQ.replace(/%d/i, gT)
    }

    function fe(gS, gQ) {
        var gR = this._relativeTime[gS > 0 ? "future" : "past"];
        return br(gR) ? gR(gQ) : gR.replace(/%s/i, gQ)
    }
    var dJ = {};

    function cQ(gS, gQ) {
        var gR = gS.toLowerCase();
        dJ[gR] = dJ[gR + "s"] = dJ[gQ] = gS
    }

    function dO(gQ) {
        return typeof gQ === "string" ? dJ[gQ] || dJ[gQ.toLowerCase()] : undefined
    }

    function eZ(gS) {
        var gR = {},
            gQ, gT;
        for (gT in gS) {
            if (ex(gS, gT)) {
                gQ = dO(gT);
                if (gQ) {
                    gR[gQ] = gS[gT]
                }
            }
        }
        return gR
    }
    var bQ = {};

    function fc(gR, gQ) {
        bQ[gR] = gQ
    }

    function bN(gQ) {
        var gR = [];
        for (var gS in gQ) {
            gR.push({
                unit: gS,
                priority: bQ[gS]
            })
        }
        gR.sort(function(gU, gT) {
            return gU.priority - gT.priority
        });
        return gR
    }

    function fv(gQ, gR) {
        return function(gS) {
            if (gS != null) {
                a5(this, gQ, gS);
                ga.updateOffset(this, gR);
                return this
            } else {
                return eM(this, gQ)
            }
        }
    }

    function eM(gR, gQ) {
        return gR.isValid() ? gR._d["get" + (gR._isUTC ? "UTC" : "") + gQ]() : NaN
    }

    function a5(gR, gQ, gS) {
        if (gR.isValid()) {
            gR._d["set" + (gR._isUTC ? "UTC" : "") + gQ](gS)
        }
    }

    function aT(gQ) {
        gQ = dO(gQ);
        if (br(this[gQ])) {
            return this[gQ]()
        }
        return this
    }

    function aK(gQ, gT) {
        if (typeof gQ === "object") {
            gQ = eZ(gQ);
            var gS = bN(gQ);
            for (var gR = 0; gR < gS.length; gR++) {
                this[gS[gR].unit](gQ[gS[gR].unit])
            }
        } else {
            gQ = dO(gQ);
            if (br(this[gQ])) {
                return this[gQ](gT)
            }
        }
        return this
    }

    function da(gV, gU, gR) {
        var gT = "" + Math.abs(gV),
            gS = gU - gT.length,
            gQ = gV >= 0;
        return (gQ ? (gR ? "+" : "") : "-") + Math.pow(10, Math.max(0, gS)).toString().substr(1) + gT
    }
    var cf = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var ce = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var cd = {};
    var bu = {};

    function dn(gR, gS, gQ, gU) {
        var gT = gU;
        if (typeof gU === "string") {
            gT = function() {
                return this[gU]()
            }
        }
        if (gR) {
            bu[gR] = gT
        }
        if (gS) {
            bu[gS[0]] = function() {
                return da(gT.apply(this, arguments), gS[1], gS[2])
            }
        }
        if (gQ) {
            bu[gQ] = function() {
                return this.localeData().ordinal(gT.apply(this, arguments), gR)
            }
        }
    }

    function aM(gQ) {
        if (gQ.match(/\[[\s\S]/)) {
            return gQ.replace(/^\[|\]$/g, "")
        }
        return gQ.replace(/\\/g, "")
    }

    function bV(gS) {
        var gT = gS.match(cf),
            gQ, gR;
        for (gQ = 0, gR = gT.length; gQ < gR; gQ++) {
            if (bu[gT[gQ]]) {
                gT[gQ] = bu[gT[gQ]]
            } else {
                gT[gQ] = aM(gT[gQ])
            }
        }
        return function(gW) {
            var gU = "",
                gV;
            for (gV = 0; gV < gR; gV++) {
                gU += gT[gV] instanceof Function ? gT[gV].call(gW, gS) : gT[gV]
            }
            return gU
        }
    }

    function au(gQ, gR) {
        if (!gQ.isValid()) {
            return gQ.localeData().invalidDate()
        }
        gR = b4(gR, gQ.localeData());
        cd[gR] = cd[gR] || bV(gR);
        return cd[gR](gQ)
    }

    function b4(gT, gQ) {
        var gR = 5;

        function gS(gU) {
            return gQ.longDateFormat(gU) || gU
        }
        ce.lastIndex = 0;
        while (gR >= 0 && ce.test(gT)) {
            gT = gT.replace(ce, gS);
            ce.lastIndex = 0;
            gR -= 1
        }
        return gT
    }
    var a4 = /\d/;
    var a3 = /\d\d/;
    var a2 = /\d{3}/;
    var a1 = /\d{4}/;
    var a0 = /[+-]?\d{6}/;
    var aJ = /\d\d?/;
    var c7 = /\d\d\d\d?/;
    var fx = /\d\d\d\d\d\d?/;
    var aI = /\d{1,3}/;
    var aH = /\d{1,4}/;
    var aF = /[+-]?\d{1,6}/;
    var w = /\d+/;
    var H = /[+-]?\d+/;
    var b6 = /Z|[+-]\d\d:?\d\d/gi;
    var dA = /Z|[+-]\d\d(?::?\d\d)?/gi;
    var gs = /[+-]?\d+(\.\d{1,3})?/;
    var bt = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var bn = {};

    function by(gQ, gR, gS) {
        bn[gQ] = br(gR) ? gR : function(gU, gT) {
            return (gU && gS) ? gS : gR
        }
    }

    function b2(gR, gQ) {
        if (!ex(bn, gR)) {
            return new RegExp(ev(gR))
        }
        return bn[gR](gQ._strict, gQ._locale)
    }

    function ev(gQ) {
        return cT(gQ.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(gR, gV, gU, gT, gS) {
            return gV || gU || gT || gS
        }))
    }

    function cT(gQ) {
        return gQ.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
    }
    var i = {};

    function ci(gR, gT) {
        var gQ, gS = gT;
        if (typeof gR === "string") {
            gR = [gR]
        }
        if (v(gT)) {
            gS = function(gU, gV) {
                gV[gT] = dP(gU)
            }
        }
        for (gQ = 0; gQ < gR.length; gQ++) {
            i[gR[gQ]] = gS
        }
    }

    function af(gQ, gR) {
        ci(gQ, function(gS, gV, gT, gU) {
            gT._w = gT._w || {};
            gR(gS, gT._w, gT, gU)
        })
    }

    function z(gS, gQ, gR) {
        if (gQ != null && ex(i, gS)) {
            i[gS](gQ, gR._a, gR, gS)
        }
    }
    var gt = 0;
    var m = 1;
    var fY = 2;
    var gf = 3;
    var eU = 4;
    var aB = 5;
    var b8 = 6;
    var c0 = 7;
    var k = 8;
    var dQ;
    if (Array.prototype.indexOf) {
        dQ = Array.prototype.indexOf
    } else {
        dQ = function(gR) {
            var gQ;
            for (gQ = 0; gQ < this.length; ++gQ) {
                if (this[gQ] === gR) {
                    return gQ
                }
            }
            return -1
        }
    }
    var eb = dQ;

    function b5(gQ, gR) {
        return new Date(Date.UTC(gQ, gR + 1, 0)).getUTCDate()
    }
    dn("M", ["MM", 2], "Mo", function() {
        return this.month() + 1
    });
    dn("MMM", 0, 0, function(gQ) {
        return this.localeData().monthsShort(this, gQ)
    });
    dn("MMMM", 0, 0, function(gQ) {
        return this.localeData().months(this, gQ)
    });
    cQ("month", "M");
    fc("month", 8);
    by("M", aJ);
    by("MM", aJ, a3);
    by("MMM", function(gR, gQ) {
        return gQ.monthsShortRegex(gR)
    });
    by("MMMM", function(gR, gQ) {
        return gQ.monthsRegex(gR)
    });
    ci(["M", "MM"], function(gQ, gR) {
        gR[m] = dP(gQ) - 1
    });
    ci(["MMM", "MMMM"], function(gQ, gU, gR, gS) {
        var gT = gR._locale.monthsParse(gQ, gS, gR._strict);
        if (gT != null) {
            gU[m] = gT
        } else {
            bw(gR).invalidMonth = gQ
        }
    });
    var cB = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var V = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");

    function bl(gQ, gR) {
        if (!gQ) {
            return this._months
        }
        return ac(this._months) ? this._months[gQ.month()] : this._months[(this._months.isFormat || cB).test(gR) ? "format" : "standalone"][gQ.month()]
    }
    var fh = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");

    function bv(gQ, gR) {
        if (!gQ) {
            return this._monthsShort
        }
        return ac(this._monthsShort) ? this._monthsShort[gQ.month()] : this._monthsShort[cB.test(gR) ? "format" : "standalone"][gQ.month()]
    }

    function b0(gR, gW, gQ) {
        var gT, gU, gV, gS = gR.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (gT = 0; gT < 12; ++gT) {
                gV = dj([2000, gT]);
                this._shortMonthsParse[gT] = this.monthsShort(gV, "").toLocaleLowerCase();
                this._longMonthsParse[gT] = this.months(gV, "").toLocaleLowerCase()
            }
        }
        if (gQ) {
            if (gW === "MMM") {
                gU = eb.call(this._shortMonthsParse, gS);
                return gU !== -1 ? gU : null
            } else {
                gU = eb.call(this._longMonthsParse, gS);
                return gU !== -1 ? gU : null
            }
        } else {
            if (gW === "MMM") {
                gU = eb.call(this._shortMonthsParse, gS);
                if (gU !== -1) {
                    return gU
                }
                gU = eb.call(this._longMonthsParse, gS);
                return gU !== -1 ? gU : null
            } else {
                gU = eb.call(this._longMonthsParse, gS);
                if (gU !== -1) {
                    return gU
                }
                gU = eb.call(this._shortMonthsParse, gS);
                return gU !== -1 ? gU : null
            }
        }
    }

    function ef(gR, gV, gQ) {
        var gS, gU, gT;
        if (this._monthsParseExact) {
            return b0.call(this, gR, gV, gQ)
        }
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = []
        }
        for (gS = 0; gS < 12; gS++) {
            gU = dj([2000, gS]);
            if (gQ && !this._longMonthsParse[gS]) {
                this._longMonthsParse[gS] = new RegExp("^" + this.months(gU, "").replace(".", "") + "$", "i");
                this._shortMonthsParse[gS] = new RegExp("^" + this.monthsShort(gU, "").replace(".", "") + "$", "i")
            }
            if (!gQ && !this._monthsParse[gS]) {
                gT = "^" + this.months(gU, "") + "|^" + this.monthsShort(gU, "");
                this._monthsParse[gS] = new RegExp(gT.replace(".", ""), "i")
            }
            if (gQ && gV === "MMMM" && this._longMonthsParse[gS].test(gR)) {
                return gS
            } else {
                if (gQ && gV === "MMM" && this._shortMonthsParse[gS].test(gR)) {
                    return gS
                } else {
                    if (!gQ && this._monthsParse[gS].test(gR)) {
                        return gS
                    }
                }
            }
        }
    }

    function bg(gQ, gR) {
        var gS;
        if (!gQ.isValid()) {
            return gQ
        }
        if (typeof gR === "string") {
            if (/^\d+$/.test(gR)) {
                gR = dP(gR)
            } else {
                gR = gQ.localeData().monthsParse(gR);
                if (!v(gR)) {
                    return gQ
                }
            }
        }
        gS = Math.min(gQ.date(), b5(gQ.year(), gR));
        gQ._d["set" + (gQ._isUTC ? "UTC" : "") + "Month"](gR, gS);
        return gQ
    }

    function ge(gQ) {
        if (gQ != null) {
            bg(this, gQ);
            ga.updateOffset(this, true);
            return this
        } else {
            return eM(this, "Month")
        }
    }

    function cb() {
        return b5(this.year(), this.month())
    }
    var et = bt;

    function ew(gQ) {
        if (this._monthsParseExact) {
            if (!ex(this, "_monthsRegex")) {
                ey.call(this)
            }
            if (gQ) {
                return this._monthsShortStrictRegex
            } else {
                return this._monthsShortRegex
            }
        } else {
            if (!ex(this, "_monthsShortRegex")) {
                this._monthsShortRegex = et
            }
            return this._monthsShortStrictRegex && gQ ? this._monthsShortStrictRegex : this._monthsShortRegex
        }
    }
    var f3 = bt;

    function dY(gQ) {
        if (this._monthsParseExact) {
            if (!ex(this, "_monthsRegex")) {
                ey.call(this)
            }
            if (gQ) {
                return this._monthsStrictRegex
            } else {
                return this._monthsRegex
            }
        } else {
            if (!ex(this, "_monthsRegex")) {
                this._monthsRegex = f3
            }
            return this._monthsStrictRegex && gQ ? this._monthsStrictRegex : this._monthsRegex
        }
    }

    function ey() {
        function gV(gX, gW) {
            return gW.length - gX.length
        }
        var gU = [],
            gQ = [],
            gT = [],
            gR, gS;
        for (gR = 0; gR < 12; gR++) {
            gS = dj([2000, gR]);
            gU.push(this.monthsShort(gS, ""));
            gQ.push(this.months(gS, ""));
            gT.push(this.months(gS, ""));
            gT.push(this.monthsShort(gS, ""))
        }
        gU.sort(gV);
        gQ.sort(gV);
        gT.sort(gV);
        for (gR = 0; gR < 12; gR++) {
            gU[gR] = cT(gU[gR]);
            gQ[gR] = cT(gQ[gR])
        }
        for (gR = 0; gR < 24; gR++) {
            gT[gR] = cT(gT[gR])
        }
        this._monthsRegex = new RegExp("^(" + gT.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + gQ.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + gU.join("|") + ")", "i")
    }
    dn("Y", 0, 0, function() {
        var gQ = this.year();
        return gQ <= 9999 ? "" + gQ : "+" + gQ
    });
    dn(0, ["YY", 2], 0, function() {
        return this.year() % 100
    });
    dn(0, ["YYYY", 4], 0, "year");
    dn(0, ["YYYYY", 5], 0, "year");
    dn(0, ["YYYYYY", 6, true], 0, "year");
    cQ("year", "y");
    fc("year", 1);
    by("Y", H);
    by("YY", aJ, a3);
    by("YYYY", aH, a1);
    by("YYYYY", aF, a0);
    by("YYYYYY", aF, a0);
    ci(["YYYYY", "YYYYYY"], gt);
    ci("YYYY", function(gQ, gR) {
        gR[gt] = gQ.length === 2 ? ga.parseTwoDigitYear(gQ) : dP(gQ)
    });
    ci("YY", function(gQ, gR) {
        gR[gt] = ga.parseTwoDigitYear(gQ)
    });
    ci("Y", function(gQ, gR) {
        gR[gt] = parseInt(gQ, 10)
    });

    function eR(gQ) {
        return fg(gQ) ? 366 : 365
    }

    function fg(gQ) {
        return (gQ % 4 === 0 && gQ % 100 !== 0) || gQ % 400 === 0
    }
    ga.parseTwoDigitYear = function(gQ) {
        return dP(gQ) + (dP(gQ) > 68 ? 1900 : 2000)
    };
    var dC = fv("FullYear", true);

    function dV() {
        return fg(this.year())
    }

    function fp(gX, gQ, gV, gU, gW, gT, gS) {
        var gR = new Date(gX, gQ, gV, gU, gW, gT, gS);
        if (gX < 100 && gX >= 0 && isFinite(gR.getFullYear())) {
            gR.setFullYear(gX)
        }
        return gR
    }

    function eG(gR) {
        var gQ = new Date(Date.UTC.apply(null, arguments));
        if (gR < 100 && gR >= 0 && isFinite(gQ.getUTCFullYear())) {
            gQ.setUTCFullYear(gR)
        }
        return gQ
    }

    function bE(gR, gU, gT) {
        var gQ = 7 + gU - gT,
            gS = (7 + eG(gR, 0, gQ).getUTCDay() - gU) % 7;
        return -gS + gQ - 1
    }

    function bY(gT, gR, gS, gZ, gX) {
        var gY = (7 + gS - gZ) % 7,
            gQ = bE(gT, gZ, gX),
            gV = 1 + 7 * (gR - 1) + gY + gQ,
            gW, gU;
        if (gV <= 0) {
            gW = gT - 1;
            gU = eR(gW) + gV
        } else {
            if (gV > eR(gT)) {
                gW = gT + 1;
                gU = gV - eR(gT)
            } else {
                gW = gT;
                gU = gV
            }
        }
        return {
            year: gW,
            dayOfYear: gU
        }
    }

    function fW(gU, gW, gV) {
        var gS = bE(gU.year(), gW, gV),
            gT = Math.floor((gU.dayOfYear() - gS - 1) / 7) + 1,
            gQ, gR;
        if (gT < 1) {
            gR = gU.year() - 1;
            gQ = gT + K(gR, gW, gV)
        } else {
            if (gT > K(gU.year(), gW, gV)) {
                gQ = gT - K(gU.year(), gW, gV);
                gR = gU.year() + 1
            } else {
                gR = gU.year();
                gQ = gT
            }
        }
        return {
            week: gQ,
            year: gR
        }
    }

    function K(gR, gU, gS) {
        var gQ = bE(gR, gU, gS),
            gT = bE(gR + 1, gU, gS);
        return (eR(gR) - gQ + gT) / 7
    }
    dn("w", ["ww", 2], "wo", "week");
    dn("W", ["WW", 2], "Wo", "isoWeek");
    cQ("week", "w");
    cQ("isoWeek", "W");
    fc("week", 5);
    fc("isoWeek", 5);
    by("w", aJ);
    by("ww", aJ, a3);
    by("W", aJ);
    by("WW", aJ, a3);
    af(["w", "ww", "W", "WW"], function(gQ, gT, gR, gS) {
        gT[gS.substr(0, 1)] = dP(gQ)
    });

    function bM(gQ) {
        return fW(gQ, this._week.dow, this._week.doy).week
    }
    var cA = {
        dow: 0,
        doy: 6
    };

    function ay() {
        return this._week.dow
    }

    function ec() {
        return this._week.doy
    }

    function P(gQ) {
        var gR = this.localeData().week(this);
        return gQ == null ? gR : this.add((gQ - gR) * 7, "d")
    }

    function D(gQ) {
        var gR = fW(this, 1, 4).week;
        return gQ == null ? gR : this.add((gQ - gR) * 7, "d")
    }
    dn("d", 0, "do", "day");
    dn("dd", 0, 0, function(gQ) {
        return this.localeData().weekdaysMin(this, gQ)
    });
    dn("ddd", 0, 0, function(gQ) {
        return this.localeData().weekdaysShort(this, gQ)
    });
    dn("dddd", 0, 0, function(gQ) {
        return this.localeData().weekdays(this, gQ)
    });
    dn("e", 0, 0, "weekday");
    dn("E", 0, 0, "isoWeekday");
    cQ("day", "d");
    cQ("weekday", "e");
    cQ("isoWeekday", "E");
    fc("day", 11);
    fc("weekday", 11);
    fc("isoWeekday", 11);
    by("d", aJ);
    by("e", aJ);
    by("E", aJ);
    by("dd", function(gR, gQ) {
        return gQ.weekdaysMinRegex(gR)
    });
    by("ddd", function(gR, gQ) {
        return gQ.weekdaysShortRegex(gR)
    });
    by("dddd", function(gR, gQ) {
        return gQ.weekdaysRegex(gR)
    });
    af(["dd", "ddd", "dddd"], function(gQ, gT, gR, gS) {
        var gU = gR._locale.weekdaysParse(gQ, gS, gR._strict);
        if (gU != null) {
            gT.d = gU
        } else {
            bw(gR).invalidWeekday = gQ
        }
    });
    af(["d", "e", "E"], function(gQ, gT, gR, gS) {
        gT[gS] = dP(gQ)
    });

    function bD(gR, gQ) {
        if (typeof gR !== "string") {
            return gR
        }
        if (!isNaN(gR)) {
            return parseInt(gR, 10)
        }
        gR = gQ.weekdaysParse(gR);
        if (typeof gR === "number") {
            return gR
        }
        return null
    }

    function b1(gR, gQ) {
        if (typeof gR === "string") {
            return gQ.weekdaysParse(gR) % 7 || 7
        }
        return isNaN(gR) ? null : gR
    }
    var Z = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");

    function aN(gQ, gR) {
        if (!gQ) {
            return this._weekdays
        }
        return ac(this._weekdays) ? this._weekdays[gQ.day()] : this._weekdays[this._weekdays.isFormat.test(gR) ? "format" : "standalone"][gQ.day()]
    }
    var p = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");

    function S(gQ) {
        return (gQ) ? this._weekdaysShort[gQ.day()] : this._weekdaysShort
    }
    var bR = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");

    function gb(gQ) {
        return (gQ) ? this._weekdaysMin[gQ.day()] : this._weekdaysMin
    }

    function e3(gV, gW, gQ) {
        var gS, gT, gU, gR = gV.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (gS = 0; gS < 7; ++gS) {
                gU = dj([2000, 1]).day(gS);
                this._minWeekdaysParse[gS] = this.weekdaysMin(gU, "").toLocaleLowerCase();
                this._shortWeekdaysParse[gS] = this.weekdaysShort(gU, "").toLocaleLowerCase();
                this._weekdaysParse[gS] = this.weekdays(gU, "").toLocaleLowerCase()
            }
        }
        if (gQ) {
            if (gW === "dddd") {
                gT = eb.call(this._weekdaysParse, gR);
                return gT !== -1 ? gT : null
            } else {
                if (gW === "ddd") {
                    gT = eb.call(this._shortWeekdaysParse, gR);
                    return gT !== -1 ? gT : null
                } else {
                    gT = eb.call(this._minWeekdaysParse, gR);
                    return gT !== -1 ? gT : null
                }
            }
        } else {
            if (gW === "dddd") {
                gT = eb.call(this._weekdaysParse, gR);
                if (gT !== -1) {
                    return gT
                }
                gT = eb.call(this._shortWeekdaysParse, gR);
                if (gT !== -1) {
                    return gT
                }
                gT = eb.call(this._minWeekdaysParse, gR);
                return gT !== -1 ? gT : null
            } else {
                if (gW === "ddd") {
                    gT = eb.call(this._shortWeekdaysParse, gR);
                    if (gT !== -1) {
                        return gT
                    }
                    gT = eb.call(this._weekdaysParse, gR);
                    if (gT !== -1) {
                        return gT
                    }
                    gT = eb.call(this._minWeekdaysParse, gR);
                    return gT !== -1 ? gT : null
                } else {
                    gT = eb.call(this._minWeekdaysParse, gR);
                    if (gT !== -1) {
                        return gT
                    }
                    gT = eb.call(this._weekdaysParse, gR);
                    if (gT !== -1) {
                        return gT
                    }
                    gT = eb.call(this._shortWeekdaysParse, gR);
                    return gT !== -1 ? gT : null
                }
            }
        }
    }

    function ca(gU, gV, gQ) {
        var gR, gT, gS;
        if (this._weekdaysParseExact) {
            return e3.call(this, gU, gV, gQ)
        }
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = []
        }
        for (gR = 0; gR < 7; gR++) {
            gT = dj([2000, 1]).day(gR);
            if (gQ && !this._fullWeekdaysParse[gR]) {
                this._fullWeekdaysParse[gR] = new RegExp("^" + this.weekdays(gT, "").replace(".", ".?") + "$", "i");
                this._shortWeekdaysParse[gR] = new RegExp("^" + this.weekdaysShort(gT, "").replace(".", ".?") + "$", "i");
                this._minWeekdaysParse[gR] = new RegExp("^" + this.weekdaysMin(gT, "").replace(".", ".?") + "$", "i")
            }
            if (!this._weekdaysParse[gR]) {
                gS = "^" + this.weekdays(gT, "") + "|^" + this.weekdaysShort(gT, "") + "|^" + this.weekdaysMin(gT, "");
                this._weekdaysParse[gR] = new RegExp(gS.replace(".", ""), "i")
            }
            if (gQ && gV === "dddd" && this._fullWeekdaysParse[gR].test(gU)) {
                return gR
            } else {
                if (gQ && gV === "ddd" && this._shortWeekdaysParse[gR].test(gU)) {
                    return gR
                } else {
                    if (gQ && gV === "dd" && this._minWeekdaysParse[gR].test(gU)) {
                        return gR
                    } else {
                        if (!gQ && this._weekdaysParse[gR].test(gU)) {
                            return gR
                        }
                    }
                }
            }
        }
    }

    function fN(gR) {
        if (!this.isValid()) {
            return gR != null ? this : NaN
        }
        var gQ = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (gR != null) {
            gR = bD(gR, this.localeData());
            return this.add(gR - gQ, "d")
        } else {
            return gQ
        }
    }

    function ao(gQ) {
        if (!this.isValid()) {
            return gQ != null ? this : NaN
        }
        var gR = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return gQ == null ? gR : this.add(gQ - gR, "d")
    }

    function dh(gQ) {
        if (!this.isValid()) {
            return gQ != null ? this : NaN
        }
        if (gQ != null) {
            var gR = b1(gQ, this.localeData());
            return this.day(this.day() % 7 ? gR : gR - 7)
        } else {
            return this.day() || 7
        }
    }
    var ak = bt;

    function gv(gQ) {
        if (this._weekdaysParseExact) {
            if (!ex(this, "_weekdaysRegex")) {
                F.call(this)
            }
            if (gQ) {
                return this._weekdaysStrictRegex
            } else {
                return this._weekdaysRegex
            }
        } else {
            if (!ex(this, "_weekdaysRegex")) {
                this._weekdaysRegex = ak
            }
            return this._weekdaysStrictRegex && gQ ? this._weekdaysStrictRegex : this._weekdaysRegex
        }
    }
    var B = bt;

    function aZ(gQ) {
        if (this._weekdaysParseExact) {
            if (!ex(this, "_weekdaysRegex")) {
                F.call(this)
            }
            if (gQ) {
                return this._weekdaysShortStrictRegex
            } else {
                return this._weekdaysShortRegex
            }
        } else {
            if (!ex(this, "_weekdaysShortRegex")) {
                this._weekdaysShortRegex = B
            }
            return this._weekdaysShortStrictRegex && gQ ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex
        }
    }
    var fa = bt;

    function J(gQ) {
        if (this._weekdaysParseExact) {
            if (!ex(this, "_weekdaysRegex")) {
                F.call(this)
            }
            if (gQ) {
                return this._weekdaysMinStrictRegex
            } else {
                return this._weekdaysMinRegex
            }
        } else {
            if (!ex(this, "_weekdaysMinRegex")) {
                this._weekdaysMinRegex = fa
            }
            return this._weekdaysMinStrictRegex && gQ ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex
        }
    }

    function F() {
        function gT(g1, g0) {
            return g0.length - g1.length
        }
        var gV = [],
            gW = [],
            gZ = [],
            gQ = [],
            gU, gS, gR, gX, gY;
        for (gU = 0; gU < 7; gU++) {
            gS = dj([2000, 1]).day(gU);
            gR = this.weekdaysMin(gS, "");
            gX = this.weekdaysShort(gS, "");
            gY = this.weekdays(gS, "");
            gV.push(gR);
            gW.push(gX);
            gZ.push(gY);
            gQ.push(gR);
            gQ.push(gX);
            gQ.push(gY)
        }
        gV.sort(gT);
        gW.sort(gT);
        gZ.sort(gT);
        gQ.sort(gT);
        for (gU = 0; gU < 7; gU++) {
            gW[gU] = cT(gW[gU]);
            gZ[gU] = cT(gZ[gU]);
            gQ[gU] = cT(gQ[gU])
        }
        this._weekdaysRegex = new RegExp("^(" + gQ.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + gZ.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + gW.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + gV.join("|") + ")", "i")
    }

    function eK() {
        return this.hours() % 12 || 12
    }

    function U() {
        return this.hours() || 24
    }
    dn("H", ["HH", 2], 0, "hour");
    dn("h", ["hh", 2], 0, eK);
    dn("k", ["kk", 2], 0, U);
    dn("hmm", 0, 0, function() {
        return "" + eK.apply(this) + da(this.minutes(), 2)
    });
    dn("hmmss", 0, 0, function() {
        return "" + eK.apply(this) + da(this.minutes(), 2) + da(this.seconds(), 2)
    });
    dn("Hmm", 0, 0, function() {
        return "" + this.hours() + da(this.minutes(), 2)
    });
    dn("Hmmss", 0, 0, function() {
        return "" + this.hours() + da(this.minutes(), 2) + da(this.seconds(), 2)
    });

    function fR(gQ, gR) {
        dn(gQ, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), gR)
        })
    }
    fR("a", true);
    fR("A", false);
    cQ("hour", "h");
    fc("hour", 13);

    function Y(gR, gQ) {
        return gQ._meridiemParse
    }
    by("a", Y);
    by("A", Y);
    by("H", aJ);
    by("h", aJ);
    by("HH", aJ, a3);
    by("hh", aJ, a3);
    by("hmm", c7);
    by("hmmss", fx);
    by("Hmm", c7);
    by("Hmmss", fx);
    ci(["H", "HH"], gf);
    ci(["a", "A"], function(gQ, gS, gR) {
        gR._isPm = gR._locale.isPM(gQ);
        gR._meridiem = gQ
    });
    ci(["h", "hh"], function(gQ, gS, gR) {
        gS[gf] = dP(gQ);
        bw(gR).bigHour = true
    });
    ci("hmm", function(gQ, gT, gR) {
        var gS = gQ.length - 2;
        gT[gf] = dP(gQ.substr(0, gS));
        gT[eU] = dP(gQ.substr(gS));
        bw(gR).bigHour = true
    });
    ci("hmmss", function(gQ, gU, gR) {
        var gT = gQ.length - 4;
        var gS = gQ.length - 2;
        gU[gf] = dP(gQ.substr(0, gT));
        gU[eU] = dP(gQ.substr(gT, 2));
        gU[aB] = dP(gQ.substr(gS));
        bw(gR).bigHour = true
    });
    ci("Hmm", function(gQ, gT, gR) {
        var gS = gQ.length - 2;
        gT[gf] = dP(gQ.substr(0, gS));
        gT[eU] = dP(gQ.substr(gS))
    });
    ci("Hmmss", function(gQ, gU, gR) {
        var gT = gQ.length - 4;
        var gS = gQ.length - 2;
        gU[gf] = dP(gQ.substr(0, gT));
        gU[eU] = dP(gQ.substr(gT, 2));
        gU[aB] = dP(gQ.substr(gS))
    });

    function cM(gQ) {
        return ((gQ + "").toLowerCase().charAt(0) === "p")
    }
    var cD = /[ap]\.?m?\.?/i;

    function bd(gQ, gR, gS) {
        if (gQ > 11) {
            return gS ? "pm" : "PM"
        } else {
            return gS ? "am" : "AM"
        }
    }
    var db = fv("Hours", true);
    var cx = {
        calendar: c4,
        longDateFormat: fd,
        invalidDate: aE,
        ordinal: cE,
        ordinalParse: bS,
        relativeTime: f6,
        months: V,
        monthsShort: fh,
        week: cA,
        weekdays: Z,
        weekdaysMin: bR,
        weekdaysShort: p,
        meridiemParse: cD
    };
    var bW = {};
    var q = {};
    var dX;

    function eA(gQ) {
        return gQ ? gQ.toLowerCase().replace("_", "-") : gQ
    }

    function dW(gV) {
        var gT = 0,
            gR, gU, gQ, gS;
        while (gT < gV.length) {
            gS = eA(gV[gT]).split("-");
            gR = gS.length;
            gU = eA(gV[gT + 1]);
            gU = gU ? gU.split("-") : null;
            while (gR > 0) {
                gQ = aV(gS.slice(0, gR).join("-"));
                if (gQ) {
                    return gQ
                }
                if (gU && gU.length >= gR && co(gS, gU, true) >= gR - 1) {
                    break
                }
                gR--
            }
            gT++
        }
        return null
    }

    function aV(gQ) {
        var gS = null;
        if (!bW[gQ] && (typeof module !== "undefined") && module && module.exports) {
            try {
                gS = dX._abbr;
                require("./locale/" + gQ);
                G(gS)
            } catch (gR) {}
        }
        return bW[gQ]
    }

    function G(gR, gQ) {
        var gS;
        if (gR) {
            if (L(gQ)) {
                gS = W(gR)
            } else {
                gS = ds(gR, gQ)
            }
            if (gS) {
                dX = gS
            }
        }
        return dX._abbr
    }

    function ds(gR, gQ) {
        if (gQ !== null) {
            var gS = cx;
            gQ.abbr = gR;
            if (bW[gR] != null) {
                gr("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                gS = bW[gR]._config
            } else {
                if (gQ.parentLocale != null) {
                    if (bW[gQ.parentLocale] != null) {
                        gS = bW[gQ.parentLocale]._config
                    } else {
                        if (!q[gQ.parentLocale]) {
                            q[gQ.parentLocale] = []
                        }
                        q[gQ.parentLocale].push({
                            name: gR,
                            config: gQ
                        });
                        return null
                    }
                }
            }
            bW[gR] = new du(fo(gS, gQ));
            if (q[gR]) {
                q[gR].forEach(function(gT) {
                    ds(gT.name, gT.config)
                })
            }
            G(gR);
            return bW[gR]
        } else {
            delete bW[gR];
            return null
        }
    }

    function fO(gS, gR) {
        if (gR != null) {
            var gQ, gT = cx;
            if (bW[gS] != null) {
                gT = bW[gS]._config
            }
            gR = fo(gT, gR);
            gQ = new du(gR);
            gQ.parentLocale = bW[gS];
            bW[gS] = gQ;
            G(gS)
        } else {
            if (bW[gS] != null) {
                if (bW[gS].parentLocale != null) {
                    bW[gS] = bW[gS].parentLocale
                } else {
                    if (bW[gS] != null) {
                        delete bW[gS]
                    }
                }
            }
        }
        return bW[gS]
    }

    function W(gR) {
        var gQ;
        if (gR && gR._locale && gR._locale._abbr) {
            gR = gR._locale._abbr
        }
        if (!gR) {
            return dX
        }
        if (!ac(gR)) {
            gQ = aV(gR);
            if (gQ) {
                return gQ
            }
            gR = [gR]
        }
        return dW(gR)
    }

    function cC() {
        return e2(bW)
    }

    function dN(gQ) {
        var gS;
        var gR = gQ._a;
        if (gR && bw(gQ).overflow === -2) {
            gS = gR[m] < 0 || gR[m] > 11 ? m : gR[fY] < 1 || gR[fY] > b5(gR[gt], gR[m]) ? fY : gR[gf] < 0 || gR[gf] > 24 || (gR[gf] === 24 && (gR[eU] !== 0 || gR[aB] !== 0 || gR[b8] !== 0)) ? gf : gR[eU] < 0 || gR[eU] > 59 ? eU : gR[aB] < 0 || gR[aB] > 59 ? aB : gR[b8] < 0 || gR[b8] > 999 ? b8 : -1;
            if (bw(gQ)._overflowDayOfYear && (gS < gt || gS > fY)) {
                gS = fY
            }
            if (bw(gQ)._overflowWeeks && gS === -1) {
                gS = c0
            }
            if (bw(gQ)._overflowWeekday && gS === -1) {
                gS = k
            }
            bw(gQ).overflow = gS
        }
        return gQ
    }
    var n = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var bc = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var dB = /Z|[+-]\d\d(?::?\d\d)?/;
    var dR = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/]
    ];
    var dc = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
    ];
    var cj = /^\/?Date\((\-?\d+)/i;

    function I(gR) {
        var gV, gT, gX = gR._i,
            gW = n.exec(gX) || bc.exec(gX),
            gY, gQ, gU, gS;
        if (gW) {
            bw(gR).iso = true;
            for (gV = 0, gT = dR.length; gV < gT; gV++) {
                if (dR[gV][1].exec(gW[1])) {
                    gQ = dR[gV][0];
                    gY = dR[gV][2] !== false;
                    break
                }
            }
            if (gQ == null) {
                gR._isValid = false;
                return
            }
            if (gW[3]) {
                for (gV = 0, gT = dc.length; gV < gT; gV++) {
                    if (dc[gV][1].exec(gW[3])) {
                        gU = (gW[2] || " ") + dc[gV][0];
                        break
                    }
                }
                if (gU == null) {
                    gR._isValid = false;
                    return
                }
            }
            if (!gY && gU != null) {
                gR._isValid = false;
                return
            }
            if (gW[4]) {
                if (dB.exec(gW[4])) {
                    gS = "Z"
                } else {
                    gR._isValid = false;
                    return
                }
            }
            gR._f = gQ + (gU || "") + (gS || "");
            cl(gR)
        } else {
            gR._isValid = false
        }
    }

    function bx(gR) {
        var gQ = cj.exec(gR._i);
        if (gQ !== null) {
            gR._d = new Date(+gQ[1]);
            return
        }
        I(gR);
        if (gR._isValid === false) {
            delete gR._isValid;
            ga.createFromInputFallback(gR)
        }
    }
    ga.createFromInputFallback = fy("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(gQ) {
        gQ._d = new Date(gQ._i + (gQ._useUTC ? " UTC" : ""))
    });

    function fq(gR, gQ, gS) {
        if (gR != null) {
            return gR
        }
        if (gQ != null) {
            return gQ
        }
        return gS
    }

    function bm(gR) {
        var gQ = new Date(ga.now());
        if (gR._useUTC) {
            return [gQ.getUTCFullYear(), gQ.getUTCMonth(), gQ.getUTCDate()]
        }
        return [gQ.getFullYear(), gQ.getMonth(), gQ.getDate()]
    }

    function g(gU) {
        var gV, gT, gS = [],
            gR, gQ;
        if (gU._d) {
            return
        }
        gR = bm(gU);
        if (gU._w && gU._a[fY] == null && gU._a[m] == null) {
            d1(gU)
        }
        if (gU._dayOfYear) {
            gQ = fq(gU._a[gt], gR[gt]);
            if (gU._dayOfYear > eR(gQ)) {
                bw(gU)._overflowDayOfYear = true
            }
            gT = eG(gQ, 0, gU._dayOfYear);
            gU._a[m] = gT.getUTCMonth();
            gU._a[fY] = gT.getUTCDate()
        }
        for (gV = 0; gV < 3 && gU._a[gV] == null; ++gV) {
            gU._a[gV] = gS[gV] = gR[gV]
        }
        for (; gV < 7; gV++) {
            gU._a[gV] = gS[gV] = (gU._a[gV] == null) ? (gV === 2 ? 1 : 0) : gU._a[gV]
        }
        if (gU._a[gf] === 24 && gU._a[eU] === 0 && gU._a[aB] === 0 && gU._a[b8] === 0) {
            gU._nextDay = true;
            gU._a[gf] = 0
        }
        gU._d = (gU._useUTC ? eG : fp).apply(null, gS);
        if (gU._tzm != null) {
            gU._d.setUTCMinutes(gU._d.getUTCMinutes() - gU._tzm)
        }
        if (gU._nextDay) {
            gU._a[gf] = 24
        }
    }

    function d1(gT) {
        var gW, gQ, gR, gU, gZ, gX, gY, gV;
        gW = gT._w;
        if (gW.GG != null || gW.W != null || gW.E != null) {
            gZ = 1;
            gX = 4;
            gQ = fq(gW.GG, gT._a[gt], fW(eN(), 1, 4).year);
            gR = fq(gW.W, 1);
            gU = fq(gW.E, 1);
            if (gU < 1 || gU > 7) {
                gV = true
            }
        } else {
            gZ = gT._locale._week.dow;
            gX = gT._locale._week.doy;
            var gS = fW(eN(), gZ, gX);
            gQ = fq(gW.gg, gT._a[gt], gS.year);
            gR = fq(gW.w, gS.week);
            if (gW.d != null) {
                gU = gW.d;
                if (gU < 0 || gU > 6) {
                    gV = true
                }
            } else {
                if (gW.e != null) {
                    gU = gW.e + gZ;
                    if (gW.e < 0 || gW.e > 6) {
                        gV = true
                    }
                } else {
                    gU = gZ
                }
            }
        }
        if (gR < 1 || gR > K(gQ, gZ, gX)) {
            bw(gT)._overflowWeeks = true
        } else {
            if (gV != null) {
                bw(gT)._overflowWeekday = true
            } else {
                gY = bY(gQ, gR, gU, gZ, gX);
                gT._a[gt] = gY.year;
                gT._dayOfYear = gY.dayOfYear
            }
        }
    }
    ga.ISO_8601 = function() {};

    function cl(gS) {
        if (gS._f === ga.ISO_8601) {
            I(gS);
            return
        }
        gS._a = [];
        bw(gS).empty = true;
        var gV = "" + gS._i,
            gU, gR, gY, gT, gX, gQ = gV.length,
            gW = 0;
        gY = b4(gS._f, gS._locale).match(cf) || [];
        for (gU = 0; gU < gY.length; gU++) {
            gT = gY[gU];
            gR = (gV.match(b2(gT, gS)) || [])[0];
            if (gR) {
                gX = gV.substr(0, gV.indexOf(gR));
                if (gX.length > 0) {
                    bw(gS).unusedInput.push(gX)
                }
                gV = gV.slice(gV.indexOf(gR) + gR.length);
                gW += gR.length
            }
            if (bu[gT]) {
                if (gR) {
                    bw(gS).empty = false
                } else {
                    bw(gS).unusedTokens.push(gT)
                }
                z(gT, gR, gS)
            } else {
                if (gS._strict && !gR) {
                    bw(gS).unusedTokens.push(gT)
                }
            }
        }
        bw(gS).charsLeftOver = gQ - gW;
        if (gV.length > 0) {
            bw(gS).unusedInput.push(gV)
        }
        if (gS._a[gf] <= 12 && bw(gS).bigHour === true && gS._a[gf] > 0) {
            bw(gS).bigHour = undefined
        }
        bw(gS).parsedDateParts = gS._a.slice(0);
        bw(gS).meridiem = gS._meridiem;
        gS._a[gf] = fz(gS._locale, gS._a[gf], gS._meridiem);
        g(gS);
        dN(gS)
    }

    function fz(gQ, gS, gT) {
        var gR;
        if (gT == null) {
            return gS
        }
        if (gQ.meridiemHour != null) {
            return gQ.meridiemHour(gS, gT)
        } else {
            if (gQ.isPM != null) {
                gR = gQ.isPM(gT);
                if (gR && gS < 12) {
                    gS += 12
                }
                if (!gR && gS === 12) {
                    gS = 0
                }
                return gS
            } else {
                return gS
            }
        }
    }

    function eP(gQ) {
        var gU, gS, gT, gR, gV;
        if (gQ._f.length === 0) {
            bw(gQ).invalidFormat = true;
            gQ._d = new Date(NaN);
            return
        }
        for (gR = 0; gR < gQ._f.length; gR++) {
            gV = 0;
            gU = u({}, gQ);
            if (gQ._useUTC != null) {
                gU._useUTC = gQ._useUTC
            }
            gU._f = gQ._f[gR];
            cl(gU);
            if (!aG(gU)) {
                continue
            }
            gV += bw(gU).charsLeftOver;
            gV += bw(gU).unusedTokens.length * 10;
            bw(gU).score = gV;
            if (gT == null || gV < gT) {
                gT = gV;
                gS = gU
            }
        }
        gA(gQ, gS || gU)
    }

    function bo(gQ) {
        if (gQ._d) {
            return
        }
        var gR = eZ(gQ._i);
        gQ._a = bL([gR.year, gR.month, gR.day || gR.date, gR.hour, gR.minute, gR.second, gR.millisecond], function(gS) {
            return gS && parseInt(gS, 10)
        });
        g(gQ)
    }

    function aD(gQ) {
        var gR = new fV(dN(bP(gQ)));
        if (gR._nextDay) {
            gR.add(1, "d");
            gR._nextDay = undefined
        }
        return gR
    }

    function bP(gR) {
        var gQ = gR._i,
            gS = gR._f;
        gR._locale = gR._locale || W(gR._l);
        if (gQ === null || (gS === undefined && gQ === "")) {
            return T({
                nullInput: true
            })
        }
        if (typeof gQ === "string") {
            gR._i = gQ = gR._locale.preparse(gQ)
        }
        if (cK(gQ)) {
            return new fV(dN(gQ))
        } else {
            if (f0(gQ)) {
                gR._d = gQ
            } else {
                if (ac(gS)) {
                    eP(gR)
                } else {
                    if (gS) {
                        cl(gR)
                    } else {
                        di(gR)
                    }
                }
            }
        }
        if (!aG(gR)) {
            gR._d = null
        }
        return gR
    }

    function di(gR) {
        var gQ = gR._i;
        if (gQ === undefined) {
            gR._d = new Date(ga.now())
        } else {
            if (f0(gQ)) {
                gR._d = new Date(gQ.valueOf())
            } else {
                if (typeof gQ === "string") {
                    bx(gR)
                } else {
                    if (ac(gQ)) {
                        gR._a = bL(gQ.slice(0), function(gS) {
                            return parseInt(gS, 10)
                        });
                        g(gR)
                    } else {
                        if (typeof(gQ) === "object") {
                            bo(gR)
                        } else {
                            if (v(gQ)) {
                                gR._d = new Date(gQ)
                            } else {
                                ga.createFromInputFallback(gR)
                            }
                        }
                    }
                }
            }
        }
    }

    function an(gT, gU, gQ, gS, gR) {
        var gV = {};
        if (gQ === true || gQ === false) {
            gS = gQ;
            gQ = undefined
        }
        if ((A(gT) && cW(gT)) || (ac(gT) && gT.length === 0)) {
            gT = undefined
        }
        gV._isAMomentObject = true;
        gV._useUTC = gV._isUTC = gR;
        gV._l = gQ;
        gV._i = gT;
        gV._f = gU;
        gV._strict = gS;
        return aD(gV)
    }

    function eN(gS, gT, gQ, gR) {
        return an(gS, gT, gQ, gR, false)
    }
    var dG = fy("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var gQ = eN.apply(null, arguments);
        if (this.isValid() && gQ.isValid()) {
            return gQ < this ? this : gQ
        } else {
            return T()
        }
    });
    var fS = fy("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var gQ = eN.apply(null, arguments);
        if (this.isValid() && gQ.isValid()) {
            return gQ > this ? this : gQ
        } else {
            return T()
        }
    });

    function gD(gS, gT) {
        var gR, gQ;
        if (gT.length === 1 && ac(gT[0])) {
            gT = gT[0]
        }
        if (!gT.length) {
            return eN()
        }
        gR = gT[0];
        for (gQ = 1; gQ < gT.length; ++gQ) {
            if (!gT[gQ].isValid() || gT[gQ][gS](gR)) {
                gR = gT[gQ]
            }
        }
        return gR
    }

    function t() {
        var gQ = [].slice.call(arguments, 0);
        return gD("isBefore", gQ)
    }

    function bI() {
        var gQ = [].slice.call(arguments, 0);
        return gD("isAfter", gQ)
    }
    var dq = function() {
        return Date.now ? Date.now() : +(new Date())
    };

    function e4(gV) {
        var gX = eZ(gV),
            gW = gX.year || 0,
            gR = gX.quarter || 0,
            gS = gX.month || 0,
            gQ = gX.week || 0,
            g0 = gX.day || 0,
            gY = gX.hour || 0,
            gU = gX.minute || 0,
            gZ = gX.second || 0,
            gT = gX.millisecond || 0;
        this._milliseconds = +gT + gZ * 1000 + gU * 60000 + gY * 1000 * 60 * 60;
        this._days = +g0 + gQ * 7;
        this._months = +gS + gR * 3 + gW * 12;
        this._data = {};
        this._locale = W();
        this._bubble()
    }

    function at(gQ) {
        return gQ instanceof e4
    }

    function fL(gQ) {
        if (gQ < 0) {
            return Math.round(-1 * gQ) * -1
        } else {
            return Math.round(gQ)
        }
    }

    function bT(gQ, gR) {
        dn(gQ, 0, 0, function() {
            var gT = this.utcOffset();
            var gS = "+";
            if (gT < 0) {
                gT = -gT;
                gS = "-"
            }
            return gS + da(~~(gT / 60), 2) + gR + da(~~(gT) % 60, 2)
        })
    }
    bT("Z", ":");
    bT("ZZ", "");
    by("Z", dA);
    by("ZZ", dA);
    ci(["Z", "ZZ"], function(gQ, gS, gR) {
        gR._useUTC = true;
        gR._tzm = s(dA, gQ)
    });
    var f9 = /([\+\-]|\d\d)/gi;

    function s(gV, gR) {
        var gT = (gR || "").match(gV);
        if (gT === null) {
            return null
        }
        var gQ = gT[gT.length - 1] || [];
        var gU = (gQ + "").match(f9) || ["-", 0, 0];
        var gS = +(gU[1] * 60) + dP(gU[2]);
        return gS === 0 ? 0 : gU[0] === "+" ? gS : -gS
    }

    function aW(gQ, gR) {
        var gS, gT;
        if (gR._isUTC) {
            gS = gR.clone();
            gT = (cK(gQ) || f0(gQ) ? gQ.valueOf() : eN(gQ).valueOf()) - gS.valueOf();
            gS._d.setTime(gS._d.valueOf() + gT);
            ga.updateOffset(gS, false);
            return gS
        } else {
            return eN(gQ).local()
        }
    }

    function a7(gQ) {
        return -Math.round(gQ._d.getTimezoneOffset() / 15) * 15
    }
    ga.updateOffset = function() {};

    function eH(gQ, gT) {
        var gS = this._offset || 0,
            gR;
        if (!this.isValid()) {
            return gQ != null ? this : NaN
        }
        if (gQ != null) {
            if (typeof gQ === "string") {
                gQ = s(dA, gQ);
                if (gQ === null) {
                    return this
                }
            } else {
                if (Math.abs(gQ) < 16) {
                    gQ = gQ * 60
                }
            }
            if (!this._isUTC && gT) {
                gR = a7(this)
            }
            this._offset = gQ;
            this._isUTC = true;
            if (gR != null) {
                this.add(gR, "m")
            }
            if (gS !== gQ) {
                if (!gT || this._changeInProgress) {
                    bj(this, er(gQ - gS, "m"), 1, false)
                } else {
                    if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        ga.updateOffset(this, true);
                        this._changeInProgress = null
                    }
                }
            }
            return this
        } else {
            return this._isUTC ? gS : a7(this)
        }
    }

    function eC(gQ, gR) {
        if (gQ != null) {
            if (typeof gQ !== "string") {
                gQ = -gQ
            }
            this.utcOffset(gQ, gR);
            return this
        } else {
            return -this.utcOffset()
        }
    }

    function bk(gQ) {
        return this.utcOffset(0, gQ)
    }

    function eE(gQ) {
        if (this._isUTC) {
            this.utcOffset(0, gQ);
            this._isUTC = false;
            if (gQ) {
                this.subtract(a7(this), "m")
            }
        }
        return this
    }

    function cH() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm)
        } else {
            if (typeof this._i === "string") {
                var gQ = s(b6, this._i);
                if (gQ != null) {
                    this.utcOffset(gQ)
                } else {
                    this.utcOffset(0, true)
                }
            }
        }
        return this
    }

    function aU(gQ) {
        if (!this.isValid()) {
            return false
        }
        gQ = gQ ? eN(gQ).utcOffset() : 0;
        return (this.utcOffset() - gQ) % 60 === 0
    }

    function a6() {
        return (this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset())
    }

    function b() {
        if (!L(this._isDSTShifted)) {
            return this._isDSTShifted
        }
        var gR = {};
        u(gR, this);
        gR = bP(gR);
        if (gR._a) {
            var gQ = gR._isUTC ? dj(gR._a) : eN(gR._a);
            this._isDSTShifted = this.isValid() && co(gR._a, gQ.toArray()) > 0
        } else {
            this._isDSTShifted = false
        }
        return this._isDSTShifted
    }

    function eI() {
        return this.isValid() ? !this._isUTC : false
    }

    function cg() {
        return this.isValid() ? this._isUTC : false
    }

    function eO() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false
    }
    var ah = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    var dm = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

    function er(gS, gV) {
        var gW = gS,
            gU = null,
            gR, gT, gQ;
        if (at(gS)) {
            gW = {
                ms: gS._milliseconds,
                d: gS._days,
                M: gS._months
            }
        } else {
            if (v(gS)) {
                gW = {};
                if (gV) {
                    gW[gV] = gS
                } else {
                    gW.milliseconds = gS
                }
            } else {
                if (!!(gU = ah.exec(gS))) {
                    gR = (gU[1] === "-") ? -1 : 1;
                    gW = {
                        y: 0,
                        d: dP(gU[fY]) * gR,
                        h: dP(gU[gf]) * gR,
                        m: dP(gU[eU]) * gR,
                        s: dP(gU[aB]) * gR,
                        ms: dP(fL(gU[b8] * 1000)) * gR
                    }
                } else {
                    if (!!(gU = dm.exec(gS))) {
                        gR = (gU[1] === "-") ? -1 : 1;
                        gW = {
                            y: gu(gU[2], gR),
                            M: gu(gU[3], gR),
                            w: gu(gU[4], gR),
                            d: gu(gU[5], gR),
                            h: gu(gU[6], gR),
                            m: gu(gU[7], gR),
                            s: gu(gU[8], gR)
                        }
                    } else {
                        if (gW == null) {
                            gW = {}
                        } else {
                            if (typeof gW === "object" && ("from" in gW || "to" in gW)) {
                                gQ = cc(eN(gW.from), eN(gW.to));
                                gW = {};
                                gW.ms = gQ.milliseconds;
                                gW.M = gQ.months
                            }
                        }
                    }
                }
            }
        }
        gT = new e4(gW);
        if (at(gS) && ex(gS, "_locale")) {
            gT._locale = gS._locale
        }
        return gT
    }
    er.fn = e4.prototype;

    function gu(gS, gQ) {
        var gR = gS && parseFloat(gS.replace(",", "."));
        return (isNaN(gR) ? 0 : gR) * gQ
    }

    function eL(gS, gQ) {
        var gR = {
            milliseconds: 0,
            months: 0
        };
        gR.months = gQ.month() - gS.month() + (gQ.year() - gS.year()) * 12;
        if (gS.clone().add(gR.months, "M").isAfter(gQ)) {
            --gR.months
        }
        gR.milliseconds = +gQ - +(gS.clone().add(gR.months, "M"));
        return gR
    }

    function cc(gS, gQ) {
        var gR;
        if (!(gS.isValid() && gQ.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            }
        }
        gQ = aW(gQ, gS);
        if (gS.isBefore(gQ)) {
            gR = eL(gS, gQ)
        } else {
            gR = eL(gQ, gS);
            gR.milliseconds = -gR.milliseconds;
            gR.months = -gR.months
        }
        return gR
    }

    function bp(gR, gQ) {
        return function(gV, gU) {
            var gT, gS;
            if (gU !== null && !isNaN(+gU)) {
                gr(gQ, "moment()." + gQ + "(period, number) is deprecated. Please use moment()." + gQ + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                gS = gV;
                gV = gU;
                gU = gS
            }
            gV = typeof gV === "string" ? +gV : gV;
            gT = er(gV, gU);
            bj(this, gT, gR);
            return this
        }
    }

    function bj(gS, gV, gU, gT) {
        var gR = gV._milliseconds,
            gW = fL(gV._days),
            gQ = fL(gV._months);
        if (!gS.isValid()) {
            return
        }
        gT = gT == null ? true : gT;
        if (gR) {
            gS._d.setTime(gS._d.valueOf() + gR * gU)
        }
        if (gW) {
            a5(gS, "Date", eM(gS, "Date") + gW * gU)
        }
        if (gQ) {
            bg(gS, eM(gS, "Month") + gQ * gU)
        }
        if (gT) {
            ga.updateOffset(gS, gW || gQ)
        }
    }
    var bi = bp(1, "add");
    var aO = bp(-1, "subtract");

    function aL(gS, gQ) {
        var gR = gS.diff(gQ, "days", true);
        return gR < -6 ? "sameElse" : gR < -1 ? "lastWeek" : gR < 0 ? "lastDay" : gR < 1 ? "sameDay" : gR < 2 ? "nextDay" : gR < 7 ? "nextWeek" : "sameElse"
    }

    function cS(gV, gQ) {
        var gT = gV || eN(),
            gS = aW(gT, this).startOf("day"),
            gU = ga.calendarFormat(this, gS) || "sameElse";
        var gR = gQ && (br(gQ[gU]) ? gQ[gU].call(this, gT) : gQ[gU]);
        return this.format(gR || this.localeData().calendar(gU, this, eN(gT)))
    }

    function eD() {
        return new fV(this)
    }

    function dx(gR, gQ) {
        var gS = cK(gR) ? gR : eN(gR);
        if (!(this.isValid() && gS.isValid())) {
            return false
        }
        gQ = dO(!L(gQ) ? gQ : "millisecond");
        if (gQ === "millisecond") {
            return this.valueOf() > gS.valueOf()
        } else {
            return gS.valueOf() < this.clone().startOf(gQ).valueOf()
        }
    }

    function go(gR, gQ) {
        var gS = cK(gR) ? gR : eN(gR);
        if (!(this.isValid() && gS.isValid())) {
            return false
        }
        gQ = dO(!L(gQ) ? gQ : "millisecond");
        if (gQ === "millisecond") {
            return this.valueOf() < gS.valueOf()
        } else {
            return this.clone().endOf(gQ).valueOf() < gS.valueOf()
        }
    }

    function fU(gT, gS, gQ, gR) {
        gR = gR || "()";
        return (gR[0] === "(" ? this.isAfter(gT, gQ) : !this.isBefore(gT, gQ)) && (gR[1] === ")" ? this.isBefore(gS, gQ) : !this.isAfter(gS, gQ))
    }

    function dE(gR, gQ) {
        var gT = cK(gR) ? gR : eN(gR),
            gS;
        if (!(this.isValid() && gT.isValid())) {
            return false
        }
        gQ = dO(gQ || "millisecond");
        if (gQ === "millisecond") {
            return this.valueOf() === gT.valueOf()
        } else {
            gS = gT.valueOf();
            return this.clone().startOf(gQ).valueOf() <= gS && gS <= this.clone().endOf(gQ).valueOf()
        }
    }

    function gh(gR, gQ) {
        return this.isSame(gR, gQ) || this.isAfter(gR, gQ)
    }

    function gl(gR, gQ) {
        return this.isSame(gR, gQ) || this.isBefore(gR, gQ)
    }

    function Q(gT, gS, gQ) {
        var gV, gU, gW, gR;
        if (!this.isValid()) {
            return NaN
        }
        gV = aW(gT, this);
        if (!gV.isValid()) {
            return NaN
        }
        gU = (gV.utcOffset() - this.utcOffset()) * 60000;
        gS = dO(gS);
        if (gS === "year" || gS === "month" || gS === "quarter") {
            gR = fP(this, gV);
            if (gS === "quarter") {
                gR = gR / 3
            } else {
                if (gS === "year") {
                    gR = gR / 12
                }
            }
        } else {
            gW = this - gV;
            gR = gS === "second" ? gW / 1000 : gS === "minute" ? gW / 60000 : gS === "hour" ? gW / 3600000 : gS === "day" ? (gW - gU) / 86400000 : gS === "week" ? (gW - gU) / 604800000 : gW
        }
        return gQ ? gR : eu(gR)
    }

    function fP(gR, gQ) {
        var gV = ((gQ.year() - gR.year()) * 12) + (gQ.month() - gR.month()),
            gS = gR.clone().add(gV, "months"),
            gT, gU;
        if (gQ - gS < 0) {
            gT = gR.clone().add(gV - 1, "months");
            gU = (gQ - gS) / (gS - gT)
        } else {
            gT = gR.clone().add(gV + 1, "months");
            gU = (gQ - gS) / (gT - gS)
        }
        return -(gV + gU) || 0
    }
    ga.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    ga.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";

    function fi() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
    }

    function d4() {
        var gQ = this.clone().utc();
        if (0 < gQ.year() && gQ.year() <= 9999) {
            if (br(Date.prototype.toISOString)) {
                return this.toDate().toISOString()
            } else {
                return au(gQ, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
            }
        } else {
            return au(gQ, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
        }
    }

    function ba() {
        if (!this.isValid()) {
            return "moment.invalid(/* " + this._i + " */)"
        }
        var gS = "moment";
        var gQ = "";
        if (!this.isLocal()) {
            gS = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            gQ = "Z"
        }
        var gT = "[" + gS + '("]';
        var gR = (0 < this.year() && this.year() <= 9999) ? "YYYY" : "YYYYYY";
        var gV = "-MM-DD[T]HH:mm:ss.SSS";
        var gU = gQ + '[")]';
        return this.format(gT + gR + gV + gU)
    }

    function d8(gR) {
        if (!gR) {
            gR = this.isUtc() ? ga.defaultFormatUtc : ga.defaultFormat
        }
        var gQ = au(this, gR);
        return this.localeData().postformat(gQ)
    }

    function e7(gR, gQ) {
        if (this.isValid() && ((cK(gR) && gR.isValid()) || eN(gR).isValid())) {
            return er({
                to: this,
                from: gR
            }).locale(this.locale()).humanize(!gQ)
        } else {
            return this.localeData().invalidDate()
        }
    }

    function e0(gQ) {
        return this.from(eN(), gQ)
    }

    function az(gR, gQ) {
        if (this.isValid() && ((cK(gR) && gR.isValid()) || eN(gR).isValid())) {
            return er({
                from: this,
                to: gR
            }).locale(this.locale()).humanize(!gQ)
        } else {
            return this.localeData().invalidDate()
        }
    }

    function a9(gQ) {
        return this.to(eN(), gQ)
    }

    function gP(gR) {
        var gQ;
        if (gR === undefined) {
            return this._locale._abbr
        } else {
            gQ = W(gR);
            if (gQ != null) {
                this._locale = gQ
            }
            return this
        }
    }
    var E = fy("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(gQ) {
        if (gQ === undefined) {
            return this.localeData()
        } else {
            return this.locale(gQ)
        }
    });

    function e8() {
        return this._locale
    }

    function cG(gQ) {
        gQ = dO(gQ);
        switch (gQ) {
            case "year":
                this.month(0);
            case "quarter":
            case "month":
                this.date(1);
            case "week":
            case "isoWeek":
            case "day":
            case "date":
                this.hours(0);
            case "hour":
                this.minutes(0);
            case "minute":
                this.seconds(0);
            case "second":
                this.milliseconds(0)
        }
        if (gQ === "week") {
            this.weekday(0)
        }
        if (gQ === "isoWeek") {
            this.isoWeekday(1)
        }
        if (gQ === "quarter") {
            this.month(Math.floor(this.month() / 3) * 3)
        }
        return this
    }

    function f2(gQ) {
        gQ = dO(gQ);
        if (gQ === undefined || gQ === "millisecond") {
            return this
        }
        if (gQ === "date") {
            gQ = "day"
        }
        return this.startOf(gQ).add(1, (gQ === "isoWeek" ? "week" : gQ)).subtract(1, "ms")
    }

    function fb() {
        return this._d.valueOf() - ((this._offset || 0) * 60000)
    }

    function bX() {
        return Math.floor(this.valueOf() / 1000)
    }

    function d0() {
        return new Date(this.valueOf())
    }

    function eX() {
        var gQ = this;
        return [gQ.year(), gQ.month(), gQ.date(), gQ.hour(), gQ.minute(), gQ.second(), gQ.millisecond()]
    }

    function e9() {
        var gQ = this;
        return {
            years: gQ.year(),
            months: gQ.month(),
            date: gQ.date(),
            hours: gQ.hours(),
            minutes: gQ.minutes(),
            seconds: gQ.seconds(),
            milliseconds: gQ.milliseconds()
        }
    }

    function d9() {
        return this.isValid() ? this.toISOString() : null
    }

    function x() {
        return aG(this)
    }

    function eQ() {
        return gA({}, bw(this))
    }

    function dr() {
        return bw(this).overflow
    }

    function gq() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        }
    }
    dn(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100
    });
    dn(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100
    });

    function ae(gR, gQ) {
        dn(0, [gR, gR.length], 0, gQ)
    }
    ae("gggg", "weekYear");
    ae("ggggg", "weekYear");
    ae("GGGG", "isoWeekYear");
    ae("GGGGG", "isoWeekYear");
    cQ("weekYear", "gg");
    cQ("isoWeekYear", "GG");
    fc("weekYear", 1);
    fc("isoWeekYear", 1);
    by("G", H);
    by("g", H);
    by("GG", aJ, a3);
    by("gg", aJ, a3);
    by("GGGG", aH, a1);
    by("gggg", aH, a1);
    by("GGGGG", aF, a0);
    by("ggggg", aF, a0);
    af(["gggg", "ggggg", "GGGG", "GGGGG"], function(gQ, gT, gR, gS) {
        gT[gS.substr(0, 2)] = dP(gQ)
    });
    af(["gg", "GG"], function(gQ, gT, gR, gS) {
        gT[gS] = ga.parseTwoDigitYear(gQ)
    });

    function bO(gQ) {
        return de.call(this, gQ, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
    }

    function ff(gQ) {
        return de.call(this, gQ, this.isoWeek(), this.isoWeekday(), 1, 4)
    }

    function ee() {
        return K(this.year(), 1, 4)
    }

    function O() {
        var gQ = this.localeData()._week;
        return K(this.year(), gQ.dow, gQ.doy)
    }

    function de(gQ, gR, gT, gV, gU) {
        var gS;
        if (gQ == null) {
            return fW(this, gV, gU).year
        } else {
            gS = K(gQ, gV, gU);
            if (gR > gS) {
                gR = gS
            }
            return bs.call(this, gQ, gR, gT, gV, gU)
        }
    }

    function bs(gS, gR, gU, gW, gV) {
        var gT = bY(gS, gR, gU, gW, gV),
            gQ = eG(gT.year, 0, gT.dayOfYear);
        this.year(gQ.getUTCFullYear());
        this.month(gQ.getUTCMonth());
        this.date(gQ.getUTCDate());
        return this
    }
    dn("Q", 0, "Qo", "quarter");
    cQ("quarter", "Q");
    fc("quarter", 7);
    by("Q", a4);
    ci("Q", function(gQ, gR) {
        gR[m] = (dP(gQ) - 1) * 3
    });

    function cp(gQ) {
        return gQ == null ? Math.ceil((this.month() + 1) / 3) : this.month((gQ - 1) * 3 + this.month() % 3)
    }
    dn("D", ["DD", 2], "Do", "date");
    cQ("date", "D");
    fc("date", 9);
    by("D", aJ);
    by("DD", aJ, a3);
    by("Do", function(gR, gQ) {
        return gR ? gQ._ordinalParse : gQ._ordinalParseLenient
    });
    ci(["D", "DD"], fY);
    ci("Do", function(gQ, gR) {
        gR[fY] = dP(gQ.match(aJ)[0], 10)
    });
    var c9 = fv("Date", true);
    dn("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    cQ("dayOfYear", "DDD");
    fc("dayOfYear", 4);
    by("DDD", aI);
    by("DDDD", a2);
    ci(["DDD", "DDDD"], function(gQ, gS, gR) {
        gR._dayOfYear = dP(gQ)
    });

    function bA(gQ) {
        var gR = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 86400000) + 1;
        return gQ == null ? gR : this.add((gQ - gR), "d")
    }
    dn("m", ["mm", 2], 0, "minute");
    cQ("minute", "m");
    fc("minute", 14);
    by("m", aJ);
    by("mm", aJ, a3);
    ci(["m", "mm"], eU);
    var gn = fv("Minutes", false);
    dn("s", ["ss", 2], 0, "second");
    cQ("second", "s");
    fc("second", 15);
    by("s", aJ);
    by("ss", aJ, a3);
    ci(["s", "ss"], aB);
    var bU = fv("Seconds", false);
    dn("S", 0, 0, function() {
        return ~~(this.millisecond() / 100)
    });
    dn(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10)
    });
    dn(0, ["SSS", 3], 0, "millisecond");
    dn(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10
    });
    dn(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100
    });
    dn(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1000
    });
    dn(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 10000
    });
    dn(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 100000
    });
    dn(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1000000
    });
    cQ("millisecond", "ms");
    fc("millisecond", 16);
    by("S", aI, a4);
    by("SS", aI, a3);
    by("SSS", aI, a2);
    var bH;
    for (bH = "SSSS"; bH.length <= 9; bH += "S") {
        by(bH, w)
    }

    function d6(gQ, gR) {
        gR[b8] = dP(("0." + gQ) * 1000)
    }
    for (bH = "S"; bH.length <= 9; bH += "S") {
        ci(bH, d6)
    }
    var cn = fv("Milliseconds", false);
    dn("z", 0, 0, "zoneAbbr");
    dn("zz", 0, 0, "zoneName");

    function gi() {
        return this._isUTC ? "UTC" : ""
    }

    function fA() {
        return this._isUTC ? "Coordinated Universal Time" : ""
    }
    var cL = fV.prototype;
    cL.add = bi;
    cL.calendar = cS;
    cL.clone = eD;
    cL.diff = Q;
    cL.endOf = f2;
    cL.format = d8;
    cL.from = e7;
    cL.fromNow = e0;
    cL.to = az;
    cL.toNow = a9;
    cL.get = aT;
    cL.invalidAt = dr;
    cL.isAfter = dx;
    cL.isBefore = go;
    cL.isBetween = fU;
    cL.isSame = dE;
    cL.isSameOrAfter = gh;
    cL.isSameOrBefore = gl;
    cL.isValid = x;
    cL.lang = E;
    cL.locale = gP;
    cL.localeData = e8;
    cL.max = fS;
    cL.min = dG;
    cL.parsingFlags = eQ;
    cL.set = aK;
    cL.startOf = cG;
    cL.subtract = aO;
    cL.toArray = eX;
    cL.toObject = e9;
    cL.toDate = d0;
    cL.toISOString = d4;
    cL.inspect = ba;
    cL.toJSON = d9;
    cL.toString = fi;
    cL.unix = bX;
    cL.valueOf = fb;
    cL.creationData = gq;
    cL.year = dC;
    cL.isLeapYear = dV;
    cL.weekYear = bO;
    cL.isoWeekYear = ff;
    cL.quarter = cL.quarters = cp;
    cL.month = ge;
    cL.daysInMonth = cb;
    cL.week = cL.weeks = P;
    cL.isoWeek = cL.isoWeeks = D;
    cL.weeksInYear = O;
    cL.isoWeeksInYear = ee;
    cL.date = c9;
    cL.day = cL.days = fN;
    cL.weekday = ao;
    cL.isoWeekday = dh;
    cL.dayOfYear = bA;
    cL.hour = cL.hours = db;
    cL.minute = cL.minutes = gn;
    cL.second = cL.seconds = bU;
    cL.millisecond = cL.milliseconds = cn;
    cL.utcOffset = eH;
    cL.utc = bk;
    cL.local = eE;
    cL.parseZone = cH;
    cL.hasAlignedHourOffset = aU;
    cL.isDST = a6;
    cL.isLocal = eI;
    cL.isUtcOffset = cg;
    cL.isUtc = eO;
    cL.isUTC = eO;
    cL.zoneAbbr = gi;
    cL.zoneName = fA;
    cL.dates = fy("dates accessor is deprecated. Use date instead.", c9);
    cL.months = fy("months accessor is deprecated. Use month instead", ge);
    cL.years = fy("years accessor is deprecated. Use year instead", dC);
    cL.zone = fy("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", eC);
    cL.isDSTShifted = fy("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", b);

    function eh(gQ) {
        return eN(gQ * 1000)
    }

    function dM() {
        return eN.apply(null, arguments).parseZone()
    }

    function eJ(gQ) {
        return gQ
    }
    var fl = du.prototype;
    fl.calendar = d;
    fl.longDateFormat = dH;
    fl.invalidDate = fT;
    fl.ordinal = f7;
    fl.preparse = eJ;
    fl.postformat = eJ;
    fl.relativeTime = aa;
    fl.pastFuture = fe;
    fl.set = ez;
    fl.months = bl;
    fl.monthsShort = bv;
    fl.monthsParse = ef;
    fl.monthsRegex = dY;
    fl.monthsShortRegex = ew;
    fl.week = bM;
    fl.firstDayOfYear = ec;
    fl.firstDayOfWeek = ay;
    fl.weekdays = aN;
    fl.weekdaysMin = gb;
    fl.weekdaysShort = S;
    fl.weekdaysParse = ca;
    fl.weekdaysRegex = gv;
    fl.weekdaysShortRegex = aZ;
    fl.weekdaysMinRegex = J;
    fl.isPM = cM;
    fl.meridiem = bd;

    function N(gU, gR, gT, gV) {
        var gQ = W();
        var gS = dj().set(gV, gR);
        return gQ[gT](gS, gU)
    }

    function bh(gU, gR, gT) {
        if (v(gU)) {
            gR = gU;
            gU = undefined
        }
        gU = gU || "";
        if (gR != null) {
            return N(gU, gR, gT, "month")
        }
        var gS;
        var gQ = [];
        for (gS = 0; gS < 12; gS++) {
            gQ[gS] = N(gU, gS, gT, "month")
        }
        return gQ
    }

    function gw(gV, gX, gT, gW) {
        if (typeof gV === "boolean") {
            if (v(gX)) {
                gT = gX;
                gX = undefined
            }
            gX = gX || ""
        } else {
            gX = gV;
            gT = gX;
            gV = false;
            if (v(gX)) {
                gT = gX;
                gX = undefined
            }
            gX = gX || ""
        }
        var gQ = W(),
            gR = gV ? gQ._week.dow : 0;
        if (gT != null) {
            return N(gX, (gT + gR) % 7, gW, "day")
        }
        var gU;
        var gS = [];
        for (gU = 0; gU < 7; gU++) {
            gS[gU] = N(gX, (gU + gR) % 7, gW, "day")
        }
        return gS
    }

    function dT(gR, gQ) {
        return bh(gR, gQ, "months")
    }

    function dt(gR, gQ) {
        return bh(gR, gQ, "monthsShort")
    }

    function d7(gR, gS, gQ) {
        return gw(gR, gS, gQ, "weekdays")
    }

    function dL(gR, gS, gQ) {
        return gw(gR, gS, gQ, "weekdaysShort")
    }

    function ag(gR, gS, gQ) {
        return gw(gR, gS, gQ, "weekdaysMin")
    }
    G("en", {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (dP(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        }
    });
    ga.lang = fy("moment.lang is deprecated. Use moment.locale instead.", G);
    ga.langData = fy("moment.langData is deprecated. Use moment.localeData instead.", W);
    var f4 = Math.abs;

    function bJ() {
        var gQ = this._data;
        this._milliseconds = f4(this._milliseconds);
        this._days = f4(this._days);
        this._months = f4(this._months);
        gQ.milliseconds = f4(gQ.milliseconds);
        gQ.seconds = f4(gQ.seconds);
        gQ.minutes = f4(gQ.minutes);
        gQ.hours = f4(gQ.hours);
        gQ.months = f4(gQ.months);
        gQ.years = f4(gQ.years);
        return this
    }

    function aY(gU, gR, gS, gT) {
        var gQ = er(gR, gS);
        gU._milliseconds += gT * gQ._milliseconds;
        gU._days += gT * gQ._days;
        gU._months += gT * gQ._months;
        return gU._bubble()
    }

    function bZ(gQ, gR) {
        return aY(this, gQ, gR, 1)
    }

    function e5(gQ, gR) {
        return aY(this, gQ, gR, -1)
    }

    function gc(gQ) {
        if (gQ < 0) {
            return Math.floor(gQ)
        } else {
            return Math.ceil(gQ)
        }
    }

    function dU() {
        var gS = this._milliseconds;
        var gY = this._days;
        var gQ = this._months;
        var gU = this._data;
        var gX, gT, gW, gV, gR;
        if (!((gS >= 0 && gY >= 0 && gQ >= 0) || (gS <= 0 && gY <= 0 && gQ <= 0))) {
            gS += gc(gF(gQ) + gY) * 86400000;
            gY = 0;
            gQ = 0
        }
        gU.milliseconds = gS % 1000;
        gX = eu(gS / 1000);
        gU.seconds = gX % 60;
        gT = eu(gX / 60);
        gU.minutes = gT % 60;
        gW = eu(gT / 60);
        gU.hours = gW % 24;
        gY += eu(gW / 24);
        gR = eu(h(gY));
        gQ += gR;
        gY -= gc(gF(gR));
        gV = eu(gQ / 12);
        gQ %= 12;
        gU.days = gY;
        gU.months = gQ;
        gU.years = gV;
        return this
    }

    function h(gQ) {
        return gQ * 4800 / 146097
    }

    function gF(gQ) {
        return gQ * 146097 / 4800
    }

    function gg(gR) {
        var gT;
        var gQ;
        var gS = this._milliseconds;
        gR = dO(gR);
        if (gR === "month" || gR === "year") {
            gT = this._days + gS / 86400000;
            gQ = this._months + h(gT);
            return gR === "month" ? gQ : gQ / 12
        } else {
            gT = this._days + Math.round(gF(this._months));
            switch (gR) {
                case "week":
                    return gT / 7 + gS / 604800000;
                case "day":
                    return gT + gS / 86400000;
                case "hour":
                    return gT * 24 + gS / 3600000;
                case "minute":
                    return gT * 1440 + gS / 60000;
                case "second":
                    return gT * 86400 + gS / 1000;
                case "millisecond":
                    return Math.floor(gT * 86400000) + gS;
                default:
                    throw new Error("Unknown unit " + gR)
            }
        }
    }

    function d3() {
        return (this._milliseconds + this._days * 86400000 + (this._months % 12) * 2592000000 + dP(this._months / 12) * 31536000000)
    }

    function fn(gQ) {
        return function() {
            return this.as(gQ)
        }
    }
    var gH = fn("ms");
    var R = fn("s");
    var eF = fn("m");
    var y = fn("h");
    var fu = fn("d");
    var e6 = fn("w");
    var fm = fn("M");
    var bG = fn("y");

    function M(gQ) {
        gQ = dO(gQ);
        return this[gQ + "s"]()
    }

    function cI(gQ) {
        return function() {
            return this._data[gQ]
        }
    }
    var c = cI("milliseconds");
    var bB = cI("seconds");
    var aX = cI("minutes");
    var ab = cI("hours");
    var bz = cI("days");
    var gk = cI("months");
    var b9 = cI("years");

    function fw() {
        return eu(this.days() / 7)
    }
    var dZ = Math.round;
    var eT = {
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };

    function aC(gR, gT, gS, gU, gQ) {
        return gQ.relativeTime(gT || 1, !!gS, gR, gU)
    }

    function eW(gU, gR, gY) {
        var gS = er(gU).abs();
        var gZ = dZ(gS.as("s"));
        var gT = dZ(gS.as("m"));
        var gX = dZ(gS.as("h"));
        var g0 = dZ(gS.as("d"));
        var gQ = dZ(gS.as("M"));
        var gV = dZ(gS.as("y"));
        var gW = gZ < eT.s && ["s", gZ] || gT <= 1 && ["m"] || gT < eT.m && ["mm", gT] || gX <= 1 && ["h"] || gX < eT.h && ["hh", gX] || g0 <= 1 && ["d"] || g0 < eT.d && ["dd", g0] || gQ <= 1 && ["M"] || gQ < eT.M && ["MM", gQ] || gV <= 1 && ["y"] || ["yy", gV];
        gW[2] = gR;
        gW[3] = +gU > 0;
        gW[4] = gY;
        return aC.apply(null, gW)
    }

    function fZ(gQ) {
        if (gQ === undefined) {
            return dZ
        }
        if (typeof(gQ) === "function") {
            dZ = gQ;
            return true
        }
        return false
    }

    function c8(gQ, gR) {
        if (eT[gQ] === undefined) {
            return false
        }
        if (gR === undefined) {
            return eT[gQ]
        }
        eT[gQ] = gR;
        return true
    }

    function a(gS) {
        var gQ = this.localeData();
        var gR = eW(this, !gS, gQ);
        if (gS) {
            gR = gQ.pastFuture(+this, gR)
        }
        return gQ.postformat(gR)
    }
    var be = Math.abs;

    function b7() {
        var g0 = be(this._milliseconds) / 1000;
        var g1 = be(this._days);
        var gS = be(this._months);
        var gU, gZ, gW;
        gU = eu(g0 / 60);
        gZ = eu(gU / 60);
        g0 %= 60;
        gU %= 60;
        gW = eu(gS / 12);
        gS %= 12;
        var gR = gW;
        var gX = gS;
        var gQ = g1;
        var gV = gZ;
        var gT = gU;
        var g2 = g0;
        var gY = this.asSeconds();
        if (!gY) {
            return "P0D"
        }
        return (gY < 0 ? "-" : "") + "P" + (gR ? gR + "Y" : "") + (gX ? gX + "M" : "") + (gQ ? gQ + "D" : "") + ((gV || gT || g2) ? "T" : "") + (gV ? gV + "H" : "") + (gT ? gT + "M" : "") + (g2 ? g2 + "S" : "")
    }
    var fk = e4.prototype;
    fk.abs = bJ;
    fk.add = bZ;
    fk.subtract = e5;
    fk.as = gg;
    fk.asMilliseconds = gH;
    fk.asSeconds = R;
    fk.asMinutes = eF;
    fk.asHours = y;
    fk.asDays = fu;
    fk.asWeeks = e6;
    fk.asMonths = fm;
    fk.asYears = bG;
    fk.valueOf = d3;
    fk._bubble = dU;
    fk.get = M;
    fk.milliseconds = c;
    fk.seconds = bB;
    fk.minutes = aX;
    fk.hours = ab;
    fk.days = bz;
    fk.weeks = fw;
    fk.months = gk;
    fk.years = b9;
    fk.humanize = a;
    fk.toISOString = b7;
    fk.toString = b7;
    fk.toJSON = b7;
    fk.locale = gP;
    fk.localeData = e8;
    fk.toIsoString = fy("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", b7);
    fk.lang = E;
    dn("X", 0, 0, "unix");
    dn("x", 0, 0, "valueOf");
    by("x", H);
    by("X", gs);
    ci("X", function(gQ, gS, gR) {
        gR._d = new Date(parseFloat(gQ, 10) * 1000)
    });
    ci("x", function(gQ, gS, gR) {
        gR._d = new Date(dP(gQ))
    });
    ga.version = "2.17.1";
    bb(eN);
    ga.fn = cL;
    ga.min = t;
    ga.max = bI;
    ga.now = dq;
    ga.utc = dj;
    ga.unix = eh;
    ga.months = dT;
    ga.isDate = f0;
    ga.locale = G;
    ga.invalid = T;
    ga.duration = er;
    ga.isMoment = cK;
    ga.weekdays = d7;
    ga.parseZone = dM;
    ga.localeData = W;
    ga.isDuration = at;
    ga.monthsShort = dt;
    ga.weekdaysMin = ag;
    ga.defineLocale = ds;
    ga.updateLocale = fO;
    ga.locales = cC;
    ga.weekdaysShort = dL;
    ga.normalizeUnits = dO;
    ga.relativeTimeRounding = fZ;
    ga.relativeTimeThreshold = c8;
    ga.calendarFormat = aL;
    ga.prototype = cL;
    ga.defineLocale("af", {
        months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
        monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
        weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
        weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
        meridiemParse: /vm|nm/i,
        isPM: function(gQ) {
            return /^nm$/i.test(gQ)
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 12) {
                return gS ? "vm" : "VM"
            } else {
                return gS ? "nm" : "NM"
            }
        },
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Vandag om] LT",
            nextDay: "[Môre om] LT",
            nextWeek: "dddd [om] LT",
            lastDay: "[Gister om] LT",
            lastWeek: "[Laas] dddd [om] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "oor %s",
            past: "%s gelede",
            s: "'n paar sekondes",
            m: "'n minuut",
            mm: "%d minute",
            h: "'n uur",
            hh: "%d ure",
            d: "'n dag",
            dd: "%d dae",
            M: "'n maand",
            MM: "%d maande",
            y: "'n jaar",
            yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(gQ) {
            return gQ + ((gQ === 1 || gQ === 8 || gQ >= 20) ? "ste" : "de")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("ar-dz", {
        months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: "[غدا على الساعة] LT",
            nextWeek: "dddd [على الساعة] LT",
            lastDay: "[أمس على الساعة] LT",
            lastWeek: "dddd [على الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "في %s",
            past: "منذ %s",
            s: "ثوان",
            m: "دقيقة",
            mm: "%d دقائق",
            h: "ساعة",
            hh: "%d ساعات",
            d: "يوم",
            dd: "%d أيام",
            M: "شهر",
            MM: "%d أشهر",
            y: "سنة",
            yy: "%d سنوات"
        },
        week: {
            dow: 0,
            doy: 4
        }
    });
    var df = {
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
        "6": "6",
        "7": "7",
        "8": "8",
        "9": "9",
        "0": "0"
    };
    var aS = function(gQ) {
        return gQ === 0 ? 0 : gQ === 1 ? 1 : gQ === 2 ? 2 : gQ % 100 >= 3 && gQ % 100 <= 10 ? 3 : gQ % 100 >= 11 ? 4 : 5
    };
    var cz = {
        s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
        m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
        h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
        d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
        M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
        y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
    };
    var eV = function(gQ) {
        return function(gT, gS, gR, gV) {
            var gU = aS(gT),
                gW = cz[gQ][aS(gT)];
            if (gU === 2) {
                gW = gW[gS ? 0 : 1]
            }
            return gW.replace(/%d/i, gT)
        }
    };
    var ep = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"];
    ga.defineLocale("ar-ly", {
        months: ep,
        monthsShort: ep,
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "D/\u200FM/\u200FYYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(gQ) {
            return "م" === gQ
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "ص"
            } else {
                return "م"
            }
        },
        calendar: {
            sameDay: "[اليوم عند الساعة] LT",
            nextDay: "[غدًا عند الساعة] LT",
            nextWeek: "dddd [عند الساعة] LT",
            lastDay: "[أمس عند الساعة] LT",
            lastWeek: "dddd [عند الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "بعد %s",
            past: "منذ %s",
            s: eV("s"),
            m: eV("m"),
            mm: eV("m"),
            h: eV("h"),
            hh: eV("h"),
            d: eV("d"),
            dd: eV("d"),
            M: eV("M"),
            MM: eV("M"),
            y: eV("y"),
            yy: eV("y")
        },
        preparse: function(gQ) {
            return gQ.replace(/\u200f/g, "").replace(/،/g, ",")
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return df[gR]
            }).replace(/,/g, "،")
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
    ga.defineLocale("ar-ma", {
        months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: "[غدا على الساعة] LT",
            nextWeek: "dddd [على الساعة] LT",
            lastDay: "[أمس على الساعة] LT",
            lastWeek: "dddd [على الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "في %s",
            past: "منذ %s",
            s: "ثوان",
            m: "دقيقة",
            mm: "%d دقائق",
            h: "ساعة",
            hh: "%d ساعات",
            d: "يوم",
            dd: "%d أيام",
            M: "شهر",
            MM: "%d أشهر",
            y: "سنة",
            yy: "%d سنوات"
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
    var cZ = {
        "1": "١",
        "2": "٢",
        "3": "٣",
        "4": "٤",
        "5": "٥",
        "6": "٦",
        "7": "٧",
        "8": "٨",
        "9": "٩",
        "0": "٠"
    };
    var d5 = {
        "١": "1",
        "٢": "2",
        "٣": "3",
        "٤": "4",
        "٥": "5",
        "٦": "6",
        "٧": "7",
        "٨": "8",
        "٩": "9",
        "٠": "0"
    };
    ga.defineLocale("ar-sa", {
        months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(gQ) {
            return "م" === gQ
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "ص"
            } else {
                return "م"
            }
        },
        calendar: {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: "[غدا على الساعة] LT",
            nextWeek: "dddd [على الساعة] LT",
            lastDay: "[أمس على الساعة] LT",
            lastWeek: "dddd [على الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "في %s",
            past: "منذ %s",
            s: "ثوان",
            m: "دقيقة",
            mm: "%d دقائق",
            h: "ساعة",
            hh: "%d ساعات",
            d: "يوم",
            dd: "%d أيام",
            M: "شهر",
            MM: "%d أشهر",
            y: "سنة",
            yy: "%d سنوات"
        },
        preparse: function(gQ) {
            return gQ.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(gR) {
                return d5[gR]
            }).replace(/،/g, ",")
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cZ[gR]
            }).replace(/,/g, "،")
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    ga.defineLocale("ar-tn", {
        months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: "[غدا على الساعة] LT",
            nextWeek: "dddd [على الساعة] LT",
            lastDay: "[أمس على الساعة] LT",
            lastWeek: "dddd [على الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "في %s",
            past: "منذ %s",
            s: "ثوان",
            m: "دقيقة",
            mm: "%d دقائق",
            h: "ساعة",
            hh: "%d ساعات",
            d: "يوم",
            dd: "%d أيام",
            M: "شهر",
            MM: "%d أشهر",
            y: "سنة",
            yy: "%d سنوات"
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var cY = {
        "1": "١",
        "2": "٢",
        "3": "٣",
        "4": "٤",
        "5": "٥",
        "6": "٦",
        "7": "٧",
        "8": "٨",
        "9": "٩",
        "0": "٠"
    };
    var fK = {
        "١": "1",
        "٢": "2",
        "٣": "3",
        "٤": "4",
        "٥": "5",
        "٦": "6",
        "٧": "7",
        "٨": "8",
        "٩": "9",
        "٠": "0"
    };
    var c6 = function(gQ) {
        return gQ === 0 ? 0 : gQ === 1 ? 1 : gQ === 2 ? 2 : gQ % 100 >= 3 && gQ % 100 <= 10 ? 3 : gQ % 100 >= 11 ? 4 : 5
    };
    var e1 = {
        s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
        m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
        h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
        d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
        M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
        y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
    };
    var gp = function(gQ) {
        return function(gT, gS, gR, gV) {
            var gU = c6(gT),
                gW = e1[gQ][c6(gT)];
            if (gU === 2) {
                gW = gW[gS ? 0 : 1]
            }
            return gW.replace(/%d/i, gT)
        }
    };
    var eo = ["كانون الثاني يناير", "شباط فبراير", "آذار مارس", "نيسان أبريل", "أيار مايو", "حزيران يونيو", "تموز يوليو", "آب أغسطس", "أيلول سبتمبر", "تشرين الأول أكتوبر", "تشرين الثاني نوفمبر", "كانون الأول ديسمبر"];
    ga.defineLocale("ar", {
        months: eo,
        monthsShort: eo,
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "D/\u200FM/\u200FYYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(gQ) {
            return "م" === gQ
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "ص"
            } else {
                return "م"
            }
        },
        calendar: {
            sameDay: "[اليوم عند الساعة] LT",
            nextDay: "[غدًا عند الساعة] LT",
            nextWeek: "dddd [عند الساعة] LT",
            lastDay: "[أمس عند الساعة] LT",
            lastWeek: "dddd [عند الساعة] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "بعد %s",
            past: "منذ %s",
            s: gp("s"),
            m: gp("m"),
            mm: gp("m"),
            h: gp("h"),
            hh: gp("h"),
            d: gp("d"),
            dd: gp("d"),
            M: gp("M"),
            MM: gp("M"),
            y: gp("y"),
            yy: gp("y")
        },
        preparse: function(gQ) {
            return gQ.replace(/\u200f/g, "").replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(gR) {
                return fK[gR]
            }).replace(/،/g, ",")
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cY[gR]
            }).replace(/,/g, "،")
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
    var bf = {
        1: "-inci",
        5: "-inci",
        8: "-inci",
        70: "-inci",
        80: "-inci",
        2: "-nci",
        7: "-nci",
        20: "-nci",
        50: "-nci",
        3: "-üncü",
        4: "-üncü",
        100: "-üncü",
        6: "-ncı",
        9: "-uncu",
        10: "-uncu",
        30: "-uncu",
        60: "-ıncı",
        90: "-ıncı"
    };
    ga.defineLocale("az", {
        months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
        monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
        weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
        weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
        weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[bugün saat] LT",
            nextDay: "[sabah saat] LT",
            nextWeek: "[gələn həftə] dddd [saat] LT",
            lastDay: "[dünən] LT",
            lastWeek: "[keçən həftə] dddd [saat] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s sonra",
            past: "%s əvvəl",
            s: "birneçə saniyyə",
            m: "bir dəqiqə",
            mm: "%d dəqiqə",
            h: "bir saat",
            hh: "%d saat",
            d: "bir gün",
            dd: "%d gün",
            M: "bir ay",
            MM: "%d ay",
            y: "bir il",
            yy: "%d il"
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function(gQ) {
            return /^(gündüz|axşam)$/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "gecə"
            } else {
                if (gQ < 12) {
                    return "səhər"
                } else {
                    if (gQ < 17) {
                        return "gündüz"
                    } else {
                        return "axşam"
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function(gS) {
            if (gS === 0) {
                return gS + "-ıncı"
            }
            var gR = gS % 10,
                gQ = gS % 100 - gR,
                gT = gS >= 100 ? 100 : null;
            return gS + (bf[gR] || bf[gQ] || bf[gT])
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    function ed(gS, gR) {
        var gQ = gS.split("_");
        return gR % 10 === 1 && gR % 100 !== 11 ? gQ[0] : (gR % 10 >= 2 && gR % 10 <= 4 && (gR % 100 < 10 || gR % 100 >= 20) ? gQ[1] : gQ[2])
    }

    function ea(gS, gR, gQ) {
        var gT = {
            mm: gR ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін",
            hh: gR ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін",
            dd: "дзень_дні_дзён",
            MM: "месяц_месяцы_месяцаў",
            yy: "год_гады_гадоў"
        };
        if (gQ === "m") {
            return gR ? "хвіліна" : "хвіліну"
        } else {
            if (gQ === "h") {
                return gR ? "гадзіна" : "гадзіну"
            } else {
                return gS + " " + ed(gT[gQ], +gS)
            }
        }
    }
    ga.defineLocale("be", {
        months: {
            format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),
            standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")
        },
        monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),
        weekdays: {
            format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),
            standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),
            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
        weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY г.",
            LLL: "D MMMM YYYY г., HH:mm",
            LLLL: "dddd, D MMMM YYYY г., HH:mm"
        },
        calendar: {
            sameDay: "[Сёння ў] LT",
            nextDay: "[Заўтра ў] LT",
            lastDay: "[Учора ў] LT",
            nextWeek: function() {
                return "[У] dddd [ў] LT"
            },
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return "[У мінулую] dddd [ў] LT";
                    case 1:
                    case 2:
                    case 4:
                        return "[У мінулы] dddd [ў] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "праз %s",
            past: "%s таму",
            s: "некалькі секунд",
            m: ea,
            mm: ea,
            h: ea,
            hh: ea,
            d: "дзень",
            dd: ea,
            M: "месяц",
            MM: ea,
            y: "год",
            yy: ea
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function(gQ) {
            return /^(дня|вечара)$/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "ночы"
            } else {
                if (gQ < 12) {
                    return "раніцы"
                } else {
                    if (gQ < 17) {
                        return "дня"
                    } else {
                        return "вечара"
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "M":
                case "d":
                case "DDD":
                case "w":
                case "W":
                    return (gQ % 10 === 2 || gQ % 10 === 3) && (gQ % 100 !== 12 && gQ % 100 !== 13) ? gQ + "-і" : gQ + "-ы";
                case "D":
                    return gQ + "-га";
                default:
                    return gQ
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("bg", {
        months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "D.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY H:mm",
            LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[Днес в] LT",
            nextDay: "[Утре в] LT",
            nextWeek: "dddd [в] LT",
            lastDay: "[Вчера в] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return "[В изминалата] dddd [в] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[В изминалия] dddd [в] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "след %s",
            past: "преди %s",
            s: "няколко секунди",
            m: "минута",
            mm: "%d минути",
            h: "час",
            hh: "%d часа",
            d: "ден",
            dd: "%d дни",
            M: "месец",
            MM: "%d месеца",
            y: "година",
            yy: "%d години"
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(gS) {
            var gR = gS % 10,
                gQ = gS % 100;
            if (gS === 0) {
                return gS + "-ев"
            } else {
                if (gQ === 0) {
                    return gS + "-ен"
                } else {
                    if (gQ > 10 && gQ < 20) {
                        return gS + "-ти"
                    } else {
                        if (gR === 1) {
                            return gS + "-ви"
                        } else {
                            if (gR === 2) {
                                return gS + "-ри"
                            } else {
                                if (gR === 7 || gR === 8) {
                                    return gS + "-ми"
                                } else {
                                    return gS + "-ти"
                                }
                            }
                        }
                    }
                }
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    var cX = {
        "1": "১",
        "2": "২",
        "3": "৩",
        "4": "৪",
        "5": "৫",
        "6": "৬",
        "7": "৭",
        "8": "৮",
        "9": "৯",
        "0": "০"
    };
    var fJ = {
        "১": "1",
        "২": "2",
        "৩": "3",
        "৪": "4",
        "৫": "5",
        "৬": "6",
        "৭": "7",
        "৮": "8",
        "৯": "9",
        "০": "0"
    };
    ga.defineLocale("bn", {
        months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
        monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
        weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
        weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
        weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),
        longDateFormat: {
            LT: "A h:mm সময়",
            LTS: "A h:mm:ss সময়",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm সময়",
            LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
        },
        calendar: {
            sameDay: "[আজ] LT",
            nextDay: "[আগামীকাল] LT",
            nextWeek: "dddd, LT",
            lastDay: "[গতকাল] LT",
            lastWeek: "[গত] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s পরে",
            past: "%s আগে",
            s: "কয়েক সেকেন্ড",
            m: "এক মিনিট",
            mm: "%d মিনিট",
            h: "এক ঘন্টা",
            hh: "%d ঘন্টা",
            d: "এক দিন",
            dd: "%d দিন",
            M: "এক মাস",
            MM: "%d মাস",
            y: "এক বছর",
            yy: "%d বছর"
        },
        preparse: function(gQ) {
            return gQ.replace(/[১২৩৪৫৬৭৮৯০]/g, function(gR) {
                return fJ[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cX[gR]
            })
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if ((gR === "রাত" && gQ >= 4) || (gR === "দুপুর" && gQ < 5) || gR === "বিকাল") {
                return gQ + 12
            } else {
                return gQ
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "রাত"
            } else {
                if (gQ < 10) {
                    return "সকাল"
                } else {
                    if (gQ < 17) {
                        return "দুপুর"
                    } else {
                        if (gQ < 20) {
                            return "বিকাল"
                        } else {
                            return "রাত"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    var cV = {
        "1": "༡",
        "2": "༢",
        "3": "༣",
        "4": "༤",
        "5": "༥",
        "6": "༦",
        "7": "༧",
        "8": "༨",
        "9": "༩",
        "0": "༠"
    };
    var fI = {
        "༡": "1",
        "༢": "2",
        "༣": "3",
        "༤": "4",
        "༥": "5",
        "༦": "6",
        "༧": "7",
        "༨": "8",
        "༩": "9",
        "༠": "0"
    };
    ga.defineLocale("bo", {
        months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
        monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
        weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),
        weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
        weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
        longDateFormat: {
            LT: "A h:mm",
            LTS: "A h:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm",
            LLLL: "dddd, D MMMM YYYY, A h:mm"
        },
        calendar: {
            sameDay: "[དི་རིང] LT",
            nextDay: "[སང་ཉིན] LT",
            nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
            lastDay: "[ཁ་སང] LT",
            lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s ལ་",
            past: "%s སྔན་ལ",
            s: "ལམ་སང",
            m: "སྐར་མ་གཅིག",
            mm: "%d སྐར་མ",
            h: "ཆུ་ཚོད་གཅིག",
            hh: "%d ཆུ་ཚོད",
            d: "ཉིན་གཅིག",
            dd: "%d ཉིན་",
            M: "ཟླ་བ་གཅིག",
            MM: "%d ཟླ་བ",
            y: "ལོ་གཅིག",
            yy: "%d ལོ"
        },
        preparse: function(gQ) {
            return gQ.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(gR) {
                return fI[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cV[gR]
            })
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if ((gR === "མཚན་མོ" && gQ >= 4) || (gR === "ཉིན་གུང" && gQ < 5) || gR === "དགོང་དག") {
                return gQ + 12
            } else {
                return gQ
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "མཚན་མོ"
            } else {
                if (gQ < 10) {
                    return "ཞོགས་ཀས"
                } else {
                    if (gQ < 17) {
                        return "ཉིན་གུང"
                    } else {
                        if (gQ < 20) {
                            return "དགོང་དག"
                        } else {
                            return "མཚན་མོ"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });

    function f(gS, gR, gQ) {
        var gT = {
            mm: "munutenn",
            MM: "miz",
            dd: "devezh"
        };
        return gS + " " + f5(gT[gQ], gS)
    }

    function aA(gQ) {
        switch (dI(gQ)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return gQ + " bloaz";
            default:
                return gQ + " vloaz"
        }
    }

    function dI(gQ) {
        if (gQ > 9) {
            return dI(gQ % 10)
        }
        return gQ
    }

    function f5(gR, gQ) {
        if (gQ === 2) {
            return fM(gR)
        }
        return gR
    }

    function fM(gR) {
        var gQ = {
            m: "v",
            b: "v",
            d: "z"
        };
        if (gQ[gR.charAt(0)] === undefined) {
            return gR
        }
        return gQ[gR.charAt(0)] + gR.substring(1)
    }
    ga.defineLocale("br", {
        months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "h[e]mm A",
            LTS: "h[e]mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D [a viz] MMMM YYYY",
            LLL: "D [a viz] MMMM YYYY h[e]mm A",
            LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A"
        },
        calendar: {
            sameDay: "[Hiziv da] LT",
            nextDay: "[Warc'hoazh da] LT",
            nextWeek: "dddd [da] LT",
            lastDay: "[Dec'h da] LT",
            lastWeek: "dddd [paset da] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "a-benn %s",
            past: "%s 'zo",
            s: "un nebeud segondennoù",
            m: "ur vunutenn",
            mm: f,
            h: "un eur",
            hh: "%d eur",
            d: "un devezh",
            dd: f,
            M: "ur miz",
            MM: f,
            y: "ur bloaz",
            yy: aA
        },
        ordinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function(gR) {
            var gQ = (gR === 1) ? "añ" : "vet";
            return gR + gQ
        },
        week: {
            dow: 1,
            doy: 4
        }
    });

    function dK(gT, gS, gR) {
        var gQ = gT + " ";
        switch (gR) {
            case "m":
                return gS ? "jedna minuta" : "jedne minute";
            case "mm":
                if (gT === 1) {
                    gQ += "minuta"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "minute"
                    } else {
                        gQ += "minuta"
                    }
                }
                return gQ;
            case "h":
                return gS ? "jedan sat" : "jednog sata";
            case "hh":
                if (gT === 1) {
                    gQ += "sat"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "sata"
                    } else {
                        gQ += "sati"
                    }
                }
                return gQ;
            case "dd":
                if (gT === 1) {
                    gQ += "dan"
                } else {
                    gQ += "dana"
                }
                return gQ;
            case "MM":
                if (gT === 1) {
                    gQ += "mjesec"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "mjeseca"
                    } else {
                        gQ += "mjeseci"
                    }
                }
                return gQ;
            case "yy":
                if (gT === 1) {
                    gQ += "godina"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "godine"
                    } else {
                        gQ += "godina"
                    }
                }
                return gQ
        }
    }
    ga.defineLocale("bs", {
        months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[danas u] LT",
            nextDay: "[sutra u] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[u] [nedjelju] [u] LT";
                    case 3:
                        return "[u] [srijedu] [u] LT";
                    case 6:
                        return "[u] [subotu] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[u] dddd [u] LT"
                }
            },
            lastDay: "[jučer u] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return "[prošlu] dddd [u] LT";
                    case 6:
                        return "[prošle] [subote] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[prošli] dddd [u] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "prije %s",
            s: "par sekundi",
            m: dK,
            mm: dK,
            h: dK,
            hh: dK,
            d: "dan",
            dd: dK,
            M: "mjesec",
            MM: dK,
            y: "godinu",
            yy: dK
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("ca", {
        months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
        monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
        monthsParseExact: true,
        weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
        weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
        weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY H:mm",
            LLLL: "dddd D MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: function() {
                return "[avui a " + ((this.hours() !== 1) ? "les" : "la") + "] LT"
            },
            nextDay: function() {
                return "[demà a " + ((this.hours() !== 1) ? "les" : "la") + "] LT"
            },
            nextWeek: function() {
                return "dddd [a " + ((this.hours() !== 1) ? "les" : "la") + "] LT"
            },
            lastDay: function() {
                return "[ahir a " + ((this.hours() !== 1) ? "les" : "la") + "] LT"
            },
            lastWeek: function() {
                return "[el] dddd [passat a " + ((this.hours() !== 1) ? "les" : "la") + "] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "d'aquí %s",
            past: "fa %s",
            s: "uns segons",
            m: "un minut",
            mm: "%d minuts",
            h: "una hora",
            hh: "%d hores",
            d: "un dia",
            dd: "%d dies",
            M: "un mes",
            MM: "%d mesos",
            y: "un any",
            yy: "%d anys"
        },
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function(gR, gS) {
            var gQ = (gR === 1) ? "r" : (gR === 2) ? "n" : (gR === 3) ? "r" : (gR === 4) ? "t" : "è";
            if (gS === "w" || gS === "W") {
                gQ = "a"
            }
            return gR + gQ
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var en = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_");
    var cF = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");

    function cy(gQ) {
        return (gQ > 1) && (gQ < 5) && (~~(gQ / 10) !== 1)
    }

    function gN(gT, gS, gR, gU) {
        var gQ = gT + " ";
        switch (gR) {
            case "s":
                return (gS || gU) ? "pár sekund" : "pár sekundami";
            case "m":
                return gS ? "minuta" : (gU ? "minutu" : "minutou");
            case "mm":
                if (gS || gU) {
                    return gQ + (cy(gT) ? "minuty" : "minut")
                } else {
                    return gQ + "minutami"
                }
                break;
            case "h":
                return gS ? "hodina" : (gU ? "hodinu" : "hodinou");
            case "hh":
                if (gS || gU) {
                    return gQ + (cy(gT) ? "hodiny" : "hodin")
                } else {
                    return gQ + "hodinami"
                }
                break;
            case "d":
                return (gS || gU) ? "den" : "dnem";
            case "dd":
                if (gS || gU) {
                    return gQ + (cy(gT) ? "dny" : "dní")
                } else {
                    return gQ + "dny"
                }
                break;
            case "M":
                return (gS || gU) ? "měsíc" : "měsícem";
            case "MM":
                if (gS || gU) {
                    return gQ + (cy(gT) ? "měsíce" : "měsíců")
                } else {
                    return gQ + "měsíci"
                }
                break;
            case "y":
                return (gS || gU) ? "rok" : "rokem";
            case "yy":
                if (gS || gU) {
                    return gQ + (cy(gT) ? "roky" : "let")
                } else {
                    return gQ + "lety"
                }
                break
        }
    }
    ga.defineLocale("cs", {
        months: en,
        monthsShort: cF,
        monthsParse: (function(gQ, gS) {
            var gR, gT = [];
            for (gR = 0; gR < 12; gR++) {
                gT[gR] = new RegExp("^" + gQ[gR] + "$|^" + gS[gR] + "$", "i")
            }
            return gT
        }(en, cF)),
        shortMonthsParse: (function(gR) {
            var gQ, gS = [];
            for (gQ = 0; gQ < 12; gQ++) {
                gS[gQ] = new RegExp("^" + gR[gQ] + "$", "i")
            }
            return gS
        }(cF)),
        longMonthsParse: (function(gQ) {
            var gR, gS = [];
            for (gR = 0; gR < 12; gR++) {
                gS[gR] = new RegExp("^" + gQ[gR] + "$", "i")
            }
            return gS
        }(en)),
        weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd D. MMMM YYYY H:mm",
            l: "D. M. YYYY"
        },
        calendar: {
            sameDay: "[dnes v] LT",
            nextDay: "[zítra v] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[v neděli v] LT";
                    case 1:
                    case 2:
                        return "[v] dddd [v] LT";
                    case 3:
                        return "[ve středu v] LT";
                    case 4:
                        return "[ve čtvrtek v] LT";
                    case 5:
                        return "[v pátek v] LT";
                    case 6:
                        return "[v sobotu v] LT"
                }
            },
            lastDay: "[včera v] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[minulou neděli v] LT";
                    case 1:
                    case 2:
                        return "[minulé] dddd [v] LT";
                    case 3:
                        return "[minulou středu v] LT";
                    case 4:
                    case 5:
                        return "[minulý] dddd [v] LT";
                    case 6:
                        return "[minulou sobotu v] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "před %s",
            s: gN,
            m: gN,
            mm: gN,
            h: gN,
            hh: gN,
            d: gN,
            dd: gN,
            M: gN,
            MM: gN,
            y: gN,
            yy: gN
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("cv", {
        months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),
        monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),
        weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),
        weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
        weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD-MM-YYYY",
            LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
            LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
            LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"
        },
        calendar: {
            sameDay: "[Паян] LT [сехетре]",
            nextDay: "[Ыран] LT [сехетре]",
            lastDay: "[Ӗнер] LT [сехетре]",
            nextWeek: "[Ҫитес] dddd LT [сехетре]",
            lastWeek: "[Иртнӗ] dddd LT [сехетре]",
            sameElse: "L"
        },
        relativeTime: {
            future: function(gR) {
                var gQ = /сехет$/i.exec(gR) ? "рен" : /ҫул$/i.exec(gR) ? "тан" : "ран";
                return gR + gQ
            },
            past: "%s каялла",
            s: "пӗр-ик ҫеккунт",
            m: "пӗр минут",
            mm: "%d минут",
            h: "пӗр сехет",
            hh: "%d сехет",
            d: "пӗр кун",
            dd: "%d кун",
            M: "пӗр уйӑх",
            MM: "%d уйӑх",
            y: "пӗр ҫул",
            yy: "%d ҫул"
        },
        ordinalParse: /\d{1,2}-мӗш/,
        ordinal: "%d-мӗш",
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Heddiw am] LT",
            nextDay: "[Yfory am] LT",
            nextWeek: "dddd [am] LT",
            lastDay: "[Ddoe am] LT",
            lastWeek: "dddd [diwethaf am] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "mewn %s",
            past: "%s yn ôl",
            s: "ychydig eiliadau",
            m: "munud",
            mm: "%d munud",
            h: "awr",
            hh: "%d awr",
            d: "diwrnod",
            dd: "%d diwrnod",
            M: "mis",
            MM: "%d mis",
            y: "blwyddyn",
            yy: "%d flynedd"
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        ordinal: function(gS) {
            var gQ = gS,
                gR = "",
                gT = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"];
            if (gQ > 20) {
                if (gQ === 40 || gQ === 50 || gQ === 60 || gQ === 80 || gQ === 100) {
                    gR = "fed"
                } else {
                    gR = "ain"
                }
            } else {
                if (gQ > 0) {
                    gR = gT[gQ]
                }
            }
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("da", {
        months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY HH:mm",
            LLLL: "dddd [d.] D. MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[I dag kl.] LT",
            nextDay: "[I morgen kl.] LT",
            nextWeek: "dddd [kl.] LT",
            lastDay: "[I går kl.] LT",
            lastWeek: "[sidste] dddd [kl] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "om %s",
            past: "%s siden",
            s: "få sekunder",
            m: "et minut",
            mm: "%d minutter",
            h: "en time",
            hh: "%d timer",
            d: "en dag",
            dd: "%d dage",
            M: "en måned",
            MM: "%d måneder",
            y: "et år",
            yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function ad(gS, gR, gQ, gU) {
        var gT = {
            m: ["eine Minute", "einer Minute"],
            h: ["eine Stunde", "einer Stunde"],
            d: ["ein Tag", "einem Tag"],
            dd: [gS + " Tage", gS + " Tagen"],
            M: ["ein Monat", "einem Monat"],
            MM: [gS + " Monate", gS + " Monaten"],
            y: ["ein Jahr", "einem Jahr"],
            yy: [gS + " Jahre", gS + " Jahren"]
        };
        return gR ? gT[gQ][0] : gT[gQ][1]
    }
    ga.defineLocale("de-at", {
        months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: true,
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY HH:mm",
            LLLL: "dddd, D. MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[heute um] LT [Uhr]",
            sameElse: "L",
            nextDay: "[morgen um] LT [Uhr]",
            nextWeek: "dddd [um] LT [Uhr]",
            lastDay: "[gestern um] LT [Uhr]",
            lastWeek: "[letzten] dddd [um] LT [Uhr]"
        },
        relativeTime: {
            future: "in %s",
            past: "vor %s",
            s: "ein paar Sekunden",
            m: ad,
            mm: "%d Minuten",
            h: ad,
            hh: "%d Stunden",
            d: ad,
            dd: ad,
            M: ad,
            MM: ad,
            y: ad,
            yy: ad
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function aq(gS, gR, gQ, gU) {
        var gT = {
            m: ["eine Minute", "einer Minute"],
            h: ["eine Stunde", "einer Stunde"],
            d: ["ein Tag", "einem Tag"],
            dd: [gS + " Tage", gS + " Tagen"],
            M: ["ein Monat", "einem Monat"],
            MM: [gS + " Monate", gS + " Monaten"],
            y: ["ein Jahr", "einem Jahr"],
            yy: [gS + " Jahre", gS + " Jahren"]
        };
        return gR ? gT[gQ][0] : gT[gQ][1]
    }
    ga.defineLocale("de", {
        months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: true,
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY HH:mm",
            LLLL: "dddd, D. MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[heute um] LT [Uhr]",
            sameElse: "L",
            nextDay: "[morgen um] LT [Uhr]",
            nextWeek: "dddd [um] LT [Uhr]",
            lastDay: "[gestern um] LT [Uhr]",
            lastWeek: "[letzten] dddd [um] LT [Uhr]"
        },
        relativeTime: {
            future: "in %s",
            past: "vor %s",
            s: "ein paar Sekunden",
            m: aq,
            mm: "%d Minuten",
            h: aq,
            hh: "%d Stunden",
            d: aq,
            dd: aq,
            M: aq,
            MM: aq,
            y: aq,
            yy: aq
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var el = ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"];
    var ft = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"];
    ga.defineLocale("dv", {
        months: el,
        monthsShort: el,
        weekdays: ft,
        weekdaysShort: ft,
        weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "D/M/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /މކ|މފ/,
        isPM: function(gQ) {
            return "މފ" === gQ
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "މކ"
            } else {
                return "މފ"
            }
        },
        calendar: {
            sameDay: "[މިއަދު] LT",
            nextDay: "[މާދަމާ] LT",
            nextWeek: "dddd LT",
            lastDay: "[އިއްޔެ] LT",
            lastWeek: "[ފާއިތުވި] dddd LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "ތެރޭގައި %s",
            past: "ކުރިން %s",
            s: "ސިކުންތުކޮޅެއް",
            m: "މިނިޓެއް",
            mm: "މިނިޓު %d",
            h: "ގަޑިއިރެއް",
            hh: "ގަޑިއިރު %d",
            d: "ދުވަހެއް",
            dd: "ދުވަސް %d",
            M: "މަހެއް",
            MM: "މަސް %d",
            y: "އަހަރެއް",
            yy: "އަހަރު %d"
        },
        preparse: function(gQ) {
            return gQ.replace(/،/g, ",")
        },
        postformat: function(gQ) {
            return gQ.replace(/,/g, "،")
        },
        week: {
            dow: 7,
            doy: 12
        }
    });
    ga.defineLocale("el", {
        monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months: function(gR, gQ) {
            if (/D/.test(gQ.substring(0, gQ.indexOf("MMMM")))) {
                return this._monthsGenitiveEl[gR.month()]
            } else {
                return this._monthsNominativeEl[gR.month()]
            }
        },
        monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem: function(gQ, gR, gS) {
            if (gQ > 11) {
                return gS ? "μμ" : "ΜΜ"
            } else {
                return gS ? "πμ" : "ΠΜ"
            }
        },
        isPM: function(gQ) {
            return ((gQ + "").toLowerCase()[0] === "μ")
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendarEl: {
            sameDay: "[Σήμερα {}] LT",
            nextDay: "[Αύριο {}] LT",
            nextWeek: "dddd [{}] LT",
            lastDay: "[Χθες {}] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 6:
                        return "[το προηγούμενο] dddd [{}] LT";
                    default:
                        return "[την προηγούμενη] dddd [{}] LT"
                }
            },
            sameElse: "L"
        },
        calendar: function(gS, gT) {
            var gR = this._calendarEl[gS],
                gQ = gT && gT.hours();
            if (br(gR)) {
                gR = gR.apply(gT)
            }
            return gR.replace("{}", (gQ % 12 === 1 ? "στη" : "στις"))
        },
        relativeTime: {
            future: "σε %s",
            past: "%s πριν",
            s: "λίγα δευτερόλεπτα",
            m: "ένα λεπτό",
            mm: "%d λεπτά",
            h: "μία ώρα",
            hh: "%d ώρες",
            d: "μία μέρα",
            dd: "%d μέρες",
            M: "ένας μήνας",
            MM: "%d μήνες",
            y: "ένας χρόνος",
            yy: "%d χρόνια"
        },
        ordinalParse: /\d{1,2}η/,
        ordinal: "%dη",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("en-au", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("en-ca", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "YYYY-MM-DD",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY h:mm A",
            LLLL: "dddd, MMMM D, YYYY h:mm A"
        },
        calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        }
    });
    ga.defineLocale("en-gb", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("en-ie", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD-MM-YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("en-nz", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("eo", {
        months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays: "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort: "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY-MM-DD",
            LL: "D[-an de] MMMM, YYYY",
            LLL: "D[-an de] MMMM, YYYY HH:mm",
            LLLL: "dddd, [la] D[-an de] MMMM, YYYY HH:mm"
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function(gQ) {
            return gQ.charAt(0).toLowerCase() === "p"
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ > 11) {
                return gS ? "p.t.m." : "P.T.M."
            } else {
                return gS ? "a.t.m." : "A.T.M."
            }
        },
        calendar: {
            sameDay: "[Hodiaŭ je] LT",
            nextDay: "[Morgaŭ je] LT",
            nextWeek: "dddd [je] LT",
            lastDay: "[Hieraŭ je] LT",
            lastWeek: "[pasinta] dddd [je] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "je %s",
            past: "antaŭ %s",
            s: "sekundoj",
            m: "minuto",
            mm: "%d minutoj",
            h: "horo",
            hh: "%d horoj",
            d: "tago",
            dd: "%d tagoj",
            M: "monato",
            MM: "%d monatoj",
            y: "jaro",
            yy: "%d jaroj"
        },
        ordinalParse: /\d{1,2}a/,
        ordinal: "%da",
        week: {
            dow: 1,
            doy: 7
        }
    });
    var gz = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_");
    var c5 = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");
    ga.defineLocale("es-do", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort: function(gQ, gR) {
            if (/-MMM-/.test(gR)) {
                return c5[gQ.month()]
            } else {
                return gz[gQ.month()]
            }
        },
        monthsParseExact: true,
        weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY h:mm A",
            LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
        },
        calendar: {
            sameDay: function() {
                return "[hoy a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            nextDay: function() {
                return "[mañana a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            nextWeek: function() {
                return "dddd [a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            lastDay: function() {
                return "[ayer a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            lastWeek: function() {
                return "[el] dddd [pasado a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "en %s",
            past: "hace %s",
            s: "unos segundos",
            m: "un minuto",
            mm: "%d minutos",
            h: "una hora",
            hh: "%d horas",
            d: "un día",
            dd: "%d días",
            M: "un mes",
            MM: "%d meses",
            y: "un año",
            yy: "%d años"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var es = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_");
    var c3 = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");
    ga.defineLocale("es", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort: function(gQ, gR) {
            if (/-MMM-/.test(gR)) {
                return c3[gQ.month()]
            } else {
                return es[gQ.month()]
            }
        },
        monthsParseExact: true,
        weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY H:mm",
            LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        calendar: {
            sameDay: function() {
                return "[hoy a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            nextDay: function() {
                return "[mañana a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            nextWeek: function() {
                return "dddd [a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            lastDay: function() {
                return "[ayer a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            lastWeek: function() {
                return "[el] dddd [pasado a la" + ((this.hours() !== 1) ? "s" : "") + "] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "en %s",
            past: "hace %s",
            s: "unos segundos",
            m: "un minuto",
            mm: "%d minutos",
            h: "una hora",
            hh: "%d horas",
            d: "un día",
            dd: "%d días",
            M: "un mes",
            MM: "%d meses",
            y: "un año",
            yy: "%d años"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function ap(gS, gR, gQ, gU) {
        var gT = {
            s: ["mõne sekundi", "mõni sekund", "paar sekundit"],
            m: ["ühe minuti", "üks minut"],
            mm: [gS + " minuti", gS + " minutit"],
            h: ["ühe tunni", "tund aega", "üks tund"],
            hh: [gS + " tunni", gS + " tundi"],
            d: ["ühe päeva", "üks päev"],
            M: ["kuu aja", "kuu aega", "üks kuu"],
            MM: [gS + " kuu", gS + " kuud"],
            y: ["ühe aasta", "aasta", "üks aasta"],
            yy: [gS + " aasta", gS + " aastat"]
        };
        if (gR) {
            return gT[gQ][2] ? gT[gQ][2] : gT[gQ][1]
        }
        return gU ? gT[gQ][0] : gT[gQ][1]
    }
    ga.defineLocale("et", {
        months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort: "P_E_T_K_N_R_L".split("_"),
        weekdaysMin: "P_E_T_K_N_R_L".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[Täna,] LT",
            nextDay: "[Homme,] LT",
            nextWeek: "[Järgmine] dddd LT",
            lastDay: "[Eile,] LT",
            lastWeek: "[Eelmine] dddd LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s pärast",
            past: "%s tagasi",
            s: ap,
            m: ap,
            mm: ap,
            h: ap,
            hh: ap,
            d: ap,
            dd: "%d päeva",
            M: ap,
            MM: ap,
            y: ap,
            yy: ap
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("eu", {
        months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        monthsParseExact: true,
        weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY-MM-DD",
            LL: "YYYY[ko] MMMM[ren] D[a]",
            LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
            LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
            l: "YYYY-M-D",
            ll: "YYYY[ko] MMM D[a]",
            lll: "YYYY[ko] MMM D[a] HH:mm",
            llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
        },
        calendar: {
            sameDay: "[gaur] LT[etan]",
            nextDay: "[bihar] LT[etan]",
            nextWeek: "dddd LT[etan]",
            lastDay: "[atzo] LT[etan]",
            lastWeek: "[aurreko] dddd LT[etan]",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s barru",
            past: "duela %s",
            s: "segundo batzuk",
            m: "minutu bat",
            mm: "%d minutu",
            h: "ordu bat",
            hh: "%d ordu",
            d: "egun bat",
            dd: "%d egun",
            M: "hilabete bat",
            MM: "%d hilabete",
            y: "urte bat",
            yy: "%d urte"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    var cU = {
        "1": "۱",
        "2": "۲",
        "3": "۳",
        "4": "۴",
        "5": "۵",
        "6": "۶",
        "7": "۷",
        "8": "۸",
        "9": "۹",
        "0": "۰"
    };
    var fH = {
        "۱": "1",
        "۲": "2",
        "۳": "3",
        "۴": "4",
        "۵": "5",
        "۶": "6",
        "۷": "7",
        "۸": "8",
        "۹": "9",
        "۰": "0"
    };
    ga.defineLocale("fa", {
        months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        weekdays: "یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه".split("_"),
        weekdaysShort: "یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه".split("_"),
        weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function(gQ) {
            return /بعد از ظهر/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "قبل از ظهر"
            } else {
                return "بعد از ظهر"
            }
        },
        calendar: {
            sameDay: "[امروز ساعت] LT",
            nextDay: "[فردا ساعت] LT",
            nextWeek: "dddd [ساعت] LT",
            lastDay: "[دیروز ساعت] LT",
            lastWeek: "dddd [پیش] [ساعت] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "در %s",
            past: "%s پیش",
            s: "چندین ثانیه",
            m: "یک دقیقه",
            mm: "%d دقیقه",
            h: "یک ساعت",
            hh: "%d ساعت",
            d: "یک روز",
            dd: "%d روز",
            M: "یک ماه",
            MM: "%d ماه",
            y: "یک سال",
            yy: "%d سال"
        },
        preparse: function(gQ) {
            return gQ.replace(/[۰-۹]/g, function(gR) {
                return fH[gR]
            }).replace(/،/g, ",")
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cU[gR]
            }).replace(/,/g, "،")
        },
        ordinalParse: /\d{1,2}م/,
        ordinal: "%dم",
        week: {
            dow: 6,
            doy: 12
        }
    });
    var r = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" ");
    var aR = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", r[7], r[8], r[9]];

    function gM(gT, gS, gR, gU) {
        var gQ = "";
        switch (gR) {
            case "s":
                return gU ? "muutaman sekunnin" : "muutama sekunti";
            case "m":
                return gU ? "minuutin" : "minuutti";
            case "mm":
                gQ = gU ? "minuutin" : "minuuttia";
                break;
            case "h":
                return gU ? "tunnin" : "tunti";
            case "hh":
                gQ = gU ? "tunnin" : "tuntia";
                break;
            case "d":
                return gU ? "päivän" : "päivä";
            case "dd":
                gQ = gU ? "päivän" : "päivää";
                break;
            case "M":
                return gU ? "kuukauden" : "kuukausi";
            case "MM":
                gQ = gU ? "kuukauden" : "kuukautta";
                break;
            case "y":
                return gU ? "vuoden" : "vuosi";
            case "yy":
                gQ = gU ? "vuoden" : "vuotta";
                break
        }
        gQ = d2(gT, gU) + " " + gQ;
        return gQ
    }

    function d2(gQ, gR) {
        return gQ < 10 ? (gR ? aR[gQ] : r[gQ]) : gQ
    }
    ga.defineLocale("fi", {
        months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD.MM.YYYY",
            LL: "Do MMMM[ta] YYYY",
            LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
            LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
            l: "D.M.YYYY",
            ll: "Do MMM YYYY",
            lll: "Do MMM YYYY, [klo] HH.mm",
            llll: "ddd, Do MMM YYYY, [klo] HH.mm"
        },
        calendar: {
            sameDay: "[tänään] [klo] LT",
            nextDay: "[huomenna] [klo] LT",
            nextWeek: "dddd [klo] LT",
            lastDay: "[eilen] [klo] LT",
            lastWeek: "[viime] dddd[na] [klo] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s päästä",
            past: "%s sitten",
            s: gM,
            m: gM,
            mm: gM,
            h: gM,
            hh: gM,
            d: gM,
            dd: gM,
            M: gM,
            MM: gM,
            y: gM,
            yy: gM
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("fo", {
        months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D. MMMM, YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Í dag kl.] LT",
            nextDay: "[Í morgin kl.] LT",
            nextWeek: "dddd [kl.] LT",
            lastDay: "[Í gjár kl.] LT",
            lastWeek: "[síðstu] dddd [kl] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "um %s",
            past: "%s síðani",
            s: "fá sekund",
            m: "ein minutt",
            mm: "%d minuttir",
            h: "ein tími",
            hh: "%d tímar",
            d: "ein dagur",
            dd: "%d dagar",
            M: "ein mánaði",
            MM: "%d mánaðir",
            y: "eitt ár",
            yy: "%d ár"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("fr-ca", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: true,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY-MM-DD",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: "[Demain à] LT",
            nextWeek: "dddd [à] LT",
            lastDay: "[Hier à] LT",
            lastWeek: "dddd [dernier à] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dans %s",
            past: "il y a %s",
            s: "quelques secondes",
            m: "une minute",
            mm: "%d minutes",
            h: "une heure",
            hh: "%d heures",
            d: "un jour",
            dd: "%d jours",
            M: "un mois",
            MM: "%d mois",
            y: "un an",
            yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(gQ) {
            return gQ + (gQ === 1 ? "er" : "e")
        }
    });
    ga.defineLocale("fr-ch", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: true,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: "[Demain à] LT",
            nextWeek: "dddd [à] LT",
            lastDay: "[Hier à] LT",
            lastWeek: "dddd [dernier à] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dans %s",
            past: "il y a %s",
            s: "quelques secondes",
            m: "une minute",
            mm: "%d minutes",
            h: "une heure",
            hh: "%d heures",
            d: "un jour",
            dd: "%d jours",
            M: "un mois",
            MM: "%d mois",
            y: "un an",
            yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(gQ) {
            return gQ + (gQ === 1 ? "er" : "e")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("fr", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: true,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: "[Demain à] LT",
            nextWeek: "dddd [à] LT",
            lastDay: "[Hier à] LT",
            lastWeek: "dddd [dernier à] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dans %s",
            past: "il y a %s",
            s: "quelques secondes",
            m: "une minute",
            mm: "%d minutes",
            h: "une heure",
            hh: "%d heures",
            d: "un jour",
            dd: "%d jours",
            M: "un mois",
            MM: "%d mois",
            y: "un an",
            yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function(gQ) {
            return gQ + (gQ === 1 ? "er" : "")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var fQ = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_");
    var gj = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");
    ga.defineLocale("fy", {
        months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
        monthsShort: function(gQ, gR) {
            if (/-MMM-/.test(gR)) {
                return gj[gQ.month()]
            } else {
                return fQ[gQ.month()]
            }
        },
        monthsParseExact: true,
        weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
        weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
        weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD-MM-YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[hjoed om] LT",
            nextDay: "[moarn om] LT",
            nextWeek: "dddd [om] LT",
            lastDay: "[juster om] LT",
            lastWeek: "[ôfrûne] dddd [om] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "oer %s",
            past: "%s lyn",
            s: "in pear sekonden",
            m: "ien minút",
            mm: "%d minuten",
            h: "ien oere",
            hh: "%d oeren",
            d: "ien dei",
            dd: "%d dagen",
            M: "ien moanne",
            MM: "%d moannen",
            y: "ien jier",
            yy: "%d jierren"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(gQ) {
            return gQ + ((gQ === 1 || gQ === 8 || gQ >= 20) ? "ste" : "de")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var ek = ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"];
    var c2 = ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"];
    var bF = ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"];
    var fB = ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"];
    var C = ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"];
    ga.defineLocale("gd", {
        months: ek,
        monthsShort: c2,
        monthsParseExact: true,
        weekdays: bF,
        weekdaysShort: fB,
        weekdaysMin: C,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[An-diugh aig] LT",
            nextDay: "[A-màireach aig] LT",
            nextWeek: "dddd [aig] LT",
            lastDay: "[An-dè aig] LT",
            lastWeek: "dddd [seo chaidh] [aig] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "ann an %s",
            past: "bho chionn %s",
            s: "beagan diogan",
            m: "mionaid",
            mm: "%d mionaidean",
            h: "uair",
            hh: "%d uairean",
            d: "latha",
            dd: "%d latha",
            M: "mìos",
            MM: "%d mìosan",
            y: "bliadhna",
            yy: "%d bliadhna"
        },
        ordinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function(gR) {
            var gQ = gR === 1 ? "d" : gR % 10 === 2 ? "na" : "mh";
            return gR + gQ
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("gl", {
        months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
        monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY H:mm",
            LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        calendar: {
            sameDay: function() {
                return "[hoxe " + ((this.hours() !== 1) ? "ás" : "á") + "] LT"
            },
            nextDay: function() {
                return "[mañá " + ((this.hours() !== 1) ? "ás" : "á") + "] LT"
            },
            nextWeek: function() {
                return "dddd [" + ((this.hours() !== 1) ? "ás" : "a") + "] LT"
            },
            lastDay: function() {
                return "[onte " + ((this.hours() !== 1) ? "á" : "a") + "] LT"
            },
            lastWeek: function() {
                return "[o] dddd [pasado " + ((this.hours() !== 1) ? "ás" : "a") + "] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: function(gQ) {
                if (gQ.indexOf("un") === 0) {
                    return "n" + gQ
                }
                return "en " + gQ
            },
            past: "hai %s",
            s: "uns segundos",
            m: "un minuto",
            mm: "%d minutos",
            h: "unha hora",
            hh: "%d horas",
            d: "un día",
            dd: "%d días",
            M: "un mes",
            MM: "%d meses",
            y: "un ano",
            yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("he", {
        months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [ב]MMMM YYYY",
            LLL: "D [ב]MMMM YYYY HH:mm",
            LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
            l: "D/M/YYYY",
            ll: "D MMM YYYY",
            lll: "D MMM YYYY HH:mm",
            llll: "ddd, D MMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[היום ב־]LT",
            nextDay: "[מחר ב־]LT",
            nextWeek: "dddd [בשעה] LT",
            lastDay: "[אתמול ב־]LT",
            lastWeek: "[ביום] dddd [האחרון בשעה] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "בעוד %s",
            past: "לפני %s",
            s: "מספר שניות",
            m: "דקה",
            mm: "%d דקות",
            h: "שעה",
            hh: function(gQ) {
                if (gQ === 2) {
                    return "שעתיים"
                }
                return gQ + " שעות"
            },
            d: "יום",
            dd: function(gQ) {
                if (gQ === 2) {
                    return "יומיים"
                }
                return gQ + " ימים"
            },
            M: "חודש",
            MM: function(gQ) {
                if (gQ === 2) {
                    return "חודשיים"
                }
                return gQ + " חודשים"
            },
            y: "שנה",
            yy: function(gQ) {
                if (gQ === 2) {
                    return "שנתיים"
                } else {
                    if (gQ % 10 === 0 && gQ !== 10) {
                        return gQ + " שנה"
                    }
                }
                return gQ + " שנים"
            }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function(gQ) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 5) {
                return "לפנות בוקר"
            } else {
                if (gQ < 10) {
                    return "בבוקר"
                } else {
                    if (gQ < 12) {
                        return gR ? 'לפנה"צ' : "לפני הצהריים"
                    } else {
                        if (gQ < 18) {
                            return gR ? 'אחה"צ' : "אחרי הצהריים"
                        } else {
                            return "בערב"
                        }
                    }
                }
            }
        }
    });
    var cR = {
        "1": "१",
        "2": "२",
        "3": "३",
        "4": "४",
        "5": "५",
        "6": "६",
        "7": "७",
        "8": "८",
        "9": "९",
        "0": "०"
    };
    var fG = {
        "१": "1",
        "२": "2",
        "३": "3",
        "४": "4",
        "५": "5",
        "६": "6",
        "७": "7",
        "८": "8",
        "९": "9",
        "०": "0"
    };
    ga.defineLocale("hi", {
        months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
        monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
        monthsParseExact: true,
        weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
            LT: "A h:mm बजे",
            LTS: "A h:mm:ss बजे",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm बजे",
            LLLL: "dddd, D MMMM YYYY, A h:mm बजे"
        },
        calendar: {
            sameDay: "[आज] LT",
            nextDay: "[कल] LT",
            nextWeek: "dddd, LT",
            lastDay: "[कल] LT",
            lastWeek: "[पिछले] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s में",
            past: "%s पहले",
            s: "कुछ ही क्षण",
            m: "एक मिनट",
            mm: "%d मिनट",
            h: "एक घंटा",
            hh: "%d घंटे",
            d: "एक दिन",
            dd: "%d दिन",
            M: "एक महीने",
            MM: "%d महीने",
            y: "एक वर्ष",
            yy: "%d वर्ष"
        },
        preparse: function(gQ) {
            return gQ.replace(/[१२३४५६७८९०]/g, function(gR) {
                return fG[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cR[gR]
            })
        },
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "रात") {
                return gQ < 4 ? gQ : gQ + 12
            } else {
                if (gR === "सुबह") {
                    return gQ
                } else {
                    if (gR === "दोपहर") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        if (gR === "शाम") {
                            return gQ + 12
                        }
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "रात"
            } else {
                if (gQ < 10) {
                    return "सुबह"
                } else {
                    if (gQ < 17) {
                        return "दोपहर"
                    } else {
                        if (gQ < 20) {
                            return "शाम"
                        } else {
                            return "रात"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });

    function gL(gT, gS, gR) {
        var gQ = gT + " ";
        switch (gR) {
            case "m":
                return gS ? "jedna minuta" : "jedne minute";
            case "mm":
                if (gT === 1) {
                    gQ += "minuta"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "minute"
                    } else {
                        gQ += "minuta"
                    }
                }
                return gQ;
            case "h":
                return gS ? "jedan sat" : "jednog sata";
            case "hh":
                if (gT === 1) {
                    gQ += "sat"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "sata"
                    } else {
                        gQ += "sati"
                    }
                }
                return gQ;
            case "dd":
                if (gT === 1) {
                    gQ += "dan"
                } else {
                    gQ += "dana"
                }
                return gQ;
            case "MM":
                if (gT === 1) {
                    gQ += "mjesec"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "mjeseca"
                    } else {
                        gQ += "mjeseci"
                    }
                }
                return gQ;
            case "yy":
                if (gT === 1) {
                    gQ += "godina"
                } else {
                    if (gT === 2 || gT === 3 || gT === 4) {
                        gQ += "godine"
                    } else {
                        gQ += "godina"
                    }
                }
                return gQ
        }
    }
    ga.defineLocale("hr", {
        months: {
            format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
            standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
        },
        monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        monthsParseExact: true,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[danas u] LT",
            nextDay: "[sutra u] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[u] [nedjelju] [u] LT";
                    case 3:
                        return "[u] [srijedu] [u] LT";
                    case 6:
                        return "[u] [subotu] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[u] dddd [u] LT"
                }
            },
            lastDay: "[jučer u] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return "[prošlu] dddd [u] LT";
                    case 6:
                        return "[prošle] [subote] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[prošli] dddd [u] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "prije %s",
            s: "par sekundi",
            m: gL,
            mm: gL,
            h: gL,
            hh: gL,
            d: "dan",
            dd: gL,
            M: "mjesec",
            MM: gL,
            y: "godinu",
            yy: gL
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    var eY = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");

    function gK(gT, gS, gR, gV) {
        var gQ = gT,
            gU;
        switch (gR) {
            case "s":
                return (gV || gS) ? "néhány másodperc" : "néhány másodperce";
            case "m":
                return "egy" + (gV || gS ? " perc" : " perce");
            case "mm":
                return gQ + (gV || gS ? " perc" : " perce");
            case "h":
                return "egy" + (gV || gS ? " óra" : " órája");
            case "hh":
                return gQ + (gV || gS ? " óra" : " órája");
            case "d":
                return "egy" + (gV || gS ? " nap" : " napja");
            case "dd":
                return gQ + (gV || gS ? " nap" : " napja");
            case "M":
                return "egy" + (gV || gS ? " hónap" : " hónapja");
            case "MM":
                return gQ + (gV || gS ? " hónap" : " hónapja");
            case "y":
                return "egy" + (gV || gS ? " év" : " éve");
            case "yy":
                return gQ + (gV || gS ? " év" : " éve")
        }
        return ""
    }

    function ax(gQ) {
        return (gQ ? "" : "[múlt] ") + "[" + eY[this.day()] + "] LT[-kor]"
    }
    ga.defineLocale("hu", {
        months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "YYYY.MM.DD.",
            LL: "YYYY. MMMM D.",
            LLL: "YYYY. MMMM D. H:mm",
            LLLL: "YYYY. MMMM D., dddd H:mm"
        },
        meridiemParse: /de|du/i,
        isPM: function(gQ) {
            return gQ.charAt(1).toLowerCase() === "u"
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 12) {
                return gS === true ? "de" : "DE"
            } else {
                return gS === true ? "du" : "DU"
            }
        },
        calendar: {
            sameDay: "[ma] LT[-kor]",
            nextDay: "[holnap] LT[-kor]",
            nextWeek: function() {
                return ax.call(this, true)
            },
            lastDay: "[tegnap] LT[-kor]",
            lastWeek: function() {
                return ax.call(this, false)
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "%s múlva",
            past: "%s",
            s: gK,
            m: gK,
            mm: gK,
            h: gK,
            hh: gK,
            d: gK,
            dd: gK,
            M: gK,
            MM: gK,
            y: gK,
            yy: gK
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("hy-am", {
        months: {
            format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),
            standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")
        },
        monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),
        weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),
        weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY թ.",
            LLL: "D MMMM YYYY թ., HH:mm",
            LLLL: "dddd, D MMMM YYYY թ., HH:mm"
        },
        calendar: {
            sameDay: "[այսօր] LT",
            nextDay: "[վաղը] LT",
            lastDay: "[երեկ] LT",
            nextWeek: function() {
                return "dddd [օրը ժամը] LT"
            },
            lastWeek: function() {
                return "[անցած] dddd [օրը ժամը] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "%s հետո",
            past: "%s առաջ",
            s: "մի քանի վայրկյան",
            m: "րոպե",
            mm: "%d րոպե",
            h: "ժամ",
            hh: "%d ժամ",
            d: "օր",
            dd: "%d օր",
            M: "ամիս",
            MM: "%d ամիս",
            y: "տարի",
            yy: "%d տարի"
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function(gQ) {
            return /^(ցերեկվա|երեկոյան)$/.test(gQ)
        },
        meridiem: function(gQ) {
            if (gQ < 4) {
                return "գիշերվա"
            } else {
                if (gQ < 12) {
                    return "առավոտվա"
                } else {
                    if (gQ < 17) {
                        return "ցերեկվա"
                    } else {
                        return "երեկոյան"
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "DDD":
                case "w":
                case "W":
                case "DDDo":
                    if (gQ === 1) {
                        return gQ + "-ին"
                    }
                    return gQ + "-րդ";
                default:
                    return gQ
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("id", {
        months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [pukul] HH.mm",
            LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "pagi") {
                return gQ
            } else {
                if (gR === "siang") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "sore" || gR === "malam") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 11) {
                return "pagi"
            } else {
                if (gQ < 15) {
                    return "siang"
                } else {
                    if (gQ < 19) {
                        return "sore"
                    } else {
                        return "malam"
                    }
                }
            }
        },
        calendar: {
            sameDay: "[Hari ini pukul] LT",
            nextDay: "[Besok pukul] LT",
            nextWeek: "dddd [pukul] LT",
            lastDay: "[Kemarin pukul] LT",
            lastWeek: "dddd [lalu pukul] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dalam %s",
            past: "%s yang lalu",
            s: "beberapa detik",
            m: "semenit",
            mm: "%d menit",
            h: "sejam",
            hh: "%d jam",
            d: "sehari",
            dd: "%d hari",
            M: "sebulan",
            MM: "%d bulan",
            y: "setahun",
            yy: "%d tahun"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    function cw(gQ) {
        if (gQ % 100 === 11) {
            return true
        } else {
            if (gQ % 10 === 1) {
                return false
            }
        }
        return true
    }

    function gJ(gT, gS, gR, gU) {
        var gQ = gT + " ";
        switch (gR) {
            case "s":
                return gS || gU ? "nokkrar sekúndur" : "nokkrum sekúndum";
            case "m":
                return gS ? "mínúta" : "mínútu";
            case "mm":
                if (cw(gT)) {
                    return gQ + (gS || gU ? "mínútur" : "mínútum")
                } else {
                    if (gS) {
                        return gQ + "mínúta"
                    }
                }
                return gQ + "mínútu";
            case "hh":
                if (cw(gT)) {
                    return gQ + (gS || gU ? "klukkustundir" : "klukkustundum")
                }
                return gQ + "klukkustund";
            case "d":
                if (gS) {
                    return "dagur"
                }
                return gU ? "dag" : "degi";
            case "dd":
                if (cw(gT)) {
                    if (gS) {
                        return gQ + "dagar"
                    }
                    return gQ + (gU ? "daga" : "dögum")
                } else {
                    if (gS) {
                        return gQ + "dagur"
                    }
                }
                return gQ + (gU ? "dag" : "degi");
            case "M":
                if (gS) {
                    return "mánuður"
                }
                return gU ? "mánuð" : "mánuði";
            case "MM":
                if (cw(gT)) {
                    if (gS) {
                        return gQ + "mánuðir"
                    }
                    return gQ + (gU ? "mánuði" : "mánuðum")
                } else {
                    if (gS) {
                        return gQ + "mánuður"
                    }
                }
                return gQ + (gU ? "mánuð" : "mánuði");
            case "y":
                return gS || gU ? "ár" : "ári";
            case "yy":
                if (cw(gT)) {
                    return gQ + (gS || gU ? "ár" : "árum")
                }
                return gQ + (gS || gU ? "ár" : "ári")
        }
    }
    ga.defineLocale("is", {
        months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY [kl.] H:mm",
            LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
        },
        calendar: {
            sameDay: "[í dag kl.] LT",
            nextDay: "[á morgun kl.] LT",
            nextWeek: "dddd [kl.] LT",
            lastDay: "[í gær kl.] LT",
            lastWeek: "[síðasta] dddd [kl.] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "eftir %s",
            past: "fyrir %s síðan",
            s: gJ,
            m: gJ,
            mm: gJ,
            h: "klukkustund",
            hh: gJ,
            d: gJ,
            dd: gJ,
            M: gJ,
            MM: gJ,
            y: gJ,
            yy: gJ
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("it", {
        months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
        monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin: "Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Oggi alle] LT",
            nextDay: "[Domani alle] LT",
            nextWeek: "dddd [alle] LT",
            lastDay: "[Ieri alle] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[la scorsa] dddd [alle] LT";
                    default:
                        return "[lo scorso] dddd [alle] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: function(gQ) {
                return ((/^[0-9].+$/).test(gQ) ? "tra" : "in") + " " + gQ
            },
            past: "%s fa",
            s: "alcuni secondi",
            m: "un minuto",
            mm: "%d minuti",
            h: "un'ora",
            hh: "%d ore",
            d: "un giorno",
            dd: "%d giorni",
            M: "un mese",
            MM: "%d mesi",
            y: "un anno",
            yy: "%d anni"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("ja", {
        months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort: "日_月_火_水_木_金_土".split("_"),
        weekdaysMin: "日_月_火_水_木_金_土".split("_"),
        longDateFormat: {
            LT: "Ah時m分",
            LTS: "Ah時m分s秒",
            L: "YYYY/MM/DD",
            LL: "YYYY年M月D日",
            LLL: "YYYY年M月D日Ah時m分",
            LLLL: "YYYY年M月D日Ah時m分 dddd"
        },
        meridiemParse: /午前|午後/i,
        isPM: function(gQ) {
            return gQ === "午後"
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "午前"
            } else {
                return "午後"
            }
        },
        calendar: {
            sameDay: "[今日] LT",
            nextDay: "[明日] LT",
            nextWeek: "[来週]dddd LT",
            lastDay: "[昨日] LT",
            lastWeek: "[前週]dddd LT",
            sameElse: "L"
        },
        ordinalParse: /\d{1,2}日/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "d":
                case "D":
                case "DDD":
                    return gQ + "日";
                default:
                    return gQ
            }
        },
        relativeTime: {
            future: "%s後",
            past: "%s前",
            s: "数秒",
            m: "1分",
            mm: "%d分",
            h: "1時間",
            hh: "%d時間",
            d: "1日",
            dd: "%d日",
            M: "1ヶ月",
            MM: "%dヶ月",
            y: "1年",
            yy: "%d年"
        }
    });
    ga.defineLocale("jv", {
        months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
        weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
        weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
        weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [pukul] HH.mm",
            LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "enjing") {
                return gQ
            } else {
                if (gR === "siyang") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "sonten" || gR === "ndalu") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 11) {
                return "enjing"
            } else {
                if (gQ < 15) {
                    return "siyang"
                } else {
                    if (gQ < 19) {
                        return "sonten"
                    } else {
                        return "ndalu"
                    }
                }
            }
        },
        calendar: {
            sameDay: "[Dinten puniko pukul] LT",
            nextDay: "[Mbenjang pukul] LT",
            nextWeek: "dddd [pukul] LT",
            lastDay: "[Kala wingi pukul] LT",
            lastWeek: "dddd [kepengker pukul] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "wonten ing %s",
            past: "%s ingkang kepengker",
            s: "sawetawis detik",
            m: "setunggal menit",
            mm: "%d menit",
            h: "setunggal jam",
            hh: "%d jam",
            d: "sedinten",
            dd: "%d dinten",
            M: "sewulan",
            MM: "%d wulan",
            y: "setaun",
            yy: "%d taun"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("ka", {
        months: {
            standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
            format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")
        },
        monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays: {
            standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
            format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
            sameDay: "[დღეს] LT[-ზე]",
            nextDay: "[ხვალ] LT[-ზე]",
            lastDay: "[გუშინ] LT[-ზე]",
            nextWeek: "[შემდეგ] dddd LT[-ზე]",
            lastWeek: "[წინა] dddd LT-ზე",
            sameElse: "L"
        },
        relativeTime: {
            future: function(gQ) {
                return (/(წამი|წუთი|საათი|წელი)/).test(gQ) ? gQ.replace(/ი$/, "ში") : gQ + "ში"
            },
            past: function(gQ) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(gQ)) {
                    return gQ.replace(/(ი|ე)$/, "ის წინ")
                }
                if ((/წელი/).test(gQ)) {
                    return gQ.replace(/წელი$/, "წლის წინ")
                }
            },
            s: "რამდენიმე წამი",
            m: "წუთი",
            mm: "%d წუთი",
            h: "საათი",
            hh: "%d საათი",
            d: "დღე",
            dd: "%d დღე",
            M: "თვე",
            MM: "%d თვე",
            y: "წელი",
            yy: "%d წელი"
        },
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function(gQ) {
            if (gQ === 0) {
                return gQ
            }
            if (gQ === 1) {
                return gQ + "-ლი"
            }
            if ((gQ < 20) || (gQ <= 100 && (gQ % 20 === 0)) || (gQ % 100 === 0)) {
                return "მე-" + gQ
            }
            return gQ + "-ე"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    var o = {
        0: "-ші",
        1: "-ші",
        2: "-ші",
        3: "-ші",
        4: "-ші",
        5: "-ші",
        6: "-шы",
        7: "-ші",
        8: "-ші",
        9: "-шы",
        10: "-шы",
        20: "-шы",
        30: "-шы",
        40: "-шы",
        50: "-ші",
        60: "-шы",
        70: "-ші",
        80: "-ші",
        90: "-шы",
        100: "-ші"
    };
    ga.defineLocale("kk", {
        months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),
        monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),
        weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),
        weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
        weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Бүгін сағат] LT",
            nextDay: "[Ертең сағат] LT",
            nextWeek: "dddd [сағат] LT",
            lastDay: "[Кеше сағат] LT",
            lastWeek: "[Өткен аптаның] dddd [сағат] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s ішінде",
            past: "%s бұрын",
            s: "бірнеше секунд",
            m: "бір минут",
            mm: "%d минут",
            h: "бір сағат",
            hh: "%d сағат",
            d: "бір күн",
            dd: "%d күн",
            M: "бір ай",
            MM: "%d ай",
            y: "бір жыл",
            yy: "%d жыл"
        },
        ordinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function(gS) {
            var gR = gS % 10,
                gQ = gS >= 100 ? 100 : null;
            return gS + (o[gS] || o[gR] || o[gQ])
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("km", {
        months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
            nextDay: "[ស្អែក ម៉ោង] LT",
            nextWeek: "dddd [ម៉ោង] LT",
            lastDay: "[ម្សិលមិញ ម៉ោង] LT",
            lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%sទៀត",
            past: "%sមុន",
            s: "ប៉ុន្មានវិនាទី",
            m: "មួយនាទី",
            mm: "%d នាទី",
            h: "មួយម៉ោង",
            hh: "%d ម៉ោង",
            d: "មួយថ្ងៃ",
            dd: "%d ថ្ងៃ",
            M: "មួយខែ",
            MM: "%d ខែ",
            y: "មួយឆ្នាំ",
            yy: "%d ឆ្នាំ"
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("ko", {
        months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort: "일_월_화_수_목_금_토".split("_"),
        weekdaysMin: "일_월_화_수_목_금_토".split("_"),
        longDateFormat: {
            LT: "A h시 m분",
            LTS: "A h시 m분 s초",
            L: "YYYY.MM.DD",
            LL: "YYYY년 MMMM D일",
            LLL: "YYYY년 MMMM D일 A h시 m분",
            LLLL: "YYYY년 MMMM D일 dddd A h시 m분"
        },
        calendar: {
            sameDay: "오늘 LT",
            nextDay: "내일 LT",
            nextWeek: "dddd LT",
            lastDay: "어제 LT",
            lastWeek: "지난주 dddd LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s 후",
            past: "%s 전",
            s: "몇 초",
            ss: "%d초",
            m: "일분",
            mm: "%d분",
            h: "한 시간",
            hh: "%d시간",
            d: "하루",
            dd: "%d일",
            M: "한 달",
            MM: "%d달",
            y: "일 년",
            yy: "%d년"
        },
        ordinalParse: /\d{1,2}일/,
        ordinal: "%d일",
        meridiemParse: /오전|오후/,
        isPM: function(gQ) {
            return gQ === "오후"
        },
        meridiem: function(gQ, gS, gR) {
            return gQ < 12 ? "오전" : "오후"
        }
    });
    var l = {
        0: "-чү",
        1: "-чи",
        2: "-чи",
        3: "-чү",
        4: "-чү",
        5: "-чи",
        6: "-чы",
        7: "-чи",
        8: "-чи",
        9: "-чу",
        10: "-чу",
        20: "-чы",
        30: "-чу",
        40: "-чы",
        50: "-чү",
        60: "-чы",
        70: "-чи",
        80: "-чи",
        90: "-чу",
        100: "-чү"
    };
    ga.defineLocale("ky", {
        months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
        weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),
        weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
        weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Бүгүн саат] LT",
            nextDay: "[Эртең саат] LT",
            nextWeek: "dddd [саат] LT",
            lastDay: "[Кече саат] LT",
            lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s ичинде",
            past: "%s мурун",
            s: "бирнече секунд",
            m: "бир мүнөт",
            mm: "%d мүнөт",
            h: "бир саат",
            hh: "%d саат",
            d: "бир күн",
            dd: "%d күн",
            M: "бир ай",
            MM: "%d ай",
            y: "бир жыл",
            yy: "%d жыл"
        },
        ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function(gS) {
            var gR = gS % 10,
                gQ = gS >= 100 ? 100 : null;
            return gS + (l[gS] || l[gR] || l[gQ])
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    function am(gS, gR, gQ, gU) {
        var gT = {
            m: ["eng Minutt", "enger Minutt"],
            h: ["eng Stonn", "enger Stonn"],
            d: ["een Dag", "engem Dag"],
            M: ["ee Mount", "engem Mount"],
            y: ["ee Joer", "engem Joer"]
        };
        return gR ? gT[gQ][0] : gT[gQ][1]
    }

    function gm(gQ) {
        var gR = gQ.substr(0, gQ.indexOf(" "));
        if (dF(gR)) {
            return "a " + gQ
        }
        return "an " + gQ
    }

    function gd(gQ) {
        var gR = gQ.substr(0, gQ.indexOf(" "));
        if (dF(gR)) {
            return "viru " + gQ
        }
        return "virun " + gQ
    }

    function dF(gR) {
        gR = parseInt(gR, 10);
        if (isNaN(gR)) {
            return false
        }
        if (gR < 0) {
            return true
        } else {
            if (gR < 10) {
                if (4 <= gR && gR <= 7) {
                    return true
                }
                return false
            } else {
                if (gR < 100) {
                    var gQ = gR % 10,
                        gS = gR / 10;
                    if (gQ === 0) {
                        return dF(gS)
                    }
                    return dF(gQ)
                } else {
                    if (gR < 10000) {
                        while (gR >= 10) {
                            gR = gR / 10
                        }
                        return dF(gR)
                    } else {
                        gR = gR / 1000;
                        return dF(gR)
                    }
                }
            }
        }
    }
    ga.defineLocale("lb", {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: true,
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm [Auer]",
            LTS: "H:mm:ss [Auer]",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm [Auer]",
            LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
        },
        calendar: {
            sameDay: "[Haut um] LT",
            sameElse: "L",
            nextDay: "[Muer um] LT",
            nextWeek: "dddd [um] LT",
            lastDay: "[Gëschter um] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 2:
                    case 4:
                        return "[Leschten] dddd [um] LT";
                    default:
                        return "[Leschte] dddd [um] LT"
                }
            }
        },
        relativeTime: {
            future: gm,
            past: gd,
            s: "e puer Sekonnen",
            m: am,
            mm: "%d Minutten",
            h: am,
            hh: "%d Stonnen",
            d: am,
            dd: "%d Deeg",
            M: am,
            MM: "%d Méint",
            y: am,
            yy: "%d Joer"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("lo", {
        months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
        monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
        weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
        weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
        weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "ວັນdddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function(gQ) {
            return gQ === "ຕອນແລງ"
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "ຕອນເຊົ້າ"
            } else {
                return "ຕອນແລງ"
            }
        },
        calendar: {
            sameDay: "[ມື້ນີ້ເວລາ] LT",
            nextDay: "[ມື້ອື່ນເວລາ] LT",
            nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
            lastDay: "[ມື້ວານນີ້ເວລາ] LT",
            lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "ອີກ %s",
            past: "%sຜ່ານມາ",
            s: "ບໍ່ເທົ່າໃດວິນາທີ",
            m: "1 ນາທີ",
            mm: "%d ນາທີ",
            h: "1 ຊົ່ວໂມງ",
            hh: "%d ຊົ່ວໂມງ",
            d: "1 ມື້",
            dd: "%d ມື້",
            M: "1 ເດືອນ",
            MM: "%d ເດືອນ",
            y: "1 ປີ",
            yy: "%d ປີ"
        },
        ordinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function(gQ) {
            return "ທີ່" + gQ
        }
    });
    var e = {
        m: "minutė_minutės_minutę",
        mm: "minutės_minučių_minutes",
        h: "valanda_valandos_valandą",
        hh: "valandos_valandų_valandas",
        d: "diena_dienos_dieną",
        dd: "dienos_dienų_dienas",
        M: "mėnuo_mėnesio_mėnesį",
        MM: "mėnesiai_mėnesių_mėnesius",
        y: "metai_metų_metus",
        yy: "metai_metų_metus"
    };

    function eS(gS, gR, gQ, gT) {
        if (gR) {
            return "kelios sekundės"
        } else {
            return gT ? "kelių sekundžių" : "kelias sekundes"
        }
    }

    function f1(gS, gR, gQ, gT) {
        return gR ? aQ(gQ)[0] : (gT ? aQ(gQ)[1] : aQ(gQ)[2])
    }

    function ch(gQ) {
        return gQ % 10 === 0 || (gQ > 10 && gQ < 20)
    }

    function aQ(gQ) {
        return e[gQ].split("_")
    }

    function gG(gT, gS, gR, gU) {
        var gQ = gT + " ";
        if (gT === 1) {
            return gQ + f1(gT, gS, gR[0], gU)
        } else {
            if (gS) {
                return gQ + (ch(gT) ? aQ(gR)[1] : aQ(gR)[0])
            } else {
                if (gU) {
                    return gQ + aQ(gR)[1]
                } else {
                    return gQ + (ch(gT) ? aQ(gR)[1] : aQ(gR)[2])
                }
            }
        }
    }
    ga.defineLocale("lt", {
        months: {
            format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
            standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays: {
            format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),
            standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY-MM-DD",
            LL: "YYYY [m.] MMMM D [d.]",
            LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
            LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
            l: "YYYY-MM-DD",
            ll: "YYYY [m.] MMMM D [d.]",
            lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
            llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
        },
        calendar: {
            sameDay: "[Šiandien] LT",
            nextDay: "[Rytoj] LT",
            nextWeek: "dddd LT",
            lastDay: "[Vakar] LT",
            lastWeek: "[Praėjusį] dddd LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "po %s",
            past: "prieš %s",
            s: eS,
            m: f1,
            mm: gG,
            h: f1,
            hh: gG,
            d: f1,
            dd: gG,
            M: f1,
            MM: gG,
            y: f1,
            yy: gG
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal: function(gQ) {
            return gQ + "-oji"
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var bC = {
        m: "minūtes_minūtēm_minūte_minūtes".split("_"),
        mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
        h: "stundas_stundām_stunda_stundas".split("_"),
        hh: "stundas_stundām_stunda_stundas".split("_"),
        d: "dienas_dienām_diena_dienas".split("_"),
        dd: "dienas_dienām_diena_dienas".split("_"),
        M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
        MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
        y: "gada_gadiem_gads_gadi".split("_"),
        yy: "gada_gadiem_gads_gadi".split("_")
    };

    function a8(gQ, gS, gR) {
        if (gR) {
            return gS % 10 === 1 && gS % 100 !== 11 ? gQ[2] : gQ[3]
        } else {
            return gS % 10 === 1 && gS % 100 !== 11 ? gQ[0] : gQ[1]
        }
    }

    function dz(gS, gR, gQ) {
        return gS + " " + a8(bC[gQ], gS, gR)
    }

    function eg(gS, gR, gQ) {
        return a8(bC[gQ], gS, gR)
    }

    function bq(gR, gQ) {
        return gQ ? "dažas sekundes" : "dažām sekundēm"
    }
    ga.defineLocale("lv", {
        months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY.",
            LL: "YYYY. [gada] D. MMMM",
            LLL: "YYYY. [gada] D. MMMM, HH:mm",
            LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
        },
        calendar: {
            sameDay: "[Šodien pulksten] LT",
            nextDay: "[Rīt pulksten] LT",
            nextWeek: "dddd [pulksten] LT",
            lastDay: "[Vakar pulksten] LT",
            lastWeek: "[Pagājušā] dddd [pulksten] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "pēc %s",
            past: "pirms %s",
            s: bq,
            m: eg,
            mm: dz,
            h: eg,
            hh: dz,
            d: eg,
            dd: dz,
            M: eg,
            MM: dz,
            y: eg,
            yy: dz
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var fX = {
        words: {
            m: ["jedan minut", "jednog minuta"],
            mm: ["minut", "minuta", "minuta"],
            h: ["jedan sat", "jednog sata"],
            hh: ["sat", "sata", "sati"],
            dd: ["dan", "dana", "dana"],
            MM: ["mjesec", "mjeseca", "mjeseci"],
            yy: ["godina", "godine", "godina"]
        },
        correctGrammaticalCase: function(gR, gQ) {
            return gR === 1 ? gQ[0] : (gR >= 2 && gR <= 4 ? gQ[1] : gQ[2])
        },
        translate: function(gT, gR, gQ) {
            var gS = fX.words[gQ];
            if (gQ.length === 1) {
                return gR ? gS[0] : gS[1]
            } else {
                return gT + " " + fX.correctGrammaticalCase(gT, gS)
            }
        }
    };
    ga.defineLocale("me", {
        months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[danas u] LT",
            nextDay: "[sjutra u] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[u] [nedjelju] [u] LT";
                    case 3:
                        return "[u] [srijedu] [u] LT";
                    case 6:
                        return "[u] [subotu] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[u] dddd [u] LT"
                }
            },
            lastDay: "[juče u] LT",
            lastWeek: function() {
                var gQ = ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"];
                return gQ[this.day()]
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "prije %s",
            s: "nekoliko sekundi",
            m: fX.translate,
            mm: fX.translate,
            h: fX.translate,
            hh: fX.translate,
            d: "dan",
            dd: fX.translate,
            M: "mjesec",
            MM: fX.translate,
            y: "godinu",
            yy: fX.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("mi", {
        months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),
        monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),
        weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
        weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [i] HH:mm",
            LLLL: "dddd, D MMMM YYYY [i] HH:mm"
        },
        calendar: {
            sameDay: "[i teie mahana, i] LT",
            nextDay: "[apopo i] LT",
            nextWeek: "dddd [i] LT",
            lastDay: "[inanahi i] LT",
            lastWeek: "dddd [whakamutunga i] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "i roto i %s",
            past: "%s i mua",
            s: "te hēkona ruarua",
            m: "he meneti",
            mm: "%d meneti",
            h: "te haora",
            hh: "%d haora",
            d: "he ra",
            dd: "%d ra",
            M: "he marama",
            MM: "%d marama",
            y: "he tau",
            yy: "%d tau"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("mk", {
        months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
        weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
        weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "D.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY H:mm",
            LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[Денес во] LT",
            nextDay: "[Утре во] LT",
            nextWeek: "[Во] dddd [во] LT",
            lastDay: "[Вчера во] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return "[Изминатата] dddd [во] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[Изминатиот] dddd [во] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "после %s",
            past: "пред %s",
            s: "неколку секунди",
            m: "минута",
            mm: "%d минути",
            h: "час",
            hh: "%d часа",
            d: "ден",
            dd: "%d дена",
            M: "месец",
            MM: "%d месеци",
            y: "година",
            yy: "%d години"
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(gS) {
            var gR = gS % 10,
                gQ = gS % 100;
            if (gS === 0) {
                return gS + "-ев"
            } else {
                if (gQ === 0) {
                    return gS + "-ен"
                } else {
                    if (gQ > 10 && gQ < 20) {
                        return gS + "-ти"
                    } else {
                        if (gR === 1) {
                            return gS + "-ви"
                        } else {
                            if (gR === 2) {
                                return gS + "-ри"
                            } else {
                                if (gR === 7 || gR === 8) {
                                    return gS + "-ми"
                                } else {
                                    return gS + "-ти"
                                }
                            }
                        }
                    }
                }
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("ml", {
        months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
        monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
        monthsParseExact: true,
        weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
        weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
        weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
        longDateFormat: {
            LT: "A h:mm -നു",
            LTS: "A h:mm:ss -നു",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm -നു",
            LLLL: "dddd, D MMMM YYYY, A h:mm -നു"
        },
        calendar: {
            sameDay: "[ഇന്ന്] LT",
            nextDay: "[നാളെ] LT",
            nextWeek: "dddd, LT",
            lastDay: "[ഇന്നലെ] LT",
            lastWeek: "[കഴിഞ്ഞ] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s കഴിഞ്ഞ്",
            past: "%s മുൻപ്",
            s: "അൽപ നിമിഷങ്ങൾ",
            m: "ഒരു മിനിറ്റ്",
            mm: "%d മിനിറ്റ്",
            h: "ഒരു മണിക്കൂർ",
            hh: "%d മണിക്കൂർ",
            d: "ഒരു ദിവസം",
            dd: "%d ദിവസം",
            M: "ഒരു മാസം",
            MM: "%d മാസം",
            y: "ഒരു വർഷം",
            yy: "%d വർഷം"
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if ((gR === "രാത്രി" && gQ >= 4) || gR === "ഉച്ച കഴിഞ്ഞ്" || gR === "വൈകുന്നേരം") {
                return gQ + 12
            } else {
                return gQ
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "രാത്രി"
            } else {
                if (gQ < 12) {
                    return "രാവിലെ"
                } else {
                    if (gQ < 17) {
                        return "ഉച്ച കഴിഞ്ഞ്"
                    } else {
                        if (gQ < 20) {
                            return "വൈകുന്നേരം"
                        } else {
                            return "രാത്രി"
                        }
                    }
                }
            }
        }
    });
    var cP = {
        "1": "१",
        "2": "२",
        "3": "३",
        "4": "४",
        "5": "५",
        "6": "६",
        "7": "७",
        "8": "८",
        "9": "९",
        "0": "०"
    };
    var fF = {
        "१": "1",
        "२": "2",
        "३": "3",
        "४": "4",
        "५": "5",
        "६": "6",
        "७": "7",
        "८": "8",
        "९": "9",
        "०": "0"
    };

    function gO(gT, gS, gR, gU) {
        var gQ = "";
        if (gS) {
            switch (gR) {
                case "s":
                    gQ = "काही सेकंद";
                    break;
                case "m":
                    gQ = "एक मिनिट";
                    break;
                case "mm":
                    gQ = "%d मिनिटे";
                    break;
                case "h":
                    gQ = "एक तास";
                    break;
                case "hh":
                    gQ = "%d तास";
                    break;
                case "d":
                    gQ = "एक दिवस";
                    break;
                case "dd":
                    gQ = "%d दिवस";
                    break;
                case "M":
                    gQ = "एक महिना";
                    break;
                case "MM":
                    gQ = "%d महिने";
                    break;
                case "y":
                    gQ = "एक वर्ष";
                    break;
                case "yy":
                    gQ = "%d वर्षे";
                    break
            }
        } else {
            switch (gR) {
                case "s":
                    gQ = "काही सेकंदां";
                    break;
                case "m":
                    gQ = "एका मिनिटा";
                    break;
                case "mm":
                    gQ = "%d मिनिटां";
                    break;
                case "h":
                    gQ = "एका तासा";
                    break;
                case "hh":
                    gQ = "%d तासां";
                    break;
                case "d":
                    gQ = "एका दिवसा";
                    break;
                case "dd":
                    gQ = "%d दिवसां";
                    break;
                case "M":
                    gQ = "एका महिन्या";
                    break;
                case "MM":
                    gQ = "%d महिन्यां";
                    break;
                case "y":
                    gQ = "एका वर्षा";
                    break;
                case "yy":
                    gQ = "%d वर्षां";
                    break
            }
        }
        return gQ.replace(/%d/i, gT)
    }
    ga.defineLocale("mr", {
        months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
        monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
        monthsParseExact: true,
        weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
            LT: "A h:mm वाजता",
            LTS: "A h:mm:ss वाजता",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm वाजता",
            LLLL: "dddd, D MMMM YYYY, A h:mm वाजता"
        },
        calendar: {
            sameDay: "[आज] LT",
            nextDay: "[उद्या] LT",
            nextWeek: "dddd, LT",
            lastDay: "[काल] LT",
            lastWeek: "[मागील] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%sमध्ये",
            past: "%sपूर्वी",
            s: gO,
            m: gO,
            mm: gO,
            h: gO,
            hh: gO,
            d: gO,
            dd: gO,
            M: gO,
            MM: gO,
            y: gO,
            yy: gO
        },
        preparse: function(gQ) {
            return gQ.replace(/[१२३४५६७८९०]/g, function(gR) {
                return fF[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cP[gR]
            })
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "रात्री") {
                return gQ < 4 ? gQ : gQ + 12
            } else {
                if (gR === "सकाळी") {
                    return gQ
                } else {
                    if (gR === "दुपारी") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        if (gR === "सायंकाळी") {
                            return gQ + 12
                        }
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "रात्री"
            } else {
                if (gQ < 10) {
                    return "सकाळी"
                } else {
                    if (gQ < 17) {
                        return "दुपारी"
                    } else {
                        if (gQ < 20) {
                            return "सायंकाळी"
                        } else {
                            return "रात्री"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    ga.defineLocale("ms-my", {
        months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [pukul] HH.mm",
            LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "pagi") {
                return gQ
            } else {
                if (gR === "tengahari") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "petang" || gR === "malam") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 11) {
                return "pagi"
            } else {
                if (gQ < 15) {
                    return "tengahari"
                } else {
                    if (gQ < 19) {
                        return "petang"
                    } else {
                        return "malam"
                    }
                }
            }
        },
        calendar: {
            sameDay: "[Hari ini pukul] LT",
            nextDay: "[Esok pukul] LT",
            nextWeek: "dddd [pukul] LT",
            lastDay: "[Kelmarin pukul] LT",
            lastWeek: "dddd [lepas pukul] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dalam %s",
            past: "%s yang lepas",
            s: "beberapa saat",
            m: "seminit",
            mm: "%d minit",
            h: "sejam",
            hh: "%d jam",
            d: "sehari",
            dd: "%d hari",
            M: "sebulan",
            MM: "%d bulan",
            y: "setahun",
            yy: "%d tahun"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("ms", {
        months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [pukul] HH.mm",
            LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "pagi") {
                return gQ
            } else {
                if (gR === "tengahari") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "petang" || gR === "malam") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 11) {
                return "pagi"
            } else {
                if (gQ < 15) {
                    return "tengahari"
                } else {
                    if (gQ < 19) {
                        return "petang"
                    } else {
                        return "malam"
                    }
                }
            }
        },
        calendar: {
            sameDay: "[Hari ini pukul] LT",
            nextDay: "[Esok pukul] LT",
            nextWeek: "dddd [pukul] LT",
            lastDay: "[Kelmarin pukul] LT",
            lastWeek: "dddd [lepas pukul] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dalam %s",
            past: "%s yang lepas",
            s: "beberapa saat",
            m: "seminit",
            mm: "%d minit",
            h: "sejam",
            hh: "%d jam",
            d: "sehari",
            dd: "%d hari",
            M: "sebulan",
            MM: "%d bulan",
            y: "setahun",
            yy: "%d tahun"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    var cO = {
        "1": "၁",
        "2": "၂",
        "3": "၃",
        "4": "၄",
        "5": "၅",
        "6": "၆",
        "7": "၇",
        "8": "၈",
        "9": "၉",
        "0": "၀"
    };
    var fE = {
        "၁": "1",
        "၂": "2",
        "၃": "3",
        "၄": "4",
        "၅": "5",
        "၆": "6",
        "၇": "7",
        "၈": "8",
        "၉": "9",
        "၀": "0"
    };
    ga.defineLocale("my", {
        months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
        monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
        weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
        weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[ယနေ.] LT [မှာ]",
            nextDay: "[မနက်ဖြန်] LT [မှာ]",
            nextWeek: "dddd LT [မှာ]",
            lastDay: "[မနေ.က] LT [မှာ]",
            lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
            sameElse: "L"
        },
        relativeTime: {
            future: "လာမည့် %s မှာ",
            past: "လွန်ခဲ့သော %s က",
            s: "စက္ကန်.အနည်းငယ်",
            m: "တစ်မိနစ်",
            mm: "%d မိနစ်",
            h: "တစ်နာရီ",
            hh: "%d နာရီ",
            d: "တစ်ရက်",
            dd: "%d ရက်",
            M: "တစ်လ",
            MM: "%d လ",
            y: "တစ်နှစ်",
            yy: "%d နှစ်"
        },
        preparse: function(gQ) {
            return gQ.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(gR) {
                return fE[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cO[gR]
            })
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("nb", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        monthsParseExact: true,
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY [kl.] HH:mm",
            LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
        },
        calendar: {
            sameDay: "[i dag kl.] LT",
            nextDay: "[i morgen kl.] LT",
            nextWeek: "dddd [kl.] LT",
            lastDay: "[i går kl.] LT",
            lastWeek: "[forrige] dddd [kl.] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "om %s",
            past: "%s siden",
            s: "noen sekunder",
            m: "ett minutt",
            mm: "%d minutter",
            h: "en time",
            hh: "%d timer",
            d: "en dag",
            dd: "%d dager",
            M: "en måned",
            MM: "%d måneder",
            y: "ett år",
            yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var cN = {
        "1": "१",
        "2": "२",
        "3": "३",
        "4": "४",
        "5": "५",
        "6": "६",
        "7": "७",
        "8": "८",
        "9": "९",
        "0": "०"
    };
    var fD = {
        "१": "1",
        "२": "2",
        "३": "3",
        "४": "4",
        "५": "5",
        "६": "6",
        "७": "7",
        "८": "8",
        "९": "9",
        "०": "0"
    };
    ga.defineLocale("ne", {
        months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
        monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
        monthsParseExact: true,
        weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
        weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
        weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "Aको h:mm बजे",
            LTS: "Aको h:mm:ss बजे",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, Aको h:mm बजे",
            LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे"
        },
        preparse: function(gQ) {
            return gQ.replace(/[१२३४५६७८९०]/g, function(gR) {
                return fD[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return cN[gR]
            })
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "राति") {
                return gQ < 4 ? gQ : gQ + 12
            } else {
                if (gR === "बिहान") {
                    return gQ
                } else {
                    if (gR === "दिउँसो") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        if (gR === "साँझ") {
                            return gQ + 12
                        }
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 3) {
                return "राति"
            } else {
                if (gQ < 12) {
                    return "बिहान"
                } else {
                    if (gQ < 16) {
                        return "दिउँसो"
                    } else {
                        if (gQ < 20) {
                            return "साँझ"
                        } else {
                            return "राति"
                        }
                    }
                }
            }
        },
        calendar: {
            sameDay: "[आज] LT",
            nextDay: "[भोलि] LT",
            nextWeek: "[आउँदो] dddd[,] LT",
            lastDay: "[हिजो] LT",
            lastWeek: "[गएको] dddd[,] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%sमा",
            past: "%s अगाडि",
            s: "केही क्षण",
            m: "एक मिनेट",
            mm: "%d मिनेट",
            h: "एक घण्टा",
            hh: "%d घण्टा",
            d: "एक दिन",
            dd: "%d दिन",
            M: "एक महिना",
            MM: "%d महिना",
            y: "एक बर्ष",
            yy: "%d बर्ष"
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    var dl = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_");
    var dp = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");
    var fj = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var fs = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
    ga.defineLocale("nl-be", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort: function(gQ, gR) {
            if (/-MMM-/.test(gR)) {
                return dp[gQ.month()]
            } else {
                return dl[gQ.month()]
            }
        },
        monthsRegex: fs,
        monthsShortRegex: fs,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
        monthsParse: fj,
        longMonthsParse: fj,
        shortMonthsParse: fj,
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[vandaag om] LT",
            nextDay: "[morgen om] LT",
            nextWeek: "dddd [om] LT",
            lastDay: "[gisteren om] LT",
            lastWeek: "[afgelopen] dddd [om] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "over %s",
            past: "%s geleden",
            s: "een paar seconden",
            m: "één minuut",
            mm: "%d minuten",
            h: "één uur",
            hh: "%d uur",
            d: "één dag",
            dd: "%d dagen",
            M: "één maand",
            MM: "%d maanden",
            y: "één jaar",
            yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(gQ) {
            return gQ + ((gQ === 1 || gQ === 8 || gQ >= 20) ? "ste" : "de")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var dg = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_");
    var dk = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");
    var aw = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var fr = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
    ga.defineLocale("nl", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort: function(gQ, gR) {
            if (/-MMM-/.test(gR)) {
                return dk[gQ.month()]
            } else {
                return dg[gQ.month()]
            }
        },
        monthsRegex: fr,
        monthsShortRegex: fr,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
        monthsParse: aw,
        longMonthsParse: aw,
        shortMonthsParse: aw,
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD-MM-YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[vandaag om] LT",
            nextDay: "[morgen om] LT",
            nextWeek: "dddd [om] LT",
            lastDay: "[gisteren om] LT",
            lastWeek: "[afgelopen] dddd [om] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "over %s",
            past: "%s geleden",
            s: "een paar seconden",
            m: "één minuut",
            mm: "%d minuten",
            h: "één uur",
            hh: "%d uur",
            d: "één dag",
            dd: "%d dagen",
            M: "één maand",
            MM: "%d maanden",
            y: "één jaar",
            yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(gQ) {
            return gQ + ((gQ === 1 || gQ === 8 || gQ >= 20) ? "ste" : "de")
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("nn", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY [kl.] H:mm",
            LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
        },
        calendar: {
            sameDay: "[I dag klokka] LT",
            nextDay: "[I morgon klokka] LT",
            nextWeek: "dddd [klokka] LT",
            lastDay: "[I går klokka] LT",
            lastWeek: "[Føregåande] dddd [klokka] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "om %s",
            past: "%s sidan",
            s: "nokre sekund",
            m: "eit minutt",
            mm: "%d minutt",
            h: "ein time",
            hh: "%d timar",
            d: "ein dag",
            dd: "%d dagar",
            M: "ein månad",
            MM: "%d månader",
            y: "eit år",
            yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var gy = {
        "1": "੧",
        "2": "੨",
        "3": "੩",
        "4": "੪",
        "5": "੫",
        "6": "੬",
        "7": "੭",
        "8": "੮",
        "9": "੯",
        "0": "੦"
    };
    var fC = {
        "੧": "1",
        "੨": "2",
        "੩": "3",
        "੪": "4",
        "੫": "5",
        "੬": "6",
        "੭": "7",
        "੮": "8",
        "੯": "9",
        "੦": "0"
    };
    ga.defineLocale("pa-in", {
        months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
        monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
        weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),
        weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
        weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
        longDateFormat: {
            LT: "A h:mm ਵਜੇ",
            LTS: "A h:mm:ss ਵਜੇ",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
            LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ"
        },
        calendar: {
            sameDay: "[ਅਜ] LT",
            nextDay: "[ਕਲ] LT",
            nextWeek: "dddd, LT",
            lastDay: "[ਕਲ] LT",
            lastWeek: "[ਪਿਛਲੇ] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s ਵਿੱਚ",
            past: "%s ਪਿਛਲੇ",
            s: "ਕੁਝ ਸਕਿੰਟ",
            m: "ਇਕ ਮਿੰਟ",
            mm: "%d ਮਿੰਟ",
            h: "ਇੱਕ ਘੰਟਾ",
            hh: "%d ਘੰਟੇ",
            d: "ਇੱਕ ਦਿਨ",
            dd: "%d ਦਿਨ",
            M: "ਇੱਕ ਮਹੀਨਾ",
            MM: "%d ਮਹੀਨੇ",
            y: "ਇੱਕ ਸਾਲ",
            yy: "%d ਸਾਲ"
        },
        preparse: function(gQ) {
            return gQ.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function(gR) {
                return fC[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return gy[gR]
            })
        },
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "ਰਾਤ") {
                return gQ < 4 ? gQ : gQ + 12
            } else {
                if (gR === "ਸਵੇਰ") {
                    return gQ
                } else {
                    if (gR === "ਦੁਪਹਿਰ") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        if (gR === "ਸ਼ਾਮ") {
                            return gQ + 12
                        }
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "ਰਾਤ"
            } else {
                if (gQ < 10) {
                    return "ਸਵੇਰ"
                } else {
                    if (gQ < 17) {
                        return "ਦੁਪਹਿਰ"
                    } else {
                        if (gQ < 20) {
                            return "ਸ਼ਾਮ"
                        } else {
                            return "ਰਾਤ"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    var cm = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_");
    var ar = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");

    function cu(gQ) {
        return (gQ % 10 < 5) && (gQ % 10 > 1) && ((~~(gQ / 10) % 10) !== 1)
    }

    function gE(gT, gS, gR) {
        var gQ = gT + " ";
        switch (gR) {
            case "m":
                return gS ? "minuta" : "minutę";
            case "mm":
                return gQ + (cu(gT) ? "minuty" : "minut");
            case "h":
                return gS ? "godzina" : "godzinę";
            case "hh":
                return gQ + (cu(gT) ? "godziny" : "godzin");
            case "MM":
                return gQ + (cu(gT) ? "miesiące" : "miesięcy");
            case "yy":
                return gQ + (cu(gT) ? "lata" : "lat")
        }
    }
    ga.defineLocale("pl", {
        months: function(gR, gQ) {
            if (gQ === "") {
                return "(" + ar[gR.month()] + "|" + cm[gR.month()] + ")"
            } else {
                if (/D MMMM/.test(gQ)) {
                    return ar[gR.month()]
                } else {
                    return cm[gR.month()]
                }
            }
        },
        monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
        weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Dziś o] LT",
            nextDay: "[Jutro o] LT",
            nextWeek: "[W] dddd [o] LT",
            lastDay: "[Wczoraj o] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[W zeszłą niedzielę o] LT";
                    case 3:
                        return "[W zeszłą środę o] LT";
                    case 6:
                        return "[W zeszłą sobotę o] LT";
                    default:
                        return "[W zeszły] dddd [o] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "%s temu",
            s: "kilka sekund",
            m: gE,
            mm: gE,
            h: gE,
            hh: gE,
            d: "1 dzień",
            dd: "%d dni",
            M: "miesiąc",
            MM: gE,
            y: "rok",
            yy: gE
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("pt-br", {
        months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
        weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
            LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm"
        },
        calendar: {
            sameDay: "[Hoje às] LT",
            nextDay: "[Amanhã às] LT",
            nextWeek: "dddd [às] LT",
            lastDay: "[Ontem às] LT",
            lastWeek: function() {
                return (this.day() === 0 || this.day() === 6) ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "em %s",
            past: "%s atrás",
            s: "poucos segundos",
            m: "um minuto",
            mm: "%d minutos",
            h: "uma hora",
            hh: "%d horas",
            d: "um dia",
            dd: "%d dias",
            M: "um mês",
            MM: "%d meses",
            y: "um ano",
            yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº"
    });
    ga.defineLocale("pt", {
        months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),
        weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D [de] MMMM [de] YYYY",
            LLL: "D [de] MMMM [de] YYYY HH:mm",
            LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Hoje às] LT",
            nextDay: "[Amanhã às] LT",
            nextWeek: "dddd [às] LT",
            lastDay: "[Ontem às] LT",
            lastWeek: function() {
                return (this.day() === 0 || this.day() === 6) ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "em %s",
            past: "há %s",
            s: "segundos",
            m: "um minuto",
            mm: "%d minutos",
            h: "uma hora",
            hh: "%d horas",
            d: "um dia",
            dd: "%d dias",
            M: "um mês",
            MM: "%d meses",
            y: "um ano",
            yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function dy(gS, gR, gQ) {
        var gU = {
                mm: "minute",
                hh: "ore",
                dd: "zile",
                MM: "luni",
                yy: "ani"
            },
            gT = " ";
        if (gS % 100 >= 20 || (gS >= 100 && gS % 100 === 0)) {
            gT = " de "
        }
        return gS + gT + gU[gQ]
    }
    ga.defineLocale("ro", {
        months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
        monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
        weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY H:mm",
            LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[azi la] LT",
            nextDay: "[mâine la] LT",
            nextWeek: "dddd [la] LT",
            lastDay: "[ieri la] LT",
            lastWeek: "[fosta] dddd [la] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "peste %s",
            past: "%s în urmă",
            s: "câteva secunde",
            m: "un minut",
            mm: dy,
            h: "o oră",
            hh: dy,
            d: "o zi",
            dd: dy,
            M: "o lună",
            MM: dy,
            y: "un an",
            yy: dy
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    function cs(gS, gR) {
        var gQ = gS.split("_");
        return gR % 10 === 1 && gR % 100 !== 11 ? gQ[0] : (gR % 10 >= 2 && gR % 10 <= 4 && (gR % 100 < 10 || gR % 100 >= 20) ? gQ[1] : gQ[2])
    }

    function dw(gS, gR, gQ) {
        var gT = {
            mm: gR ? "минута_минуты_минут" : "минуту_минуты_минут",
            hh: "час_часа_часов",
            dd: "день_дня_дней",
            MM: "месяц_месяца_месяцев",
            yy: "год_года_лет"
        };
        if (gQ === "m") {
            return gR ? "минута" : "минуту"
        } else {
            return gS + " " + cs(gT[gQ], +gS)
        }
    }
    var av = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
    ga.defineLocale("ru", {
        months: {
            format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),
            standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")
        },
        monthsShort: {
            format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),
            standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")
        },
        weekdays: {
            standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
            format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse: av,
        longMonthsParse: av,
        shortMonthsParse: av,
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY г.",
            LLL: "D MMMM YYYY г., HH:mm",
            LLLL: "dddd, D MMMM YYYY г., HH:mm"
        },
        calendar: {
            sameDay: "[Сегодня в] LT",
            nextDay: "[Завтра в] LT",
            lastDay: "[Вчера в] LT",
            nextWeek: function(gQ) {
                if (gQ.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return "[В следующее] dddd [в] LT";
                        case 1:
                        case 2:
                        case 4:
                            return "[В следующий] dddd [в] LT";
                        case 3:
                        case 5:
                        case 6:
                            return "[В следующую] dddd [в] LT"
                    }
                } else {
                    if (this.day() === 2) {
                        return "[Во] dddd [в] LT"
                    } else {
                        return "[В] dddd [в] LT"
                    }
                }
            },
            lastWeek: function(gQ) {
                if (gQ.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return "[В прошлое] dddd [в] LT";
                        case 1:
                        case 2:
                        case 4:
                            return "[В прошлый] dddd [в] LT";
                        case 3:
                        case 5:
                        case 6:
                            return "[В прошлую] dddd [в] LT"
                    }
                } else {
                    if (this.day() === 2) {
                        return "[Во] dddd [в] LT"
                    } else {
                        return "[В] dddd [в] LT"
                    }
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "через %s",
            past: "%s назад",
            s: "несколько секунд",
            m: dw,
            mm: dw,
            h: "час",
            hh: dw,
            d: "день",
            dd: dw,
            M: "месяц",
            MM: dw,
            y: "год",
            yy: dw
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function(gQ) {
            return /^(дня|вечера)$/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "ночи"
            } else {
                if (gQ < 12) {
                    return "утра"
                } else {
                    if (gQ < 17) {
                        return "дня"
                    } else {
                        return "вечера"
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "M":
                case "d":
                case "DDD":
                    return gQ + "-й";
                case "D":
                    return gQ + "-го";
                case "w":
                case "W":
                    return gQ + "-я";
                default:
                    return gQ
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("se", {
        months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),
        monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),
        weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),
        weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
        weekdaysMin: "s_v_m_g_d_b_L".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "MMMM D. [b.] YYYY",
            LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
            LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
        },
        calendar: {
            sameDay: "[otne ti] LT",
            nextDay: "[ihttin ti] LT",
            nextWeek: "dddd [ti] LT",
            lastDay: "[ikte ti] LT",
            lastWeek: "[ovddit] dddd [ti] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s geažes",
            past: "maŋit %s",
            s: "moadde sekunddat",
            m: "okta minuhta",
            mm: "%d minuhtat",
            h: "okta diimmu",
            hh: "%d diimmut",
            d: "okta beaivi",
            dd: "%d beaivvit",
            M: "okta mánnu",
            MM: "%d mánut",
            y: "okta jahki",
            yy: "%d jagit"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("si", {
        months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),
        monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),
        weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),
        weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්රහ_සිකු_සෙන".split("_"),
        weekdaysMin: "ඉ_ස_අ_බ_බ්ර_සි_සෙ".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "a h:mm",
            LTS: "a h:mm:ss",
            L: "YYYY/MM/DD",
            LL: "YYYY MMMM D",
            LLL: "YYYY MMMM D, a h:mm",
            LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss"
        },
        calendar: {
            sameDay: "[අද] LT[ට]",
            nextDay: "[හෙට] LT[ට]",
            nextWeek: "dddd LT[ට]",
            lastDay: "[ඊයේ] LT[ට]",
            lastWeek: "[පසුගිය] dddd LT[ට]",
            sameElse: "L"
        },
        relativeTime: {
            future: "%sකින්",
            past: "%sකට පෙර",
            s: "තත්පර කිහිපය",
            m: "මිනිත්තුව",
            mm: "මිනිත්තු %d",
            h: "පැය",
            hh: "පැය %d",
            d: "දිනය",
            dd: "දින %d",
            M: "මාසය",
            MM: "මාස %d",
            y: "වසර",
            yy: "වසර %d"
        },
        ordinalParse: /\d{1,2} වැනි/,
        ordinal: function(gQ) {
            return gQ + " වැනි"
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function(gQ) {
            return gQ === "ප.ව." || gQ === "පස් වරු"
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ > 11) {
                return gS ? "ප.ව." : "පස් වරු"
            } else {
                return gS ? "පෙ.ව." : "පෙර වරු"
            }
        }
    });
    var ej = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_");
    var c1 = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

    function cr(gQ) {
        return (gQ > 1) && (gQ < 5)
    }

    function gC(gT, gS, gR, gU) {
        var gQ = gT + " ";
        switch (gR) {
            case "s":
                return (gS || gU) ? "pár sekúnd" : "pár sekundami";
            case "m":
                return gS ? "minúta" : (gU ? "minútu" : "minútou");
            case "mm":
                if (gS || gU) {
                    return gQ + (cr(gT) ? "minúty" : "minút")
                } else {
                    return gQ + "minútami"
                }
                break;
            case "h":
                return gS ? "hodina" : (gU ? "hodinu" : "hodinou");
            case "hh":
                if (gS || gU) {
                    return gQ + (cr(gT) ? "hodiny" : "hodín")
                } else {
                    return gQ + "hodinami"
                }
                break;
            case "d":
                return (gS || gU) ? "deň" : "dňom";
            case "dd":
                if (gS || gU) {
                    return gQ + (cr(gT) ? "dni" : "dní")
                } else {
                    return gQ + "dňami"
                }
                break;
            case "M":
                return (gS || gU) ? "mesiac" : "mesiacom";
            case "MM":
                if (gS || gU) {
                    return gQ + (cr(gT) ? "mesiace" : "mesiacov")
                } else {
                    return gQ + "mesiacmi"
                }
                break;
            case "y":
                return (gS || gU) ? "rok" : "rokom";
            case "yy":
                if (gS || gU) {
                    return gQ + (cr(gT) ? "roky" : "rokov")
                } else {
                    return gQ + "rokmi"
                }
                break
        }
    }
    ga.defineLocale("sk", {
        months: ej,
        monthsShort: c1,
        weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[dnes o] LT",
            nextDay: "[zajtra o] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[v nedeľu o] LT";
                    case 1:
                    case 2:
                        return "[v] dddd [o] LT";
                    case 3:
                        return "[v stredu o] LT";
                    case 4:
                        return "[vo štvrtok o] LT";
                    case 5:
                        return "[v piatok o] LT";
                    case 6:
                        return "[v sobotu o] LT"
                }
            },
            lastDay: "[včera o] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[minulú nedeľu o] LT";
                    case 1:
                    case 2:
                        return "[minulý] dddd [o] LT";
                    case 3:
                        return "[minulú stredu o] LT";
                    case 4:
                    case 5:
                        return "[minulý] dddd [o] LT";
                    case 6:
                        return "[minulú sobotu o] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "pred %s",
            s: gC,
            m: gC,
            mm: gC,
            h: gC,
            hh: gC,
            d: gC,
            dd: gC,
            M: gC,
            MM: gC,
            y: gC,
            yy: gC
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function al(gT, gS, gR, gU) {
        var gQ = gT + " ";
        switch (gR) {
            case "s":
                return gS || gU ? "nekaj sekund" : "nekaj sekundami";
            case "m":
                return gS ? "ena minuta" : "eno minuto";
            case "mm":
                if (gT === 1) {
                    gQ += gS ? "minuta" : "minuto"
                } else {
                    if (gT === 2) {
                        gQ += gS || gU ? "minuti" : "minutama"
                    } else {
                        if (gT < 5) {
                            gQ += gS || gU ? "minute" : "minutami"
                        } else {
                            gQ += gS || gU ? "minut" : "minutami"
                        }
                    }
                }
                return gQ;
            case "h":
                return gS ? "ena ura" : "eno uro";
            case "hh":
                if (gT === 1) {
                    gQ += gS ? "ura" : "uro"
                } else {
                    if (gT === 2) {
                        gQ += gS || gU ? "uri" : "urama"
                    } else {
                        if (gT < 5) {
                            gQ += gS || gU ? "ure" : "urami"
                        } else {
                            gQ += gS || gU ? "ur" : "urami"
                        }
                    }
                }
                return gQ;
            case "d":
                return gS || gU ? "en dan" : "enim dnem";
            case "dd":
                if (gT === 1) {
                    gQ += gS || gU ? "dan" : "dnem"
                } else {
                    if (gT === 2) {
                        gQ += gS || gU ? "dni" : "dnevoma"
                    } else {
                        gQ += gS || gU ? "dni" : "dnevi"
                    }
                }
                return gQ;
            case "M":
                return gS || gU ? "en mesec" : "enim mesecem";
            case "MM":
                if (gT === 1) {
                    gQ += gS || gU ? "mesec" : "mesecem"
                } else {
                    if (gT === 2) {
                        gQ += gS || gU ? "meseca" : "mesecema"
                    } else {
                        if (gT < 5) {
                            gQ += gS || gU ? "mesece" : "meseci"
                        } else {
                            gQ += gS || gU ? "mesecev" : "meseci"
                        }
                    }
                }
                return gQ;
            case "y":
                return gS || gU ? "eno leto" : "enim letom";
            case "yy":
                if (gT === 1) {
                    gQ += gS || gU ? "leto" : "letom"
                } else {
                    if (gT === 2) {
                        gQ += gS || gU ? "leti" : "letoma"
                    } else {
                        if (gT < 5) {
                            gQ += gS || gU ? "leta" : "leti"
                        } else {
                            gQ += gS || gU ? "let" : "leti"
                        }
                    }
                }
                return gQ
        }
    }
    ga.defineLocale("sl", {
        months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[danes ob] LT",
            nextDay: "[jutri ob] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[v] [nedeljo] [ob] LT";
                    case 3:
                        return "[v] [sredo] [ob] LT";
                    case 6:
                        return "[v] [soboto] [ob] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[v] dddd [ob] LT"
                }
            },
            lastDay: "[včeraj ob] LT",
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[prejšnjo] [nedeljo] [ob] LT";
                    case 3:
                        return "[prejšnjo] [sredo] [ob] LT";
                    case 6:
                        return "[prejšnjo] [soboto] [ob] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[prejšnji] dddd [ob] LT"
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "čez %s",
            past: "pred %s",
            s: al,
            m: al,
            mm: al,
            h: al,
            hh: al,
            d: al,
            dd: al,
            M: al,
            MM: al,
            y: al,
            yy: al
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("sq", {
        months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function(gQ) {
            return gQ.charAt(0) === "M"
        },
        meridiem: function(gQ, gR, gS) {
            return gQ < 12 ? "PD" : "MD"
        },
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Sot në] LT",
            nextDay: "[Nesër në] LT",
            nextWeek: "dddd [në] LT",
            lastDay: "[Dje në] LT",
            lastWeek: "dddd [e kaluar në] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "në %s",
            past: "%s më parë",
            s: "disa sekonda",
            m: "një minutë",
            mm: "%d minuta",
            h: "një orë",
            hh: "%d orë",
            d: "një ditë",
            dd: "%d ditë",
            M: "një muaj",
            MM: "%d muaj",
            y: "një vit",
            yy: "%d vite"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var cv = {
        words: {
            m: ["један минут", "једне минуте"],
            mm: ["минут", "минуте", "минута"],
            h: ["један сат", "једног сата"],
            hh: ["сат", "сата", "сати"],
            dd: ["дан", "дана", "дана"],
            MM: ["месец", "месеца", "месеци"],
            yy: ["година", "године", "година"]
        },
        correctGrammaticalCase: function(gR, gQ) {
            return gR === 1 ? gQ[0] : (gR >= 2 && gR <= 4 ? gQ[1] : gQ[2])
        },
        translate: function(gT, gR, gQ) {
            var gS = cv.words[gQ];
            if (gQ.length === 1) {
                return gR ? gS[0] : gS[1]
            } else {
                return gT + " " + cv.correctGrammaticalCase(gT, gS)
            }
        }
    };
    ga.defineLocale("sr-cyrl", {
        months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),
        monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),
        monthsParseExact: true,
        weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),
        weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
        weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[данас у] LT",
            nextDay: "[сутра у] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[у] [недељу] [у] LT";
                    case 3:
                        return "[у] [среду] [у] LT";
                    case 6:
                        return "[у] [суботу] [у] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[у] dddd [у] LT"
                }
            },
            lastDay: "[јуче у] LT",
            lastWeek: function() {
                var gQ = ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"];
                return gQ[this.day()]
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "за %s",
            past: "пре %s",
            s: "неколико секунди",
            m: cv.translate,
            mm: cv.translate,
            h: cv.translate,
            hh: cv.translate,
            d: "дан",
            dd: cv.translate,
            M: "месец",
            MM: cv.translate,
            y: "годину",
            yy: cv.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    var ct = {
        words: {
            m: ["jedan minut", "jedne minute"],
            mm: ["minut", "minute", "minuta"],
            h: ["jedan sat", "jednog sata"],
            hh: ["sat", "sata", "sati"],
            dd: ["dan", "dana", "dana"],
            MM: ["mesec", "meseca", "meseci"],
            yy: ["godina", "godine", "godina"]
        },
        correctGrammaticalCase: function(gR, gQ) {
            return gR === 1 ? gQ[0] : (gR >= 2 && gR <= 4 ? gQ[1] : gQ[2])
        },
        translate: function(gT, gR, gQ) {
            var gS = ct.words[gQ];
            if (gQ.length === 1) {
                return gR ? gS[0] : gS[1]
            } else {
                return gT + " " + ct.correctGrammaticalCase(gT, gS)
            }
        }
    };
    ga.defineLocale("sr", {
        months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: true,
        weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY H:mm",
            LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
            sameDay: "[danas u] LT",
            nextDay: "[sutra u] LT",
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return "[u] [nedelju] [u] LT";
                    case 3:
                        return "[u] [sredu] [u] LT";
                    case 6:
                        return "[u] [subotu] [u] LT";
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return "[u] dddd [u] LT"
                }
            },
            lastDay: "[juče u] LT",
            lastWeek: function() {
                var gQ = ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"];
                return gQ[this.day()]
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "za %s",
            past: "pre %s",
            s: "nekoliko sekundi",
            m: ct.translate,
            mm: ct.translate,
            h: ct.translate,
            hh: ct.translate,
            d: "dan",
            dd: ct.translate,
            M: "mesec",
            MM: ct.translate,
            y: "godinu",
            yy: ct.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("ss", {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
        monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
        weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
        weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
        weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
            sameDay: "[Namuhla nga] LT",
            nextDay: "[Kusasa nga] LT",
            nextWeek: "dddd [nga] LT",
            lastDay: "[Itolo nga] LT",
            lastWeek: "dddd [leliphelile] [nga] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "nga %s",
            past: "wenteka nga %s",
            s: "emizuzwana lomcane",
            m: "umzuzu",
            mm: "%d emizuzu",
            h: "lihora",
            hh: "%d emahora",
            d: "lilanga",
            dd: "%d emalanga",
            M: "inyanga",
            MM: "%d tinyanga",
            y: "umnyaka",
            yy: "%d iminyaka"
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function(gQ, gR, gS) {
            if (gQ < 11) {
                return "ekuseni"
            } else {
                if (gQ < 15) {
                    return "emini"
                } else {
                    if (gQ < 19) {
                        return "entsambama"
                    } else {
                        return "ebusuku"
                    }
                }
            }
        },
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "ekuseni") {
                return gQ
            } else {
                if (gR === "emini") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "entsambama" || gR === "ebusuku") {
                        if (gQ === 0) {
                            return 0
                        }
                        return gQ + 12
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}/,
        ordinal: "%d",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("sv", {
        months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY-MM-DD",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY [kl.] HH:mm",
            LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
            lll: "D MMM YYYY HH:mm",
            llll: "ddd D MMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Idag] LT",
            nextDay: "[Imorgon] LT",
            lastDay: "[Igår] LT",
            nextWeek: "[På] dddd LT",
            lastWeek: "[I] dddd[s] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "om %s",
            past: "för %s sedan",
            s: "några sekunder",
            m: "en minut",
            mm: "%d minuter",
            h: "en timme",
            hh: "%d timmar",
            d: "en dag",
            dd: "%d dagar",
            M: "en månad",
            MM: "%d månader",
            y: "ett år",
            yy: "%d år"
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "e" : (gQ === 1) ? "a" : (gQ === 2) ? "a" : (gQ === 3) ? "e" : "e";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("sw", {
        months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
        weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
        weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[leo saa] LT",
            nextDay: "[kesho saa] LT",
            nextWeek: "[wiki ijayo] dddd [saat] LT",
            lastDay: "[jana] LT",
            lastWeek: "[wiki iliyopita] dddd [saat] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s baadaye",
            past: "tokea %s",
            s: "hivi punde",
            m: "dakika moja",
            mm: "dakika %d",
            h: "saa limoja",
            hh: "masaa %d",
            d: "siku moja",
            dd: "masiku %d",
            M: "mwezi mmoja",
            MM: "miezi %d",
            y: "mwaka mmoja",
            yy: "miaka %d"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    var gx = {
        "1": "௧",
        "2": "௨",
        "3": "௩",
        "4": "௪",
        "5": "௫",
        "6": "௬",
        "7": "௭",
        "8": "௮",
        "9": "௯",
        "0": "௦"
    };
    var b3 = {
        "௧": "1",
        "௨": "2",
        "௩": "3",
        "௪": "4",
        "௫": "5",
        "௬": "6",
        "௭": "7",
        "௮": "8",
        "௯": "9",
        "௦": "0"
    };
    ga.defineLocale("ta", {
        months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
        weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
        weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, HH:mm",
            LLLL: "dddd, D MMMM YYYY, HH:mm"
        },
        calendar: {
            sameDay: "[இன்று] LT",
            nextDay: "[நாளை] LT",
            nextWeek: "dddd, LT",
            lastDay: "[நேற்று] LT",
            lastWeek: "[கடந்த வாரம்] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s இல்",
            past: "%s முன்",
            s: "ஒரு சில விநாடிகள்",
            m: "ஒரு நிமிடம்",
            mm: "%d நிமிடங்கள்",
            h: "ஒரு மணி நேரம்",
            hh: "%d மணி நேரம்",
            d: "ஒரு நாள்",
            dd: "%d நாட்கள்",
            M: "ஒரு மாதம்",
            MM: "%d மாதங்கள்",
            y: "ஒரு வருடம்",
            yy: "%d ஆண்டுகள்"
        },
        ordinalParse: /\d{1,2}வது/,
        ordinal: function(gQ) {
            return gQ + "வது"
        },
        preparse: function(gQ) {
            return gQ.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(gR) {
                return b3[gR]
            })
        },
        postformat: function(gQ) {
            return gQ.replace(/\d/g, function(gR) {
                return gx[gR]
            })
        },
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function(gQ, gS, gR) {
            if (gQ < 2) {
                return " யாமம்"
            } else {
                if (gQ < 6) {
                    return " வைகறை"
                } else {
                    if (gQ < 10) {
                        return " காலை"
                    } else {
                        if (gQ < 14) {
                            return " நண்பகல்"
                        } else {
                            if (gQ < 18) {
                                return " எற்பாடு"
                            } else {
                                if (gQ < 22) {
                                    return " மாலை"
                                } else {
                                    return " யாமம்"
                                }
                            }
                        }
                    }
                }
            }
        },
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "யாமம்") {
                return gQ < 2 ? gQ : gQ + 12
            } else {
                if (gR === "வைகறை" || gR === "காலை") {
                    return gQ
                } else {
                    if (gR === "நண்பகல்") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        return gQ + 12
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    ga.defineLocale("te", {
        months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),
        monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),
        monthsParseExact: true,
        weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),
        weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
        weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
        longDateFormat: {
            LT: "A h:mm",
            LTS: "A h:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY, A h:mm",
            LLLL: "dddd, D MMMM YYYY, A h:mm"
        },
        calendar: {
            sameDay: "[నేడు] LT",
            nextDay: "[రేపు] LT",
            nextWeek: "dddd, LT",
            lastDay: "[నిన్న] LT",
            lastWeek: "[గత] dddd, LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s లో",
            past: "%s క్రితం",
            s: "కొన్ని క్షణాలు",
            m: "ఒక నిమిషం",
            mm: "%d నిమిషాలు",
            h: "ఒక గంట",
            hh: "%d గంటలు",
            d: "ఒక రోజు",
            dd: "%d రోజులు",
            M: "ఒక నెల",
            MM: "%d నెలలు",
            y: "ఒక సంవత్సరం",
            yy: "%d సంవత్సరాలు"
        },
        ordinalParse: /\d{1,2}వ/,
        ordinal: "%dవ",
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "రాత్రి") {
                return gQ < 4 ? gQ : gQ + 12
            } else {
                if (gR === "ఉదయం") {
                    return gQ
                } else {
                    if (gR === "మధ్యాహ్నం") {
                        return gQ >= 10 ? gQ : gQ + 12
                    } else {
                        if (gR === "సాయంత్రం") {
                            return gQ + 12
                        }
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "రాత్రి"
            } else {
                if (gQ < 10) {
                    return "ఉదయం"
                } else {
                    if (gQ < 17) {
                        return "మధ్యాహ్నం"
                    } else {
                        if (gQ < 20) {
                            return "సాయంత్రం"
                        } else {
                            return "రాత్రి"
                        }
                    }
                }
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
    ga.defineLocale("tet", {
        months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),
        weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),
        weekdaysMin: "Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Ohin iha] LT",
            nextDay: "[Aban iha] LT",
            nextWeek: "dddd [iha] LT",
            lastDay: "[Horiseik iha] LT",
            lastWeek: "dddd [semana kotuk] [iha] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "iha %s",
            past: "%s liuba",
            s: "minutu balun",
            m: "minutu ida",
            mm: "minutus %d",
            h: "horas ida",
            hh: "horas %d",
            d: "loron ida",
            dd: "loron %d",
            M: "fulan ida",
            MM: "fulan %d",
            y: "tinan ida",
            yy: "tinan %d"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("th", {
        months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),
        monthsParseExact: true,
        weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
        weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "H:mm",
            LTS: "H:mm:ss",
            L: "YYYY/MM/DD",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY เวลา H:mm",
            LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm"
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function(gQ) {
            return gQ === "หลังเที่ยง"
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 12) {
                return "ก่อนเที่ยง"
            } else {
                return "หลังเที่ยง"
            }
        },
        calendar: {
            sameDay: "[วันนี้ เวลา] LT",
            nextDay: "[พรุ่งนี้ เวลา] LT",
            nextWeek: "dddd[หน้า เวลา] LT",
            lastDay: "[เมื่อวานนี้ เวลา] LT",
            lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "อีก %s",
            past: "%sที่แล้ว",
            s: "ไม่กี่วินาที",
            m: "1 นาที",
            mm: "%d นาที",
            h: "1 ชั่วโมง",
            hh: "%d ชั่วโมง",
            d: "1 วัน",
            dd: "%d วัน",
            M: "1 เดือน",
            MM: "%d เดือน",
            y: "1 ปี",
            yy: "%d ปี"
        }
    });
    ga.defineLocale("tl-ph", {
        months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "MM/D/YYYY",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY HH:mm",
            LLLL: "dddd, MMMM DD, YYYY HH:mm"
        },
        calendar: {
            sameDay: "LT [ngayong araw]",
            nextDay: "[Bukas ng] LT",
            nextWeek: "LT [sa susunod na] dddd",
            lastDay: "LT [kahapon]",
            lastWeek: "LT [noong nakaraang] dddd",
            sameElse: "L"
        },
        relativeTime: {
            future: "sa loob ng %s",
            past: "%s ang nakalipas",
            s: "ilang segundo",
            m: "isang minuto",
            mm: "%d minuto",
            h: "isang oras",
            hh: "%d oras",
            d: "isang araw",
            dd: "%d araw",
            M: "isang buwan",
            MM: "%d buwan",
            y: "isang taon",
            yy: "%d taon"
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(gQ) {
            return gQ
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    var X = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");

    function f8(gQ) {
        var gR = gQ;
        gR = (gQ.indexOf("jaj") !== -1) ? gR.slice(0, -3) + "leS" : (gQ.indexOf("jar") !== -1) ? gR.slice(0, -3) + "waQ" : (gQ.indexOf("DIS") !== -1) ? gR.slice(0, -3) + "nem" : gR + " pIq";
        return gR
    }

    function gI(gQ) {
        var gR = gQ;
        gR = (gQ.indexOf("jaj") !== -1) ? gR.slice(0, -3) + "Hu’" : (gQ.indexOf("jar") !== -1) ? gR.slice(0, -3) + "wen" : (gQ.indexOf("DIS") !== -1) ? gR.slice(0, -3) + "ben" : gR + " ret";
        return gR
    }

    function gB(gT, gS, gR, gU) {
        var gQ = em(gT);
        switch (gR) {
            case "mm":
                return gQ + " tup";
            case "hh":
                return gQ + " rep";
            case "dd":
                return gQ + " jaj";
            case "MM":
                return gQ + " jar";
            case "yy":
                return gQ + " DIS"
        }
    }

    function em(gS) {
        var gU = Math.floor((gS % 1000) / 100),
            gQ = Math.floor((gS % 100) / 10),
            gR = gS % 10,
            gT = "";
        if (gU > 0) {
            gT += X[gU] + "vatlh"
        }
        if (gQ > 0) {
            gT += ((gT !== "") ? " " : "") + X[gQ] + "maH"
        }
        if (gR > 0) {
            gT += ((gT !== "") ? " " : "") + X[gR]
        }
        return (gT === "") ? "pagh" : gT
    }
    ga.defineLocale("tlh", {
        months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),
        monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),
        monthsParseExact: true,
        weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[DaHjaj] LT",
            nextDay: "[wa’leS] LT",
            nextWeek: "LLL",
            lastDay: "[wa’Hu’] LT",
            lastWeek: "LLL",
            sameElse: "L"
        },
        relativeTime: {
            future: f8,
            past: gI,
            s: "puS lup",
            m: "wa’ tup",
            mm: gB,
            h: "wa’ rep",
            hh: gB,
            d: "wa’ jaj",
            dd: gB,
            M: "wa’ jar",
            MM: gB,
            y: "wa’ DIS",
            yy: gB
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });
    var j = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı"
    };
    ga.defineLocale("tr", {
        months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[bugün saat] LT",
            nextDay: "[yarın saat] LT",
            nextWeek: "[haftaya] dddd [saat] LT",
            lastDay: "[dün] LT",
            lastWeek: "[geçen hafta] dddd [saat] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s sonra",
            past: "%s önce",
            s: "birkaç saniye",
            m: "bir dakika",
            mm: "%d dakika",
            h: "bir saat",
            hh: "%d saat",
            d: "bir gün",
            dd: "%d gün",
            M: "bir ay",
            MM: "%d ay",
            y: "bir yıl",
            yy: "%d yıl"
        },
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal: function(gS) {
            if (gS === 0) {
                return gS + "'ıncı"
            }
            var gR = gS % 10,
                gQ = gS % 100 - gR,
                gT = gS >= 100 ? 100 : null;
            return gS + (j[gR] || j[gQ] || j[gT])
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("tzl", {
        months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),
        monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
        weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),
        weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
        weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
        longDateFormat: {
            LT: "HH.mm",
            LTS: "HH.mm.ss",
            L: "DD.MM.YYYY",
            LL: "D. MMMM [dallas] YYYY",
            LLL: "D. MMMM [dallas] YYYY HH.mm",
            LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function(gQ) {
            return "d'o" === gQ.toLowerCase()
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ > 11) {
                return gS ? "d'o" : "D'O"
            } else {
                return gS ? "d'a" : "D'A"
            }
        },
        calendar: {
            sameDay: "[oxhi à] LT",
            nextDay: "[demà à] LT",
            nextWeek: "dddd [à] LT",
            lastDay: "[ieiri à] LT",
            lastWeek: "[sür el] dddd [lasteu à] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "osprei %s",
            past: "ja%s",
            s: aj,
            m: aj,
            mm: aj,
            h: aj,
            hh: aj,
            d: aj,
            dd: aj,
            M: aj,
            MM: aj,
            y: aj,
            yy: aj
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
            dow: 1,
            doy: 4
        }
    });

    function aj(gS, gR, gQ, gU) {
        var gT = {
            s: ["viensas secunds", "'iensas secunds"],
            m: ["'n míut", "'iens míut"],
            mm: [gS + " míuts", "" + gS + " míuts"],
            h: ["'n þora", "'iensa þora"],
            hh: [gS + " þoras", "" + gS + " þoras"],
            d: ["'n ziua", "'iensa ziua"],
            dd: [gS + " ziuas", "" + gS + " ziuas"],
            M: ["'n mes", "'iens mes"],
            MM: [gS + " mesen", "" + gS + " mesen"],
            y: ["'n ar", "'iens ar"],
            yy: [gS + " ars", "" + gS + " ars"]
        };
        return gU ? gT[gQ][0] : (gR ? gT[gQ][0] : gT[gQ][1])
    }
    ga.defineLocale("tzm-latn", {
        months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[asdkh g] LT",
            nextDay: "[aska g] LT",
            nextWeek: "dddd [g] LT",
            lastDay: "[assant g] LT",
            lastWeek: "dddd [g] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "dadkh s yan %s",
            past: "yan %s",
            s: "imik",
            m: "minuḍ",
            mm: "%d minuḍ",
            h: "saɛa",
            hh: "%d tassaɛin",
            d: "ass",
            dd: "%d ossan",
            M: "ayowr",
            MM: "%d iyyirn",
            y: "asgas",
            yy: "%d isgasn"
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
    ga.defineLocale("tzm", {
        months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
            nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
            nextWeek: "dddd [ⴴ] LT",
            lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
            lastWeek: "dddd [ⴴ] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
            past: "ⵢⴰⵏ %s",
            s: "ⵉⵎⵉⴽ",
            m: "ⵎⵉⵏⵓⴺ",
            mm: "%d ⵎⵉⵏⵓⴺ",
            h: "ⵙⴰⵄⴰ",
            hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
            d: "ⴰⵙⵙ",
            dd: "%d oⵙⵙⴰⵏ",
            M: "ⴰⵢoⵓⵔ",
            MM: "%d ⵉⵢⵢⵉⵔⵏ",
            y: "ⴰⵙⴳⴰⵙ",
            yy: "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week: {
            dow: 6,
            doy: 12
        }
    });

    function cq(gS, gR) {
        var gQ = gS.split("_");
        return gR % 10 === 1 && gR % 100 !== 11 ? gQ[0] : (gR % 10 >= 2 && gR % 10 <= 4 && (gR % 100 < 10 || gR % 100 >= 20) ? gQ[1] : gQ[2])
    }

    function dv(gS, gR, gQ) {
        var gT = {
            mm: gR ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин",
            hh: gR ? "година_години_годин" : "годину_години_годин",
            dd: "день_дні_днів",
            MM: "місяць_місяці_місяців",
            yy: "рік_роки_років"
        };
        if (gQ === "m") {
            return gR ? "хвилина" : "хвилину"
        } else {
            if (gQ === "h") {
                return gR ? "година" : "годину"
            } else {
                return gS + " " + cq(gT[gQ], +gS)
            }
        }
    }

    function bK(gQ, gT) {
        var gR = {
                nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
                accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
                genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
            },
            gS = (/(\[[ВвУу]\]) ?dddd/).test(gT) ? "accusative" : ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(gT) ? "genitive" : "nominative");
        return gR[gS][gQ.day()]
    }

    function aP(gQ) {
        return function() {
            return gQ + "о" + (this.hours() === 11 ? "б" : "") + "] LT"
        }
    }
    ga.defineLocale("uk", {
        months: {
            format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),
            standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")
        },
        monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays: bK,
        weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD.MM.YYYY",
            LL: "D MMMM YYYY р.",
            LLL: "D MMMM YYYY р., HH:mm",
            LLLL: "dddd, D MMMM YYYY р., HH:mm"
        },
        calendar: {
            sameDay: aP("[Сьогодні "),
            nextDay: aP("[Завтра "),
            lastDay: aP("[Вчора "),
            nextWeek: aP("[У] dddd ["),
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return aP("[Минулої] dddd [").call(this);
                    case 1:
                    case 2:
                    case 4:
                        return aP("[Минулого] dddd [").call(this)
                }
            },
            sameElse: "L"
        },
        relativeTime: {
            future: "за %s",
            past: "%s тому",
            s: "декілька секунд",
            m: dv,
            mm: dv,
            h: "годину",
            hh: dv,
            d: "день",
            dd: dv,
            M: "місяць",
            MM: dv,
            y: "рік",
            yy: dv
        },
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function(gQ) {
            return /^(дня|вечора)$/.test(gQ)
        },
        meridiem: function(gQ, gS, gR) {
            if (gQ < 4) {
                return "ночі"
            } else {
                if (gQ < 12) {
                    return "ранку"
                } else {
                    if (gQ < 17) {
                        return "дня"
                    } else {
                        return "вечора"
                    }
                }
            }
        },
        ordinalParse: /\d{1,2}-(й|го)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "M":
                case "d":
                case "DDD":
                case "w":
                case "W":
                    return gQ + "-й";
                case "D":
                    return gQ + "-го";
                default:
                    return gQ
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("uz", {
        months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
        monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "D MMMM YYYY, dddd HH:mm"
        },
        calendar: {
            sameDay: "[Бугун соат] LT [да]",
            nextDay: "[Эртага] LT [да]",
            nextWeek: "dddd [куни соат] LT [да]",
            lastDay: "[Кеча соат] LT [да]",
            lastWeek: "[Утган] dddd [куни соат] LT [да]",
            sameElse: "L"
        },
        relativeTime: {
            future: "Якин %s ичида",
            past: "Бир неча %s олдин",
            s: "фурсат",
            m: "бир дакика",
            mm: "%d дакика",
            h: "бир соат",
            hh: "%d соат",
            d: "бир кун",
            dd: "%d кун",
            M: "бир ой",
            MM: "%d ой",
            y: "бир йил",
            yy: "%d йил"
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
    ga.defineLocale("vi", {
        months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        monthsParseExact: true,
        weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function(gQ) {
            return /^ch$/i.test(gQ)
        },
        meridiem: function(gQ, gR, gS) {
            if (gQ < 12) {
                return gS ? "sa" : "SA"
            } else {
                return gS ? "ch" : "CH"
            }
        },
        longDateFormat: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "DD/MM/YYYY",
            LL: "D MMMM [năm] YYYY",
            LLL: "D MMMM [năm] YYYY HH:mm",
            LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
            l: "DD/M/YYYY",
            ll: "D MMM YYYY",
            lll: "D MMM YYYY HH:mm",
            llll: "ddd, D MMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[Hôm nay lúc] LT",
            nextDay: "[Ngày mai lúc] LT",
            nextWeek: "dddd [tuần tới lúc] LT",
            lastDay: "[Hôm qua lúc] LT",
            lastWeek: "dddd [tuần rồi lúc] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "%s tới",
            past: "%s trước",
            s: "vài giây",
            m: "một phút",
            mm: "%d phút",
            h: "một giờ",
            hh: "%d giờ",
            d: "một ngày",
            dd: "%d ngày",
            M: "một tháng",
            MM: "%d tháng",
            y: "một năm",
            yy: "%d năm"
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(gQ) {
            return gQ
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("x-pseudo", {
        months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),
        monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),
        monthsParseExact: true,
        weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),
        weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
        weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY HH:mm",
            LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
            sameDay: "[T~ódá~ý át] LT",
            nextDay: "[T~ómó~rró~w át] LT",
            nextWeek: "dddd [át] LT",
            lastDay: "[Ý~ést~érdá~ý át] LT",
            lastWeek: "[L~ást] dddd [át] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "í~ñ %s",
            past: "%s á~gó",
            s: "á ~féw ~sécó~ñds",
            m: "á ~míñ~úté",
            mm: "%d m~íñú~tés",
            h: "á~ñ hó~úr",
            hh: "%d h~óúrs",
            d: "á ~dáý",
            dd: "%d d~áýs",
            M: "á ~móñ~th",
            MM: "%d m~óñt~hs",
            y: "á ~ýéár",
            yy: "%d ý~éárs"
        },
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(gS) {
            var gQ = gS % 10,
                gR = (~~(gS % 100 / 10) === 1) ? "th" : (gQ === 1) ? "st" : (gQ === 2) ? "nd" : (gQ === 3) ? "rd" : "th";
            return gS + gR
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("yo", {
        months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),
        monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),
        weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
        weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
        weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
        longDateFormat: {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY h:mm A",
            LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
            sameDay: "[Ònì ni] LT",
            nextDay: "[Ọ̀la ni] LT",
            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
            lastDay: "[Àna ni] LT",
            lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
            sameElse: "L"
        },
        relativeTime: {
            future: "ní %s",
            past: "%s kọjá",
            s: "ìsẹjú aayá die",
            m: "ìsẹjú kan",
            mm: "ìsẹjú %d",
            h: "wákati kan",
            hh: "wákati %d",
            d: "ọjọ́ kan",
            dd: "ọjọ́ %d",
            M: "osù kan",
            MM: "osù %d",
            y: "ọdún kan",
            yy: "ọdún %d"
        },
        ordinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: "ọjọ́ %d",
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("zh-cn", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
            LT: "Ah点mm分",
            LTS: "Ah点m分s秒",
            L: "YYYY-MM-DD",
            LL: "YYYY年MMMD日",
            LLL: "YYYY年MMMD日Ah点mm分",
            LLLL: "YYYY年MMMD日ddddAh点mm分",
            l: "YYYY-MM-DD",
            ll: "YYYY年MMMD日",
            lll: "YYYY年MMMD日Ah点mm分",
            llll: "YYYY年MMMD日ddddAh点mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "凌晨" || gR === "早上" || gR === "上午") {
                return gQ
            } else {
                if (gR === "下午" || gR === "晚上") {
                    return gQ + 12
                } else {
                    return gQ >= 11 ? gQ : gQ + 12
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            var gT = gQ * 100 + gS;
            if (gT < 600) {
                return "凌晨"
            } else {
                if (gT < 900) {
                    return "早上"
                } else {
                    if (gT < 1130) {
                        return "上午"
                    } else {
                        if (gT < 1230) {
                            return "中午"
                        } else {
                            if (gT < 1800) {
                                return "下午"
                            } else {
                                return "晚上"
                            }
                        }
                    }
                }
            }
        },
        calendar: {
            sameDay: function() {
                return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT"
            },
            nextDay: function() {
                return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT"
            },
            lastDay: function() {
                return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT"
            },
            nextWeek: function() {
                var gQ, gR;
                gQ = ga().startOf("week");
                gR = this.diff(gQ, "days") >= 7 ? "[下]" : "[本]";
                return this.minutes() === 0 ? gR + "dddAh点整" : gR + "dddAh点mm"
            },
            lastWeek: function() {
                var gQ, gR;
                gQ = ga().startOf("week");
                gR = this.unix() < gQ.unix() ? "[上]" : "[本]";
                return this.minutes() === 0 ? gR + "dddAh点整" : gR + "dddAh点mm"
            },
            sameElse: "LL"
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "d":
                case "D":
                case "DDD":
                    return gQ + "日";
                case "M":
                    return gQ + "月";
                case "w":
                case "W":
                    return gQ + "周";
                default:
                    return gQ
            }
        },
        relativeTime: {
            future: "%s内",
            past: "%s前",
            s: "几秒",
            m: "1 分钟",
            mm: "%d 分钟",
            h: "1 小时",
            hh: "%d 小时",
            d: "1 天",
            dd: "%d 天",
            M: "1 个月",
            MM: "%d 个月",
            y: "1 年",
            yy: "%d 年"
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
    ga.defineLocale("zh-hk", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
            LT: "Ah點mm分",
            LTS: "Ah點m分s秒",
            L: "YYYY年MMMD日",
            LL: "YYYY年MMMD日",
            LLL: "YYYY年MMMD日Ah點mm分",
            LLLL: "YYYY年MMMD日ddddAh點mm分",
            l: "YYYY年MMMD日",
            ll: "YYYY年MMMD日",
            lll: "YYYY年MMMD日Ah點mm分",
            llll: "YYYY年MMMD日ddddAh點mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "凌晨" || gR === "早上" || gR === "上午") {
                return gQ
            } else {
                if (gR === "中午") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "下午" || gR === "晚上") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            var gT = gQ * 100 + gS;
            if (gT < 600) {
                return "凌晨"
            } else {
                if (gT < 900) {
                    return "早上"
                } else {
                    if (gT < 1130) {
                        return "上午"
                    } else {
                        if (gT < 1230) {
                            return "中午"
                        } else {
                            if (gT < 1800) {
                                return "下午"
                            } else {
                                return "晚上"
                            }
                        }
                    }
                }
            }
        },
        calendar: {
            sameDay: "[今天]LT",
            nextDay: "[明天]LT",
            nextWeek: "[下]ddddLT",
            lastDay: "[昨天]LT",
            lastWeek: "[上]ddddLT",
            sameElse: "L"
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "d":
                case "D":
                case "DDD":
                    return gQ + "日";
                case "M":
                    return gQ + "月";
                case "w":
                case "W":
                    return gQ + "週";
                default:
                    return gQ
            }
        },
        relativeTime: {
            future: "%s內",
            past: "%s前",
            s: "幾秒",
            m: "1 分鐘",
            mm: "%d 分鐘",
            h: "1 小時",
            hh: "%d 小時",
            d: "1 天",
            dd: "%d 天",
            M: "1 個月",
            MM: "%d 個月",
            y: "1 年",
            yy: "%d 年"
        }
    });
    ga.defineLocale("zh-tw", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
            LT: "Ah點mm分",
            LTS: "Ah點m分s秒",
            L: "YYYY年MMMD日",
            LL: "YYYY年MMMD日",
            LLL: "YYYY年MMMD日Ah點mm分",
            LLLL: "YYYY年MMMD日ddddAh點mm分",
            l: "YYYY年MMMD日",
            ll: "YYYY年MMMD日",
            lll: "YYYY年MMMD日Ah點mm分",
            llll: "YYYY年MMMD日ddddAh點mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(gQ, gR) {
            if (gQ === 12) {
                gQ = 0
            }
            if (gR === "凌晨" || gR === "早上" || gR === "上午") {
                return gQ
            } else {
                if (gR === "中午") {
                    return gQ >= 11 ? gQ : gQ + 12
                } else {
                    if (gR === "下午" || gR === "晚上") {
                        return gQ + 12
                    }
                }
            }
        },
        meridiem: function(gQ, gS, gR) {
            var gT = gQ * 100 + gS;
            if (gT < 600) {
                return "凌晨"
            } else {
                if (gT < 900) {
                    return "早上"
                } else {
                    if (gT < 1130) {
                        return "上午"
                    } else {
                        if (gT < 1230) {
                            return "中午"
                        } else {
                            if (gT < 1800) {
                                return "下午"
                            } else {
                                return "晚上"
                            }
                        }
                    }
                }
            }
        },
        calendar: {
            sameDay: "[今天]LT",
            nextDay: "[明天]LT",
            nextWeek: "[下]ddddLT",
            lastDay: "[昨天]LT",
            lastWeek: "[上]ddddLT",
            sameElse: "L"
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function(gQ, gR) {
            switch (gR) {
                case "d":
                case "D":
                case "DDD":
                    return gQ + "日";
                case "M":
                    return gQ + "月";
                case "w":
                case "W":
                    return gQ + "週";
                default:
                    return gQ
            }
        },
        relativeTime: {
            future: "%s內",
            past: "%s前",
            s: "幾秒",
            m: "1 分鐘",
            mm: "%d 分鐘",
            h: "1 小時",
            hh: "%d 小時",
            d: "1 天",
            dd: "%d 天",
            M: "1 個月",
            MM: "%d 個月",
            y: "1 年",
            yy: "%d 年"
        }
    });
    ga.locale("en");
    return ga
})));