(function(e) {
    e.formatCurrency = {};
    e.formatCurrencyLive = {};
    e.toNumber = {};
    e.asNumber = {};
    var h = {
        colorize: false,
        region: "",
        roundToDecimalPlace: 2,
        minimumDecimalPlaces: 9,
        eventOnDecimalsEntered: false,
        suppressCurrencySymbol: false,
        removeTrailingZerosOnDecimal: false,
        parseAsFloat: false
    };
    var d = {
        decPointCharCodes: [],
        formatOnBlur: true,
        filterKeys: true,
        formatOnType: true
    };
    var b = {
        region: ""
    };
    var f = {
        region: "",
        parse: true,
        parseType: "Float"
    };
    e.formatCurrency.regions = [];
    e.formatCurrency.regions[""] = {
        symbol: "$",
        positiveFormat: "%s%n",
        negativeFormat: "(%s%n)",
        decimalSymbol: ".",
        digitGroupSymbol: ",",
        groupDigits: true
    };
    e.formatCurrencyLive.setDefaults = function(j) {
        e.extend(d, j)
    };
    e.fn.formatCurrencyLive = function(j) {
        return this.each(function() {
            var l = e(this);
            j = i(j, e.extend({}, h, d, (l.data("formatCurrency") ? l.data("formatCurrency") : {})));
            if (j.roundToDecimalPlace === -2) {
                j.decPointCharCodes = [-1, -1, -1]
            } else {
                if (j.decimalSymbol == ",") {
                    j.decPointCharCodes = [44, 188, 110]
                } else {
                    j.decPointCharCodes = [46, 190, 110]
                }
            }
            l.data("formatCurrency", j);
            if (j.filterKeys) {
                l.off("keypress.formatCurrency").on("keypress.formatCurrency", function(m) {
                    if (!c(m, j.decPointCharCodes)) {
                        m.preventDefault()
                    }
                })
            }
            if (j.formatOnType) {
                var k = e.extend({}, j, {
                    roundToDecimalPlace: -1,
                    removeTrailingZerosOnDecimal: false
                });
                l.off("keyup.formatCurrency").on("keyup.formatCurrency", function(m) {
                    if (c(m, j.decPointCharCodes)) {
                        e(this).formatCurrency(k)
                    }
                })
            }
            if (j.formatOnBlur) {
                l.on("blur.formatCurrency", function(m) {
                    e(this).formatCurrency(j)
                })
            }
            e(this).formatCurrency(j)
        })
    };
    e.formatCurrency.setDefaults = function(j) {
        e.extend(h, j)
    };
    e.formatCurrency.setAllDefaults = function(j) {
        for (var k in j) {
            if (h.hasOwnProperty(k)) {
                h[k] = j[k]
            }
            if (d.hasOwnProperty(k)) {
                d[k] = j[k]
            }
            if (b.hasOwnProperty(k)) {
                b[k] = j[k]
            }
            if (f.hasOwnProperty(k)) {
                f[k] = j[k]
            }
        }
    };
    e.fn.formatCurrency = function(j, k) {
        if (arguments.length == 1 && typeof j !== "string") {
            k = j;
            j = false
        }
        k = (e(this).data("formatCurrency") && !k ? e(this).data("formatCurrency") : k);
        return this.each(function() {
            var o = e(this);
            var l = "0";
            l = o[o.is("input, select, textarea") ? "val" : "html"]();
            var n = e.getFormattedCurrency(l, k, true);
            k = n[4];
            o.data("fcMetadata", {
                hasDecimals: n[1],
                originalDecimals: n[2],
                isPositive: n[3]
            });
            if (!n) {
                return
            }
            var m = e([]);
            if (!j) {
                m = o
            } else {
                m = e(j)
            }
            m[m.is("input, select, textarea") ? "val" : "html"](n[0]);
            if (n[1] && k.eventOnDecimalsEntered && n[2].length > 0) {
                m.trigger("decimalsEntered", n[2])
            }
            if (k.colorize) {
                m.css("color", n[3] ? "black" : "red")
            }
        })
    };
    e.getFormattedCurrency = function(t, p, j) {
        p = i(p, h);
        if (p.parseAsFloat) {
            var l = parseFloat(t);
            t = isNaN(l) ? t : l
        }
        t = (typeof(t) !== "string" ? t.toString().replace(".", p.decimalSymbol) : t);
        if (t.search("\\(") >= 0) {
            t = "-" + t
        }
        if (t === "" || (t === "-" && p.roundToDecimalPlace === -1)) {
            return (j ? [t, false, "", true, p] : "")
        }
        t = t.replace(p.symbol, "");
        t = t.replace(p.regexGroupDigit, "");
        if (p.decimalSymbol != ".") {
            t = t.replace(p.decimalSymbol, ".")
        }
        if (isNaN(t)) {
            t = t.replace(p.regexArithmetic, "");
            if (t === "" || (t === "-" && p.roundToDecimalPlace === -1)) {
                t = "0"
            }
            if (isNaN(t)) {
                t = "0"
            }
        }
        var u = (t == Math.abs(t));
        if (!u && p.disableNegative === true) {
            t = 0;
            u = true
        }
        var r = String(t).split(".");
        var o = (r.length > 1 && p.roundToDecimalPlace > -2);
        var n = (o ? r[1].toString() : "0");
        var m = o || n != "0" ? n : "";
        t = Math.abs(r[0]);
        t = isNaN(t) ? 0 : t;
        if (p.roundToDecimalPlace >= 0) {
            n = parseFloat("1." + n);
            n = n.toFixed(p.roundToDecimalPlace);
            if (n.substring(0, 1) == "2") {
                t = Number(t) + 1
            }
            n = n.substring(2)
        }
        t = String(t);
        if (p.groupDigits) {
            for (var q = 0; q < Math.floor((t.length - (1 + q)) / 3); q++) {
                t = t.substring(0, t.length - (4 * q + 3)) + p.digitGroupSymbol + t.substring(t.length - (4 * q + 3))
            }
        }
        if ((o && p.roundToDecimalPlace == -1) || p.roundToDecimalPlace > 0) {
            if (p.removeTrailingZerosOnDecimal) {
                n = n.replace(/0+$/, "");
                if (n.length < p.minimumDecimalPlaces) {
                    n = String(n + Array(p.minimumDecimalPlaces + 1).join("0")).slice(0, p.minimumDecimalPlaces)
                }
            }
            t += (n.length > 0 ? p.decimalSymbol + n : "")
        }
        var s = u ? p.positiveFormat : p.negativeFormat;
        var k = s;
        k = k.replace(/%s/g, p.symbol);
        k = k.replace(/%n/g, t);
        return (j ? [k, o, m, u, p] : k)
    };
    e.toNumber.setDefaults = function(j) {
        e.extend(b, j)
    };
    e.fn.toNumber = function(j) {
        return this.each(function() {
            var k = e(this).is("input, select, textarea") ? "val" : "html";
            e(this)[k](e.toNumber(e(this)[k](), j))
        })
    };
    e.toNumber = function(k, j) {
        j = i(j, b);
        return k.replace("(", "(-").replace(j.regex, "")
    };
    e.asNumber.setDefaults = function(j) {
        e.extend(f, j)
    };
    e.fn.asNumber = function(k) {
        var l = e(this).is("input, select, textarea") ? "val" : "html";
        var j = e(this)[l]();
        return e.asNumber(j, k)
    };
    e.asNumber = function(k, j) {
        j = i(j, f);
        k = k ? k : "";
        k = k.replace("(", "(-");
        k = k.replace(j.regex, "");
        if (!j.parse) {
            return k
        }
        if (k.length == 0) {
            k = "0"
        }
        if (j.decimalSymbol != ".") {
            k = k.replace(j.decimalSymbol, ".")
        }
        return window["parse" + j.parseType](k)
    };

    function i(j, m) {
        if (!j) {
            j = {}
        }
        var l = j;
        j = e.extend({}, m, e.formatCurrency.regions[""], j);
        if (j.region !== "") {
            e.extend(j, g(j.region), l)
        }
        if (j.suppressCurrencySymbol) {
            j.symbol = "";
            j.positiveFormat = e.trim(j.positiveFormat.replace("%s", ""));
            j.negativeFormat = e.trim(j.negativeFormat.replace("%s", "").replace(" %n", "%n"))
        }
        if (j.roundToDecimalPlace >= -1) {
            j.minimumDecimalPlaces = (j.roundToDecimalPlace == -1 || j.minimumDecimalPlaces > j.roundToDecimalPlace ? j.roundToDecimalPlace : j.minimumDecimalPlaces)
        } else {
            j.minimumDecimalPlaces = 0
        }
        if (j.hasOwnProperty("parseType")) {
            j.parseType = a(j.parseType)
        }
        j.regexArithmetic = new RegExp("[^\\d\\.\\-]", "g");
        if (j.symbol === "") {
            j.regex = new RegExp("[^\\d" + j.decimalSymbol + "-]", "g")
        } else {
            var k = j.symbol.replace("$", "\\$").replace(".", "\\.");
            j.regex = new RegExp(k + "|[^\\d" + j.decimalSymbol + "-]", "g")
        }
        j.regexGroupDigit = new RegExp("\\" + j.digitGroupSymbol, "g");
        return j
    }

    function c(k, j) {
        if (k.which >= 48 && k.which <= 57) {
            return true
        } else {
            if (k.type == "keypress" && k.which == j[0]) {
                return (k.target.value.indexOf(String.fromCharCode(j[0])) == -1)
            } else {
                if (k.type == "keypress") {
                    if (k.ctrlKey && k.key.toUpperCase() == "A") {
                        return true
                    }
                    return (k.which < 32 || (k.which >= 33 && k.which <= 40) || (j[0] != -1 && k.which == 46))
                } else {
                    if (k.type == "keyup") {
                        if (k.ctrlKey && k.key.toUpperCase() == "A") {
                            return false
                        }
                        if (k.which < 32 || (k.which >= 33 && k.which <= 40)) {
                            return false
                        }
                        if (j[0] != -1) {
                            switch (k.which) {
                                case 78:
                                    break;
                                case j[2]:
                                    break;
                                case j[1]:
                                    break;
                                default:
                                    return true
                            }
                        }
                        return false
                    } else {
                        return true
                    }
                }
            }
        }
    }

    function g(l) {
        var k = e.formatCurrency.regions[l];
        if (k) {
            return k
        } else {
            if (/(\w+)-(\w+)/g.test(l)) {
                var j = l.replace(/(\w+)-(\w+)/g, "$1");
                return e.formatCurrency.regions[j]
            }
        }
        return null
    }

    function a(j) {
        switch (j.toLowerCase()) {
            case "int":
                return "Int";
            case "float":
                return "Float";
            default:
                throw "invalid parseType"
        }
    }
})(jQuery);